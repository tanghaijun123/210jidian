
111.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005900  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cb4  08005a10  08005a10  00015a10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066c4  080066c4  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  080066c4  080066c4  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066c4  080066c4  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066c4  080066c4  000166c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066c8  080066c8  000166c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080066cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000650  200001d8  080068a4  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000828  080068a4  00020828  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007807  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001aa0  00000000  00000000  00027a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b0  00000000  00000000  000294f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001819f  00000000  00000000  00029da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000badf  00000000  00000000  00041f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008499a  00000000  00000000  0004da1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000692  00000000  00000000  000d23b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000031d0  00000000  00000000  000d2a4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003a  00000000  00000000  000d5c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	080059f8 	.word	0x080059f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	080059f8 	.word	0x080059f8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9c:	4b42      	ldr	r3, [pc, #264]	; (8000ba8 <MX_GPIO_Init+0x120>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a41      	ldr	r2, [pc, #260]	; (8000ba8 <MX_GPIO_Init+0x120>)
 8000aa2:	f043 0310 	orr.w	r3, r3, #16
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b3f      	ldr	r3, [pc, #252]	; (8000ba8 <MX_GPIO_Init+0x120>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0310 	and.w	r3, r3, #16
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab4:	4b3c      	ldr	r3, [pc, #240]	; (8000ba8 <MX_GPIO_Init+0x120>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a3b      	ldr	r2, [pc, #236]	; (8000ba8 <MX_GPIO_Init+0x120>)
 8000aba:	f043 0320 	orr.w	r3, r3, #32
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b39      	ldr	r3, [pc, #228]	; (8000ba8 <MX_GPIO_Init+0x120>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0320 	and.w	r3, r3, #32
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000acc:	4b36      	ldr	r3, [pc, #216]	; (8000ba8 <MX_GPIO_Init+0x120>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a35      	ldr	r2, [pc, #212]	; (8000ba8 <MX_GPIO_Init+0x120>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b33      	ldr	r3, [pc, #204]	; (8000ba8 <MX_GPIO_Init+0x120>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae4:	4b30      	ldr	r3, [pc, #192]	; (8000ba8 <MX_GPIO_Init+0x120>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a2f      	ldr	r2, [pc, #188]	; (8000ba8 <MX_GPIO_Init+0x120>)
 8000aea:	f043 0308 	orr.w	r3, r3, #8
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b2d      	ldr	r3, [pc, #180]	; (8000ba8 <MX_GPIO_Init+0x120>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0308 	and.w	r3, r3, #8
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000afc:	2201      	movs	r2, #1
 8000afe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b02:	482a      	ldr	r0, [pc, #168]	; (8000bac <MX_GPIO_Init+0x124>)
 8000b04:	f001 f9ef 	bl	8001ee6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2160      	movs	r1, #96	; 0x60
 8000b0c:	4828      	ldr	r0, [pc, #160]	; (8000bb0 <MX_GPIO_Init+0x128>)
 8000b0e:	f001 f9ea 	bl	8001ee6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2302      	movs	r3, #2
 8000b22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4820      	ldr	r0, [pc, #128]	; (8000bac <MX_GPIO_Init+0x124>)
 8000b2c:	f001 f840 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000b30:	2318      	movs	r3, #24
 8000b32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b34:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <MX_GPIO_Init+0x12c>)
 8000b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	4619      	mov	r1, r3
 8000b42:	481b      	ldr	r0, [pc, #108]	; (8000bb0 <MX_GPIO_Init+0x128>)
 8000b44:	f001 f834 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000b48:	2360      	movs	r3, #96	; 0x60
 8000b4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2302      	movs	r3, #2
 8000b56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4814      	ldr	r0, [pc, #80]	; (8000bb0 <MX_GPIO_Init+0x128>)
 8000b60:	f001 f826 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = key1_Pin|key0_Pin|key2_Pin;
 8000b64:	f240 4303 	movw	r3, #1027	; 0x403
 8000b68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b72:	f107 0310 	add.w	r3, r7, #16
 8000b76:	4619      	mov	r1, r3
 8000b78:	480f      	ldr	r0, [pc, #60]	; (8000bb8 <MX_GPIO_Init+0x130>)
 8000b7a:	f001 f819 	bl	8001bb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2102      	movs	r1, #2
 8000b82:	2009      	movs	r0, #9
 8000b84:	f000 ffdd 	bl	8001b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000b88:	2009      	movs	r0, #9
 8000b8a:	f000 fff6 	bl	8001b7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2102      	movs	r1, #2
 8000b92:	200a      	movs	r0, #10
 8000b94:	f000 ffd5 	bl	8001b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000b98:	200a      	movs	r0, #10
 8000b9a:	f000 ffee 	bl	8001b7a <HAL_NVIC_EnableIRQ>

}
 8000b9e:	bf00      	nop
 8000ba0:	3720      	adds	r7, #32
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40011000 	.word	0x40011000
 8000bb0:	40010800 	.word	0x40010800
 8000bb4:	10210000 	.word	0x10210000
 8000bb8:	40010c00 	.word	0x40010c00

08000bbc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <MX_I2C1_Init+0x50>)
 8000bc2:	4a13      	ldr	r2, [pc, #76]	; (8000c10 <MX_I2C1_Init+0x54>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <MX_I2C1_Init+0x50>)
 8000bc8:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <MX_I2C1_Init+0x58>)
 8000bca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <MX_I2C1_Init+0x50>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <MX_I2C1_Init+0x50>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <MX_I2C1_Init+0x50>)
 8000bda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000be0:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <MX_I2C1_Init+0x50>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <MX_I2C1_Init+0x50>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bec:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <MX_I2C1_Init+0x50>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <MX_I2C1_Init+0x50>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bf8:	4804      	ldr	r0, [pc, #16]	; (8000c0c <MX_I2C1_Init+0x50>)
 8000bfa:	f001 f9af 	bl	8001f5c <HAL_I2C_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c04:	f000 f8d9 	bl	8000dba <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	200001f4 	.word	0x200001f4
 8000c10:	40005400 	.word	0x40005400
 8000c14:	00061a80 	.word	0x00061a80

08000c18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0310 	add.w	r3, r7, #16
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a15      	ldr	r2, [pc, #84]	; (8000c88 <HAL_I2C_MspInit+0x70>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d123      	bne.n	8000c80 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <HAL_I2C_MspInit+0x74>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a13      	ldr	r2, [pc, #76]	; (8000c8c <HAL_I2C_MspInit+0x74>)
 8000c3e:	f043 0308 	orr.w	r3, r3, #8
 8000c42:	6193      	str	r3, [r2, #24]
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <HAL_I2C_MspInit+0x74>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	f003 0308 	and.w	r3, r3, #8
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c50:	23c0      	movs	r3, #192	; 0xc0
 8000c52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c54:	2312      	movs	r3, #18
 8000c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	4619      	mov	r1, r3
 8000c62:	480b      	ldr	r0, [pc, #44]	; (8000c90 <HAL_I2C_MspInit+0x78>)
 8000c64:	f000 ffa4 	bl	8001bb0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <HAL_I2C_MspInit+0x74>)
 8000c6a:	69db      	ldr	r3, [r3, #28]
 8000c6c:	4a07      	ldr	r2, [pc, #28]	; (8000c8c <HAL_I2C_MspInit+0x74>)
 8000c6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c72:	61d3      	str	r3, [r2, #28]
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_I2C_MspInit+0x74>)
 8000c76:	69db      	ldr	r3, [r3, #28]
 8000c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c80:	bf00      	nop
 8000c82:	3720      	adds	r7, #32
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40005400 	.word	0x40005400
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40010c00 	.word	0x40010c00

08000c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c9a:	f000 fdf5 	bl	8001888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9e:	f000 f847 	bl	8000d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca2:	f7ff fef1 	bl	8000a88 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ca6:	f7ff ff89 	bl	8000bbc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Transmit( &huart1, send, sizeof(send), 1000);
 HAL_Delay(200);
 8000caa:	20c8      	movs	r0, #200	; 0xc8
 8000cac:	f000 fe4e 	bl	800194c <HAL_Delay>
  OLED_Init();
 8000cb0:	f000 f8b0 	bl	8000e14 <OLED_Init>
//  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1); // 读取 GPIOB 的引�??? 1 的状�???

  menu();
 8000cb4:	f000 f90a 	bl	8000ecc <menu>

// OLED_PrintString(40,40, "波特律动", &font16x16,OLED_COLOR_NORMAL  );
  int pt = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN WHILE */

  while (1)
  {

      if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) {
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	481b      	ldr	r0, [pc, #108]	; (8000d2c <main+0x98>)
 8000cc0:	f001 f8fa 	bl	8001eb8 <HAL_GPIO_ReadPin>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d119      	bne.n	8000cfe <main+0x6a>
           pt += 10; // 按下时累加计时器
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	330a      	adds	r3, #10
 8000cce:	607b      	str	r3, [r7, #4]
           HAL_Delay(10); // 确保循环继续
 8000cd0:	200a      	movs	r0, #10
 8000cd2:	f000 fe3b 	bl	800194c <HAL_Delay>

           if (pt >= 2000) { // 长按3�??
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000cdc:	db11      	blt.n	8000d02 <main+0x6e>
               menu1();
 8000cde:	f000 f933 	bl	8000f48 <menu1>
               pt = 0; // 重置计时�??
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
               while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) {
 8000ce6:	e002      	b.n	8000cee <main+0x5a>
                   HAL_Delay(10); // 确保按键释放
 8000ce8:	200a      	movs	r0, #10
 8000cea:	f000 fe2f 	bl	800194c <HAL_Delay>
               while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) {
 8000cee:	2102      	movs	r1, #2
 8000cf0:	480e      	ldr	r0, [pc, #56]	; (8000d2c <main+0x98>)
 8000cf2:	f001 f8e1 	bl	8001eb8 <HAL_GPIO_ReadPin>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d0f5      	beq.n	8000ce8 <main+0x54>
 8000cfc:	e001      	b.n	8000d02 <main+0x6e>
               }
           }

       } else {
          pt = 0; // 当按键被释放时重置计时器
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]

           }


	          if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET)
 8000d02:	2101      	movs	r1, #1
 8000d04:	4809      	ldr	r0, [pc, #36]	; (8000d2c <main+0x98>)
 8000d06:	f001 f8d7 	bl	8001eb8 <HAL_GPIO_ReadPin>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1d5      	bne.n	8000cbc <main+0x28>
	          {
	              menu();
 8000d10:	f000 f8dc 	bl	8000ecc <menu>
	              HAL_Delay(100); // 延时�??段时间以避免连续触发
 8000d14:	2064      	movs	r0, #100	; 0x64
 8000d16:	f000 fe19 	bl	800194c <HAL_Delay>
	              while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET);
 8000d1a:	bf00      	nop
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	4803      	ldr	r0, [pc, #12]	; (8000d2c <main+0x98>)
 8000d20:	f001 f8ca 	bl	8001eb8 <HAL_GPIO_ReadPin>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d0f8      	beq.n	8000d1c <main+0x88>
      if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) {
 8000d2a:	e7c7      	b.n	8000cbc <main+0x28>
 8000d2c:	40010c00 	.word	0x40010c00

08000d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b090      	sub	sp, #64	; 0x40
 8000d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d36:	f107 0318 	add.w	r3, r7, #24
 8000d3a:	2228      	movs	r2, #40	; 0x28
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f002 ff17 	bl	8003b72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d52:	2301      	movs	r3, #1
 8000d54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d60:	2301      	movs	r3, #1
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d64:	2302      	movs	r3, #2
 8000d66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d6e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d72:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d74:	f107 0318 	add.w	r3, r7, #24
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f001 fd8b 	bl	8002894 <HAL_RCC_OscConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d84:	f000 f819 	bl	8000dba <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d88:	230f      	movs	r3, #15
 8000d8a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2102      	movs	r1, #2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f001 fff8 	bl	8002d98 <HAL_RCC_ClockConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000dae:	f000 f804 	bl	8000dba <Error_Handler>
  }
}
 8000db2:	bf00      	nop
 8000db4:	3740      	adds	r7, #64	; 0x40
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dbe:	b672      	cpsid	i
}
 8000dc0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <Error_Handler+0x8>

08000dc4 <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af02      	add	r7, sp, #8
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8000dd0:	78fb      	ldrb	r3, [r7, #3]
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd8:	9200      	str	r2, [sp, #0]
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	2178      	movs	r1, #120	; 0x78
 8000dde:	4803      	ldr	r0, [pc, #12]	; (8000dec <OLED_Send+0x28>)
 8000de0:	f001 fa00 	bl	80021e4 <HAL_I2C_Master_Transmit>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	200001f4 	.word	0x200001f4

08000df0 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 8000dfa:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <OLED_SendCmd+0x20>)
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8000e00:	2102      	movs	r1, #2
 8000e02:	4803      	ldr	r0, [pc, #12]	; (8000e10 <OLED_SendCmd+0x20>)
 8000e04:	f7ff ffde 	bl	8000dc4 <OLED_Send>
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	2000064c 	.word	0x2000064c

08000e14 <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 8000e18:	20ae      	movs	r0, #174	; 0xae
 8000e1a:	f7ff ffe9 	bl	8000df0 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 8000e1e:	2020      	movs	r0, #32
 8000e20:	f7ff ffe6 	bl	8000df0 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8000e24:	2010      	movs	r0, #16
 8000e26:	f7ff ffe3 	bl	8000df0 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 8000e2a:	20b0      	movs	r0, #176	; 0xb0
 8000e2c:	f7ff ffe0 	bl	8000df0 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 8000e30:	20c8      	movs	r0, #200	; 0xc8
 8000e32:	f7ff ffdd 	bl	8000df0 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff ffda 	bl	8000df0 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8000e3c:	2010      	movs	r0, #16
 8000e3e:	f7ff ffd7 	bl	8000df0 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 8000e42:	2040      	movs	r0, #64	; 0x40
 8000e44:	f7ff ffd4 	bl	8000df0 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 8000e48:	2081      	movs	r0, #129	; 0x81
 8000e4a:	f7ff ffd1 	bl	8000df0 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 8000e4e:	20df      	movs	r0, #223	; 0xdf
 8000e50:	f7ff ffce 	bl	8000df0 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 8000e54:	20a1      	movs	r0, #161	; 0xa1
 8000e56:	f7ff ffcb 	bl	8000df0 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 8000e5a:	20a6      	movs	r0, #166	; 0xa6
 8000e5c:	f7ff ffc8 	bl	8000df0 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 8000e60:	20a8      	movs	r0, #168	; 0xa8
 8000e62:	f7ff ffc5 	bl	8000df0 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 8000e66:	203f      	movs	r0, #63	; 0x3f
 8000e68:	f7ff ffc2 	bl	8000df0 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 8000e6c:	20a4      	movs	r0, #164	; 0xa4
 8000e6e:	f7ff ffbf 	bl	8000df0 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 8000e72:	20d3      	movs	r0, #211	; 0xd3
 8000e74:	f7ff ffbc 	bl	8000df0 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f7ff ffb9 	bl	8000df0 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 8000e7e:	20d5      	movs	r0, #213	; 0xd5
 8000e80:	f7ff ffb6 	bl	8000df0 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 8000e84:	20f0      	movs	r0, #240	; 0xf0
 8000e86:	f7ff ffb3 	bl	8000df0 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 8000e8a:	20d9      	movs	r0, #217	; 0xd9
 8000e8c:	f7ff ffb0 	bl	8000df0 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 8000e90:	2022      	movs	r0, #34	; 0x22
 8000e92:	f7ff ffad 	bl	8000df0 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 8000e96:	20da      	movs	r0, #218	; 0xda
 8000e98:	f7ff ffaa 	bl	8000df0 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8000e9c:	2012      	movs	r0, #18
 8000e9e:	f7ff ffa7 	bl	8000df0 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 8000ea2:	20db      	movs	r0, #219	; 0xdb
 8000ea4:	f7ff ffa4 	bl	8000df0 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 8000ea8:	2020      	movs	r0, #32
 8000eaa:	f7ff ffa1 	bl	8000df0 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 8000eae:	208d      	movs	r0, #141	; 0x8d
 8000eb0:	f7ff ff9e 	bl	8000df0 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 8000eb4:	2014      	movs	r0, #20
 8000eb6:	f7ff ff9b 	bl	8000df0 <OLED_SendCmd>

  OLED_NewFrame();
 8000eba:	f000 f8c5 	bl	8001048 <OLED_NewFrame>
  OLED_ShowFrame();
 8000ebe:	f000 f8cf 	bl	8001060 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 8000ec2:	20af      	movs	r0, #175	; 0xaf
 8000ec4:	f7ff ff94 	bl	8000df0 <OLED_SendCmd>
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <menu>:
{
  OLED_SendCmd(0x8D); // 电荷泵使能
  OLED_SendCmd(0x10); // 关闭电荷泵
  OLED_SendCmd(0xAE); // 关闭屏幕
}
void menu(void){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af02      	add	r7, sp, #8
  OLED_NewFrame();
 8000ed2:	f000 f8b9 	bl	8001048 <OLED_NewFrame>
  OLED_PrintString(40, 0, "信号类型", &font12x12, OLED_COLOR_NORMAL);
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <menu+0x64>)
 8000edc:	4a15      	ldr	r2, [pc, #84]	; (8000f34 <menu+0x68>)
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2028      	movs	r0, #40	; 0x28
 8000ee2:	f000 fad6 	bl	8001492 <OLED_PrintString>
  OLED_PrintString(10,16,"温度", &font12x12, OLED_COLOR_NORMAL);
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <menu+0x64>)
 8000eec:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <menu+0x6c>)
 8000eee:	2110      	movs	r1, #16
 8000ef0:	200a      	movs	r0, #10
 8000ef2:	f000 face 	bl	8001492 <OLED_PrintString>
  OLED_PrintString(10, 28, "压力", &font12x12, OLED_COLOR_NORMAL);
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <menu+0x64>)
 8000efc:	4a0f      	ldr	r2, [pc, #60]	; (8000f3c <menu+0x70>)
 8000efe:	211c      	movs	r1, #28
 8000f00:	200a      	movs	r0, #10
 8000f02:	f000 fac6 	bl	8001492 <OLED_PrintString>
  OLED_PrintString(10, 40, "位移", &font12x12, OLED_COLOR_NORMAL);
 8000f06:	2300      	movs	r3, #0
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <menu+0x64>)
 8000f0c:	4a0c      	ldr	r2, [pc, #48]	; (8000f40 <menu+0x74>)
 8000f0e:	2128      	movs	r1, #40	; 0x28
 8000f10:	200a      	movs	r0, #10
 8000f12:	f000 fabe 	bl	8001492 <OLED_PrintString>
  OLED_PrintString(10, 53, "流量", &font12x12, OLED_COLOR_NORMAL);
 8000f16:	2300      	movs	r3, #0
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <menu+0x64>)
 8000f1c:	4a09      	ldr	r2, [pc, #36]	; (8000f44 <menu+0x78>)
 8000f1e:	2135      	movs	r1, #53	; 0x35
 8000f20:	200a      	movs	r0, #10
 8000f22:	f000 fab6 	bl	8001492 <OLED_PrintString>
  OLED_ShowFrame();
 8000f26:	f000 f89b 	bl	8001060 <OLED_ShowFrame>
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	0800631c 	.word	0x0800631c
 8000f34:	08005a10 	.word	0x08005a10
 8000f38:	08005a20 	.word	0x08005a20
 8000f3c:	08005a28 	.word	0x08005a28
 8000f40:	08005a30 	.word	0x08005a30
 8000f44:	08005a38 	.word	0x08005a38

08000f48 <menu1>:
//    OLED_PrintString(0, posY, "*", &font12x12, OLED_COLOR_NORMAL);
//    OLED_ShowFrame();
//}
int posY = 16; // 初始星号位置的 Y 坐标
int keyPressed = 0;// 按键按下的标志
void menu1(void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af02      	add	r7, sp, #8


    while (1) {
    	OLED_NewFrame();
 8000f4e:	f000 f87b 	bl	8001048 <OLED_NewFrame>
    	   // 显示选项
    	        OLED_PrintString(40, 0, "选项", &font12x12, OLED_COLOR_NORMAL);
 8000f52:	2300      	movs	r3, #0
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	4b32      	ldr	r3, [pc, #200]	; (8001020 <menu1+0xd8>)
 8000f58:	4a32      	ldr	r2, [pc, #200]	; (8001024 <menu1+0xdc>)
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	2028      	movs	r0, #40	; 0x28
 8000f5e:	f000 fa98 	bl	8001492 <OLED_PrintString>
    	        OLED_PrintString(10, 16, "设置参数", &font12x12, OLED_COLOR_NORMAL);
 8000f62:	2300      	movs	r3, #0
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	4b2e      	ldr	r3, [pc, #184]	; (8001020 <menu1+0xd8>)
 8000f68:	4a2f      	ldr	r2, [pc, #188]	; (8001028 <menu1+0xe0>)
 8000f6a:	2110      	movs	r1, #16
 8000f6c:	200a      	movs	r0, #10
 8000f6e:	f000 fa90 	bl	8001492 <OLED_PrintString>
    	        OLED_PrintString(10, 28, "整定参数", &font12x12, OLED_COLOR_NORMAL);
 8000f72:	2300      	movs	r3, #0
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	4b2a      	ldr	r3, [pc, #168]	; (8001020 <menu1+0xd8>)
 8000f78:	4a2c      	ldr	r2, [pc, #176]	; (800102c <menu1+0xe4>)
 8000f7a:	211c      	movs	r1, #28
 8000f7c:	200a      	movs	r0, #10
 8000f7e:	f000 fa88 	bl	8001492 <OLED_PrintString>
    	        OLED_PrintString(10, 40, "其他参数", &font12x12, OLED_COLOR_NORMAL);
 8000f82:	2300      	movs	r3, #0
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	4b26      	ldr	r3, [pc, #152]	; (8001020 <menu1+0xd8>)
 8000f88:	4a29      	ldr	r2, [pc, #164]	; (8001030 <menu1+0xe8>)
 8000f8a:	2128      	movs	r1, #40	; 0x28
 8000f8c:	200a      	movs	r0, #10
 8000f8e:	f000 fa80 	bl	8001492 <OLED_PrintString>
    	        OLED_PrintString(10, 53, "语言", &font12x12, OLED_COLOR_NORMAL);
 8000f92:	2300      	movs	r3, #0
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	4b22      	ldr	r3, [pc, #136]	; (8001020 <menu1+0xd8>)
 8000f98:	4a26      	ldr	r2, [pc, #152]	; (8001034 <menu1+0xec>)
 8000f9a:	2135      	movs	r1, #53	; 0x35
 8000f9c:	200a      	movs	r0, #10
 8000f9e:	f000 fa78 	bl	8001492 <OLED_PrintString>

    	        // 显示星号
    	        OLED_PrintString(0, posY, "*", &font12x12, OLED_COLOR_NORMAL);
 8000fa2:	4b25      	ldr	r3, [pc, #148]	; (8001038 <menu1+0xf0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	b2d9      	uxtb	r1, r3
 8000fa8:	2300      	movs	r3, #0
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <menu1+0xd8>)
 8000fae:	4a23      	ldr	r2, [pc, #140]	; (800103c <menu1+0xf4>)
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f000 fa6e 	bl	8001492 <OLED_PrintString>

    	        OLED_ShowFrame();
 8000fb6:	f000 f853 	bl	8001060 <OLED_ShowFrame>

        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_RESET && !keyPressed) {
 8000fba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fbe:	4820      	ldr	r0, [pc, #128]	; (8001040 <menu1+0xf8>)
 8000fc0:	f000 ff7a 	bl	8001eb8 <HAL_GPIO_ReadPin>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d113      	bne.n	8000ff2 <menu1+0xaa>
 8000fca:	4b1e      	ldr	r3, [pc, #120]	; (8001044 <menu1+0xfc>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10f      	bne.n	8000ff2 <menu1+0xaa>
                    keyPressed = 1; // 设置按键按下的标志
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <menu1+0xfc>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]

                    // 按下后星号下移12像素
                    posY += 12;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <menu1+0xf0>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	330c      	adds	r3, #12
 8000fde:	4a16      	ldr	r2, [pc, #88]	; (8001038 <menu1+0xf0>)
 8000fe0:	6013      	str	r3, [r2, #0]
                    if (posY > 53) // 如果超出了界限，回到初始位置
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <menu1+0xf0>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b35      	cmp	r3, #53	; 0x35
 8000fe8:	dd0e      	ble.n	8001008 <menu1+0xc0>
                        posY = 16;
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <menu1+0xf0>)
 8000fec:	2210      	movs	r2, #16
 8000fee:	601a      	str	r2, [r3, #0]
                    if (posY > 53) // 如果超出了界限，回到初始位置
 8000ff0:	e00a      	b.n	8001008 <menu1+0xc0>
                }
                else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_SET) {
 8000ff2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ff6:	4812      	ldr	r0, [pc, #72]	; (8001040 <menu1+0xf8>)
 8000ff8:	f000 ff5e 	bl	8001eb8 <HAL_GPIO_ReadPin>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d102      	bne.n	8001008 <menu1+0xc0>
                    keyPressed = 0; // 按键释放时重置按键按下的标志
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <menu1+0xfc>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]

                }
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8001008:	2101      	movs	r1, #1
 800100a:	480d      	ldr	r0, [pc, #52]	; (8001040 <menu1+0xf8>)
 800100c:	f000 ff54 	bl	8001eb8 <HAL_GPIO_ReadPin>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d000      	beq.n	8001018 <menu1+0xd0>
    	OLED_NewFrame();
 8001016:	e79a      	b.n	8000f4e <menu1+0x6>
            break; // 满足条件时退出循环
 8001018:	bf00      	nop
        // 显示选项




}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	0800631c 	.word	0x0800631c
 8001024:	08005a40 	.word	0x08005a40
 8001028:	08005a48 	.word	0x08005a48
 800102c:	08005a58 	.word	0x08005a58
 8001030:	08005a68 	.word	0x08005a68
 8001034:	08005a78 	.word	0x08005a78
 8001038:	20000000 	.word	0x20000000
 800103c:	08005a80 	.word	0x08005a80
 8001040:	40010c00 	.word	0x40010c00
 8001044:	20000648 	.word	0x20000648

08001048 <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 800104c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001050:	2100      	movs	r1, #0
 8001052:	4802      	ldr	r0, [pc, #8]	; (800105c <OLED_NewFrame+0x14>)
 8001054:	f002 fd8d 	bl	8003b72 <memset>
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000248 	.word	0x20000248

08001060 <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <OLED_ShowFrame+0x5c>)
 8001068:	2240      	movs	r2, #64	; 0x40
 800106a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 800106c:	2300      	movs	r3, #0
 800106e:	71fb      	strb	r3, [r7, #7]
 8001070:	e01b      	b.n	80010aa <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	3b50      	subs	r3, #80	; 0x50
 8001076:	b2db      	uxtb	r3, r3
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff feb9 	bl	8000df0 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff feb6 	bl	8000df0 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8001084:	2010      	movs	r0, #16
 8001086:	f7ff feb3 	bl	8000df0 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 800108a:	480d      	ldr	r0, [pc, #52]	; (80010c0 <OLED_ShowFrame+0x60>)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	01db      	lsls	r3, r3, #7
 8001090:	4a0c      	ldr	r2, [pc, #48]	; (80010c4 <OLED_ShowFrame+0x64>)
 8001092:	4413      	add	r3, r2
 8001094:	2280      	movs	r2, #128	; 0x80
 8001096:	4619      	mov	r1, r3
 8001098:	f002 fdf9 	bl	8003c8e <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 800109c:	2181      	movs	r1, #129	; 0x81
 800109e:	4807      	ldr	r0, [pc, #28]	; (80010bc <OLED_ShowFrame+0x5c>)
 80010a0:	f7ff fe90 	bl	8000dc4 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	3301      	adds	r3, #1
 80010a8:	71fb      	strb	r3, [r7, #7]
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b07      	cmp	r3, #7
 80010ae:	d9e0      	bls.n	8001072 <OLED_ShowFrame+0x12>
  }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000650 	.word	0x20000650
 80010c0:	20000651 	.word	0x20000651
 80010c4:	20000248 	.word	0x20000248

080010c8 <OLED_SetByte_Fine>:
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color)
{
 80010c8:	b490      	push	{r4, r7}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4604      	mov	r4, r0
 80010d0:	4608      	mov	r0, r1
 80010d2:	4611      	mov	r1, r2
 80010d4:	461a      	mov	r2, r3
 80010d6:	4623      	mov	r3, r4
 80010d8:	71fb      	strb	r3, [r7, #7]
 80010da:	4603      	mov	r3, r0
 80010dc:	71bb      	strb	r3, [r7, #6]
 80010de:	460b      	mov	r3, r1
 80010e0:	717b      	strb	r3, [r7, #5]
 80010e2:	4613      	mov	r3, r2
 80010e4:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	2b07      	cmp	r3, #7
 80010ea:	d860      	bhi.n	80011ae <OLED_SetByte_Fine+0xe6>
 80010ec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	db5c      	blt.n	80011ae <OLED_SetByte_Fine+0xe6>
    return;
  if (color)
 80010f4:	7d3b      	ldrb	r3, [r7, #20]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d002      	beq.n	8001100 <OLED_SetByte_Fine+0x38>
    data = ~data;
 80010fa:	797b      	ldrb	r3, [r7, #5]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 8001100:	7c3b      	ldrb	r3, [r7, #16]
 8001102:	3301      	adds	r3, #1
 8001104:	22ff      	movs	r2, #255	; 0xff
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	b25a      	sxtb	r2, r3
 800110c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001110:	4313      	orrs	r3, r2
 8001112:	b25a      	sxtb	r2, r3
 8001114:	793b      	ldrb	r3, [r7, #4]
 8001116:	f1c3 0308 	rsb	r3, r3, #8
 800111a:	21ff      	movs	r1, #255	; 0xff
 800111c:	fa41 f303 	asr.w	r3, r1, r3
 8001120:	b25b      	sxtb	r3, r3
 8001122:	4313      	orrs	r3, r2
 8001124:	b25b      	sxtb	r3, r3
 8001126:	b2da      	uxtb	r2, r3
 8001128:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <OLED_SetByte_Fine+0xf0>)
 800112a:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 800112c:	79fa      	ldrb	r2, [r7, #7]
 800112e:	79bb      	ldrb	r3, [r7, #6]
 8001130:	4922      	ldr	r1, [pc, #136]	; (80011bc <OLED_SetByte_Fine+0xf4>)
 8001132:	01d2      	lsls	r2, r2, #7
 8001134:	440a      	add	r2, r1
 8001136:	4413      	add	r3, r2
 8001138:	7818      	ldrb	r0, [r3, #0]
 800113a:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <OLED_SetByte_Fine+0xf0>)
 800113c:	7819      	ldrb	r1, [r3, #0]
 800113e:	79fa      	ldrb	r2, [r7, #7]
 8001140:	79bb      	ldrb	r3, [r7, #6]
 8001142:	4001      	ands	r1, r0
 8001144:	b2c8      	uxtb	r0, r1
 8001146:	491d      	ldr	r1, [pc, #116]	; (80011bc <OLED_SetByte_Fine+0xf4>)
 8001148:	01d2      	lsls	r2, r2, #7
 800114a:	440a      	add	r2, r1
 800114c:	4413      	add	r3, r2
 800114e:	4602      	mov	r2, r0
 8001150:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 8001152:	7c3b      	ldrb	r3, [r7, #16]
 8001154:	3301      	adds	r3, #1
 8001156:	22ff      	movs	r2, #255	; 0xff
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	b25b      	sxtb	r3, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	b25a      	sxtb	r2, r3
 8001162:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001166:	4013      	ands	r3, r2
 8001168:	b25a      	sxtb	r2, r3
 800116a:	793b      	ldrb	r3, [r7, #4]
 800116c:	f1c3 0308 	rsb	r3, r3, #8
 8001170:	21ff      	movs	r1, #255	; 0xff
 8001172:	fa41 f303 	asr.w	r3, r1, r3
 8001176:	b25b      	sxtb	r3, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	b25b      	sxtb	r3, r3
 800117c:	4013      	ands	r3, r2
 800117e:	b25b      	sxtb	r3, r3
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <OLED_SetByte_Fine+0xf0>)
 8001184:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 8001186:	79fa      	ldrb	r2, [r7, #7]
 8001188:	79bb      	ldrb	r3, [r7, #6]
 800118a:	490c      	ldr	r1, [pc, #48]	; (80011bc <OLED_SetByte_Fine+0xf4>)
 800118c:	01d2      	lsls	r2, r2, #7
 800118e:	440a      	add	r2, r1
 8001190:	4413      	add	r3, r2
 8001192:	7818      	ldrb	r0, [r3, #0]
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <OLED_SetByte_Fine+0xf0>)
 8001196:	7819      	ldrb	r1, [r3, #0]
 8001198:	79fa      	ldrb	r2, [r7, #7]
 800119a:	79bb      	ldrb	r3, [r7, #6]
 800119c:	4301      	orrs	r1, r0
 800119e:	b2c8      	uxtb	r0, r1
 80011a0:	4906      	ldr	r1, [pc, #24]	; (80011bc <OLED_SetByte_Fine+0xf4>)
 80011a2:	01d2      	lsls	r2, r2, #7
 80011a4:	440a      	add	r2, r1
 80011a6:	4413      	add	r3, r2
 80011a8:	4602      	mov	r2, r0
 80011aa:	701a      	strb	r2, [r3, #0]
 80011ac:	e000      	b.n	80011b0 <OLED_SetByte_Fine+0xe8>
    return;
 80011ae:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc90      	pop	{r4, r7}
 80011b6:	4770      	bx	lr
 80011b8:	200006d1 	.word	0x200006d1
 80011bc:	20000248 	.word	0x20000248

080011c0 <OLED_SetBits_Fine>:
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color)
{
 80011c0:	b5b0      	push	{r4, r5, r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af02      	add	r7, sp, #8
 80011c6:	4604      	mov	r4, r0
 80011c8:	4608      	mov	r0, r1
 80011ca:	4611      	mov	r1, r2
 80011cc:	461a      	mov	r2, r3
 80011ce:	4623      	mov	r3, r4
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	4603      	mov	r3, r0
 80011d4:	71bb      	strb	r3, [r7, #6]
 80011d6:	460b      	mov	r3, r1
 80011d8:	717b      	strb	r3, [r7, #5]
 80011da:	4613      	mov	r3, r2
 80011dc:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 80011de:	79bb      	ldrb	r3, [r7, #6]
 80011e0:	08db      	lsrs	r3, r3, #3
 80011e2:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 80011e4:	79bb      	ldrb	r3, [r7, #6]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 80011ec:	7bba      	ldrb	r2, [r7, #14]
 80011ee:	793b      	ldrb	r3, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	2b08      	cmp	r3, #8
 80011f4:	dd29      	ble.n	800124a <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 80011f6:	797a      	ldrb	r2, [r7, #5]
 80011f8:	7bbb      	ldrb	r3, [r7, #14]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	7bbc      	ldrb	r4, [r7, #14]
 8001202:	79f9      	ldrb	r1, [r7, #7]
 8001204:	7bf8      	ldrb	r0, [r7, #15]
 8001206:	f897 3020 	ldrb.w	r3, [r7, #32]
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	2307      	movs	r3, #7
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	4623      	mov	r3, r4
 8001212:	f7ff ff59 	bl	80010c8 <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	3301      	adds	r3, #1
 800121a:	b2d8      	uxtb	r0, r3
 800121c:	797a      	ldrb	r2, [r7, #5]
 800121e:	7bbb      	ldrb	r3, [r7, #14]
 8001220:	f1c3 0308 	rsb	r3, r3, #8
 8001224:	fa42 f303 	asr.w	r3, r2, r3
 8001228:	b2dc      	uxtb	r4, r3
 800122a:	793a      	ldrb	r2, [r7, #4]
 800122c:	7bbb      	ldrb	r3, [r7, #14]
 800122e:	4413      	add	r3, r2
 8001230:	b2db      	uxtb	r3, r3
 8001232:	3b09      	subs	r3, #9
 8001234:	b2db      	uxtb	r3, r3
 8001236:	79f9      	ldrb	r1, [r7, #7]
 8001238:	f897 2020 	ldrb.w	r2, [r7, #32]
 800123c:	9201      	str	r2, [sp, #4]
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2300      	movs	r3, #0
 8001242:	4622      	mov	r2, r4
 8001244:	f7ff ff40 	bl	80010c8 <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 8001248:	e015      	b.n	8001276 <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 800124a:	797a      	ldrb	r2, [r7, #5]
 800124c:	7bbb      	ldrb	r3, [r7, #14]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	b2dc      	uxtb	r4, r3
 8001254:	7bba      	ldrb	r2, [r7, #14]
 8001256:	793b      	ldrb	r3, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	b2db      	uxtb	r3, r3
 800125c:	3b01      	subs	r3, #1
 800125e:	b2db      	uxtb	r3, r3
 8001260:	7bbd      	ldrb	r5, [r7, #14]
 8001262:	79f9      	ldrb	r1, [r7, #7]
 8001264:	7bf8      	ldrb	r0, [r7, #15]
 8001266:	f897 2020 	ldrb.w	r2, [r7, #32]
 800126a:	9201      	str	r2, [sp, #4]
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	462b      	mov	r3, r5
 8001270:	4622      	mov	r2, r4
 8001272:	f7ff ff29 	bl	80010c8 <OLED_SetByte_Fine>
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bdb0      	pop	{r4, r5, r7, pc}

0800127e <OLED_SetBits>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color)
{
 800127e:	b590      	push	{r4, r7, lr}
 8001280:	b087      	sub	sp, #28
 8001282:	af02      	add	r7, sp, #8
 8001284:	4604      	mov	r4, r0
 8001286:	4608      	mov	r0, r1
 8001288:	4611      	mov	r1, r2
 800128a:	461a      	mov	r2, r3
 800128c:	4623      	mov	r3, r4
 800128e:	71fb      	strb	r3, [r7, #7]
 8001290:	4603      	mov	r3, r0
 8001292:	71bb      	strb	r3, [r7, #6]
 8001294:	460b      	mov	r3, r1
 8001296:	717b      	strb	r3, [r7, #5]
 8001298:	4613      	mov	r3, r2
 800129a:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 800129c:	79bb      	ldrb	r3, [r7, #6]
 800129e:	08db      	lsrs	r3, r3, #3
 80012a0:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 80012a2:	79bb      	ldrb	r3, [r7, #6]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 80012aa:	797a      	ldrb	r2, [r7, #5]
 80012ac:	7bbb      	ldrb	r3, [r7, #14]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	7bbc      	ldrb	r4, [r7, #14]
 80012b6:	79f9      	ldrb	r1, [r7, #7]
 80012b8:	7bf8      	ldrb	r0, [r7, #15]
 80012ba:	793b      	ldrb	r3, [r7, #4]
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	2307      	movs	r3, #7
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	4623      	mov	r3, r4
 80012c4:	f7ff ff00 	bl	80010c8 <OLED_SetByte_Fine>
  if (bit)
 80012c8:	7bbb      	ldrb	r3, [r7, #14]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d014      	beq.n	80012f8 <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	3301      	adds	r3, #1
 80012d2:	b2d8      	uxtb	r0, r3
 80012d4:	797a      	ldrb	r2, [r7, #5]
 80012d6:	7bbb      	ldrb	r3, [r7, #14]
 80012d8:	f1c3 0308 	rsb	r3, r3, #8
 80012dc:	fa42 f303 	asr.w	r3, r2, r3
 80012e0:	b2dc      	uxtb	r4, r3
 80012e2:	7bbb      	ldrb	r3, [r7, #14]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	79f9      	ldrb	r1, [r7, #7]
 80012ea:	793a      	ldrb	r2, [r7, #4]
 80012ec:	9201      	str	r2, [sp, #4]
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2300      	movs	r3, #0
 80012f2:	4622      	mov	r2, r4
 80012f4:	f7ff fee8 	bl	80010c8 <OLED_SetByte_Fine>
  }
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd90      	pop	{r4, r7, pc}

08001300 <OLED_SetBlock>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color)
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b087      	sub	sp, #28
 8001304:	af02      	add	r7, sp, #8
 8001306:	603a      	str	r2, [r7, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
 800130e:	460b      	mov	r3, r1
 8001310:	71bb      	strb	r3, [r7, #6]
 8001312:	4613      	mov	r3, r2
 8001314:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 8001316:	f897 3020 	ldrb.w	r3, [r7, #32]
 800131a:	08db      	lsrs	r3, r3, #3
 800131c:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 800131e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 8001328:	2300      	movs	r3, #0
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	e025      	b.n	800137a <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 800132e:	2300      	movs	r3, #0
 8001330:	73bb      	strb	r3, [r7, #14]
 8001332:	e01b      	b.n	800136c <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8001334:	79fa      	ldrb	r2, [r7, #7]
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	4413      	add	r3, r2
 800133a:	b2d8      	uxtb	r0, r3
 800133c:	7bbb      	ldrb	r3, [r7, #14]
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	b2da      	uxtb	r2, r3
 8001342:	79bb      	ldrb	r3, [r7, #6]
 8001344:	4413      	add	r3, r2
 8001346:	b2dc      	uxtb	r4, r3
 8001348:	7bfa      	ldrb	r2, [r7, #15]
 800134a:	7bbb      	ldrb	r3, [r7, #14]
 800134c:	7979      	ldrb	r1, [r7, #5]
 800134e:	fb01 f303 	mul.w	r3, r1, r3
 8001352:	4413      	add	r3, r2
 8001354:	461a      	mov	r2, r3
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	4413      	add	r3, r2
 800135a:	781a      	ldrb	r2, [r3, #0]
 800135c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001360:	4621      	mov	r1, r4
 8001362:	f7ff ff8c 	bl	800127e <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 8001366:	7bbb      	ldrb	r3, [r7, #14]
 8001368:	3301      	adds	r3, #1
 800136a:	73bb      	strb	r3, [r7, #14]
 800136c:	7bba      	ldrb	r2, [r7, #14]
 800136e:	7b3b      	ldrb	r3, [r7, #12]
 8001370:	429a      	cmp	r2, r3
 8001372:	d3df      	bcc.n	8001334 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	3301      	adds	r3, #1
 8001378:	73fb      	strb	r3, [r7, #15]
 800137a:	7bfa      	ldrb	r2, [r7, #15]
 800137c:	797b      	ldrb	r3, [r7, #5]
 800137e:	429a      	cmp	r2, r3
 8001380:	d3d5      	bcc.n	800132e <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 8001382:	7afb      	ldrb	r3, [r7, #11]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d028      	beq.n	80013da <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 8001388:	797b      	ldrb	r3, [r7, #5]
 800138a:	b29b      	uxth	r3, r3
 800138c:	7b3a      	ldrb	r2, [r7, #12]
 800138e:	b292      	uxth	r2, r2
 8001390:	fb02 f303 	mul.w	r3, r2, r3
 8001394:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 8001396:	2300      	movs	r3, #0
 8001398:	737b      	strb	r3, [r7, #13]
 800139a:	e01a      	b.n	80013d2 <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 800139c:	79fa      	ldrb	r2, [r7, #7]
 800139e:	7b7b      	ldrb	r3, [r7, #13]
 80013a0:	4413      	add	r3, r2
 80013a2:	b2d8      	uxtb	r0, r3
 80013a4:	7b3b      	ldrb	r3, [r7, #12]
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	4413      	add	r3, r2
 80013ae:	b2d9      	uxtb	r1, r3
 80013b0:	893a      	ldrh	r2, [r7, #8]
 80013b2:	7b7b      	ldrb	r3, [r7, #13]
 80013b4:	4413      	add	r3, r2
 80013b6:	461a      	mov	r2, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	781a      	ldrb	r2, [r3, #0]
 80013be:	7afc      	ldrb	r4, [r7, #11]
 80013c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	4623      	mov	r3, r4
 80013c8:	f7ff fefa 	bl	80011c0 <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 80013cc:	7b7b      	ldrb	r3, [r7, #13]
 80013ce:	3301      	adds	r3, #1
 80013d0:	737b      	strb	r3, [r7, #13]
 80013d2:	7b7a      	ldrb	r2, [r7, #13]
 80013d4:	797b      	ldrb	r3, [r7, #5]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d3e0      	bcc.n	800139c <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd90      	pop	{r4, r7, pc}

080013e2 <OLED_PrintASCIIChar>:
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color)
{
 80013e2:	b5b0      	push	{r4, r5, r7, lr}
 80013e4:	b084      	sub	sp, #16
 80013e6:	af02      	add	r7, sp, #8
 80013e8:	603b      	str	r3, [r7, #0]
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
 80013ee:	460b      	mov	r3, r1
 80013f0:	71bb      	strb	r3, [r7, #6]
 80013f2:	4613      	mov	r3, r2
 80013f4:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	797b      	ldrb	r3, [r7, #5]
 80013fc:	f1a3 0120 	sub.w	r1, r3, #32
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	3307      	adds	r3, #7
 8001406:	2b00      	cmp	r3, #0
 8001408:	da00      	bge.n	800140c <OLED_PrintASCIIChar+0x2a>
 800140a:	3307      	adds	r3, #7
 800140c:	10db      	asrs	r3, r3, #3
 800140e:	4618      	mov	r0, r3
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	785b      	ldrb	r3, [r3, #1]
 8001414:	fb00 f303 	mul.w	r3, r0, r3
 8001418:	fb01 f303 	mul.w	r3, r1, r3
 800141c:	18d4      	adds	r4, r2, r3
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	785d      	ldrb	r5, [r3, #1]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	79b9      	ldrb	r1, [r7, #6]
 8001428:	79f8      	ldrb	r0, [r7, #7]
 800142a:	7e3a      	ldrb	r2, [r7, #24]
 800142c:	9201      	str	r2, [sp, #4]
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	462b      	mov	r3, r5
 8001432:	4622      	mov	r2, r4
 8001434:	f7ff ff64 	bl	8001300 <OLED_SetBlock>
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bdb0      	pop	{r4, r5, r7, pc}

08001440 <_OLED_GetUTF8Len>:

/**
 * @brief 获取UTF-8编码的字符长度
 */
uint8_t _OLED_GetUTF8Len(char *string)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if ((string[0] & 0x80) == 0x00)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b25b      	sxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	db01      	blt.n	8001456 <_OLED_GetUTF8Len+0x16>
  {
    return 1;
 8001452:	2301      	movs	r3, #1
 8001454:	e018      	b.n	8001488 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xE0) == 0xC0)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800145e:	2bc0      	cmp	r3, #192	; 0xc0
 8001460:	d101      	bne.n	8001466 <_OLED_GetUTF8Len+0x26>
  {
    return 2;
 8001462:	2302      	movs	r3, #2
 8001464:	e010      	b.n	8001488 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF0) == 0xE0)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800146e:	2be0      	cmp	r3, #224	; 0xe0
 8001470:	d101      	bne.n	8001476 <_OLED_GetUTF8Len+0x36>
  {
    return 3;
 8001472:	2303      	movs	r3, #3
 8001474:	e008      	b.n	8001488 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF8) == 0xF0)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800147e:	2bf0      	cmp	r3, #240	; 0xf0
 8001480:	d101      	bne.n	8001486 <_OLED_GetUTF8Len+0x46>
  {
    return 4;
 8001482:	2304      	movs	r3, #4
 8001484:	e000      	b.n	8001488 <_OLED_GetUTF8Len+0x48>
  }
  return 0;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr

08001492 <OLED_PrintString>:
 * @note 为保证字符串中的中文会被自动识别并绘制, 需:
 * 1. 编译器字符集设置为UTF-8
 * 2. 使用波特律动LED取模工具生成字模(https://led.baud-dance.com)
 */
void OLED_PrintString(uint8_t x, uint8_t y, char *str, const Font *font, OLED_ColorMode color)
{
 8001492:	b5b0      	push	{r4, r5, r7, lr}
 8001494:	b08a      	sub	sp, #40	; 0x28
 8001496:	af02      	add	r7, sp, #8
 8001498:	60ba      	str	r2, [r7, #8]
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	4603      	mov	r3, r0
 800149e:	73fb      	strb	r3, [r7, #15]
 80014a0:	460b      	mov	r3, r1
 80014a2:	73bb      	strb	r3, [r7, #14]
  uint16_t i = 0;                                       // 字符串索引
 80014a4:	2300      	movs	r3, #0
 80014a6:	83fb      	strh	r3, [r7, #30]
  uint8_t oneLen = (((font->h + 7) / 8) * font->w) + 4; // 一个字模占多少字节
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	3307      	adds	r3, #7
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	da00      	bge.n	80014b4 <OLED_PrintString+0x22>
 80014b2:	3307      	adds	r3, #7
 80014b4:	10db      	asrs	r3, r3, #3
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	7852      	ldrb	r2, [r2, #1]
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	3304      	adds	r3, #4
 80014c4:	76fb      	strb	r3, [r7, #27]
  uint8_t found;                                        // 是否找到字模
  uint8_t utf8Len;                                      // UTF-8编码长度
  uint8_t *head;                                        // 字模头指针
  while (str[i])
 80014c6:	e07d      	b.n	80015c4 <OLED_PrintString+0x132>
  {
    found = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	777b      	strb	r3, [r7, #29]
    utf8Len = _OLED_GetUTF8Len(str + i);
 80014cc:	8bfb      	ldrh	r3, [r7, #30]
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	4413      	add	r3, r2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ffb4 	bl	8001440 <_OLED_GetUTF8Len>
 80014d8:	4603      	mov	r3, r0
 80014da:	76bb      	strb	r3, [r7, #26]
    if (utf8Len == 0)
 80014dc:	7ebb      	ldrb	r3, [r7, #26]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d078      	beq.n	80015d4 <OLED_PrintString+0x142>
      break; // 有问题的UTF-8编码

    // 寻找字符  TODO 优化查找算法, 二分查找或者hash
    for (uint8_t j = 0; j < font->len; j++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	773b      	strb	r3, [r7, #28]
 80014e6:	e032      	b.n	800154e <OLED_PrintString+0xbc>
    {
      head = (uint8_t *)(font->chars) + (j * oneLen);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	7f3a      	ldrb	r2, [r7, #28]
 80014ee:	7ef9      	ldrb	r1, [r7, #27]
 80014f0:	fb01 f202 	mul.w	r2, r1, r2
 80014f4:	4413      	add	r3, r2
 80014f6:	617b      	str	r3, [r7, #20]
      if (memcmp(str + i, head, utf8Len) == 0)
 80014f8:	8bfb      	ldrh	r3, [r7, #30]
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	4413      	add	r3, r2
 80014fe:	7eba      	ldrb	r2, [r7, #26]
 8001500:	6979      	ldr	r1, [r7, #20]
 8001502:	4618      	mov	r0, r3
 8001504:	f002 fb25 	bl	8003b52 <memcmp>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d11c      	bne.n	8001548 <OLED_PrintString+0xb6>
      {
        OLED_SetBlock(x, y, head + 4, font->w, font->h, color);
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	1d1c      	adds	r4, r3, #4
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	785d      	ldrb	r5, [r3, #1]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	7bb9      	ldrb	r1, [r7, #14]
 800151c:	7bf8      	ldrb	r0, [r7, #15]
 800151e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001522:	9201      	str	r2, [sp, #4]
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	462b      	mov	r3, r5
 8001528:	4622      	mov	r2, r4
 800152a:	f7ff fee9 	bl	8001300 <OLED_SetBlock>
        // 移动光标
        x += font->w;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	785a      	ldrb	r2, [r3, #1]
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	4413      	add	r3, r2
 8001536:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8001538:	7ebb      	ldrb	r3, [r7, #26]
 800153a:	b29a      	uxth	r2, r3
 800153c:	8bfb      	ldrh	r3, [r7, #30]
 800153e:	4413      	add	r3, r2
 8001540:	83fb      	strh	r3, [r7, #30]
        found = 1;
 8001542:	2301      	movs	r3, #1
 8001544:	777b      	strb	r3, [r7, #29]
        break;
 8001546:	e007      	b.n	8001558 <OLED_PrintString+0xc6>
    for (uint8_t j = 0; j < font->len; j++)
 8001548:	7f3b      	ldrb	r3, [r7, #28]
 800154a:	3301      	adds	r3, #1
 800154c:	773b      	strb	r3, [r7, #28]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7a1b      	ldrb	r3, [r3, #8]
 8001552:	7f3a      	ldrb	r2, [r7, #28]
 8001554:	429a      	cmp	r2, r3
 8001556:	d3c7      	bcc.n	80014e8 <OLED_PrintString+0x56>
      }
    }

    // 若未找到字模,且为ASCII字符, 则缺省显示ASCII字符
    if (found == 0)
 8001558:	7f7b      	ldrb	r3, [r7, #29]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d132      	bne.n	80015c4 <OLED_PrintString+0x132>
    {
      if (utf8Len == 1)
 800155e:	7ebb      	ldrb	r3, [r7, #26]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d119      	bne.n	8001598 <OLED_PrintString+0x106>
      {
        OLED_PrintASCIIChar(x, y, str[i], font->ascii, color);
 8001564:	8bfb      	ldrh	r3, [r7, #30]
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	4413      	add	r3, r2
 800156a:	781a      	ldrb	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68dc      	ldr	r4, [r3, #12]
 8001570:	7bb9      	ldrb	r1, [r7, #14]
 8001572:	7bf8      	ldrb	r0, [r7, #15]
 8001574:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	4623      	mov	r3, r4
 800157c:	f7ff ff31 	bl	80013e2 <OLED_PrintASCIIChar>
        // 移动光标
        x += font->ascii->w;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	785a      	ldrb	r2, [r3, #1]
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	4413      	add	r3, r2
 800158a:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 800158c:	7ebb      	ldrb	r3, [r7, #26]
 800158e:	b29a      	uxth	r2, r3
 8001590:	8bfb      	ldrh	r3, [r7, #30]
 8001592:	4413      	add	r3, r2
 8001594:	83fb      	strh	r3, [r7, #30]
 8001596:	e015      	b.n	80015c4 <OLED_PrintString+0x132>
      }
      else
      {
        OLED_PrintASCIIChar(x, y, ' ', font->ascii, color);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	7bb9      	ldrb	r1, [r7, #14]
 800159e:	7bf8      	ldrb	r0, [r7, #15]
 80015a0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	4613      	mov	r3, r2
 80015a8:	2220      	movs	r2, #32
 80015aa:	f7ff ff1a 	bl	80013e2 <OLED_PrintASCIIChar>
        x += font->ascii->w;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	785a      	ldrb	r2, [r3, #1]
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	4413      	add	r3, r2
 80015b8:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 80015ba:	7ebb      	ldrb	r3, [r7, #26]
 80015bc:	b29a      	uxth	r2, r3
 80015be:	8bfb      	ldrh	r3, [r7, #30]
 80015c0:	4413      	add	r3, r2
 80015c2:	83fb      	strh	r3, [r7, #30]
  while (str[i])
 80015c4:	8bfb      	ldrh	r3, [r7, #30]
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	4413      	add	r3, r2
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f47f af7b 	bne.w	80014c8 <OLED_PrintString+0x36>
      }
    }
  }
}
 80015d2:	e000      	b.n	80015d6 <OLED_PrintString+0x144>
      break; // 有问题的UTF-8编码
 80015d4:	bf00      	nop
}
 80015d6:	bf00      	nop
 80015d8:	3720      	adds	r7, #32
 80015da:	46bd      	mov	sp, r7
 80015dc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080015e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_MspInit+0x5c>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	4a14      	ldr	r2, [pc, #80]	; (800163c <HAL_MspInit+0x5c>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6193      	str	r3, [r2, #24]
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_MspInit+0x5c>)
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <HAL_MspInit+0x5c>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	4a0e      	ldr	r2, [pc, #56]	; (800163c <HAL_MspInit+0x5c>)
 8001604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001608:	61d3      	str	r3, [r2, #28]
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <HAL_MspInit+0x5c>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001616:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_MspInit+0x60>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	4a04      	ldr	r2, [pc, #16]	; (8001640 <HAL_MspInit+0x60>)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	40021000 	.word	0x40021000
 8001640:	40010000 	.word	0x40010000

08001644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001648:	e7fe      	b.n	8001648 <NMI_Handler+0x4>

0800164a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164e:	e7fe      	b.n	800164e <HardFault_Handler+0x4>

08001650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <MemManage_Handler+0x4>

08001656 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <BusFault_Handler+0x4>

0800165c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <UsageFault_Handler+0x4>

08001662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr

0800166e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr

0800167a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr

08001686 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800168a:	f000 f943 	bl	8001914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}

08001692 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001696:	2008      	movs	r0, #8
 8001698:	f000 fc3e 	bl	8001f18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}

080016a0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80016a4:	2010      	movs	r0, #16
 80016a6:	f000 fc37 	bl	8001f18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}

080016ae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  return 1;
 80016b2:	2301      	movs	r3, #1
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr

080016bc <_kill>:

int _kill(int pid, int sig)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016c6:	f002 faa7 	bl	8003c18 <__errno>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2216      	movs	r2, #22
 80016ce:	601a      	str	r2, [r3, #0]
  return -1;
 80016d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <_exit>:

void _exit (int status)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016e4:	f04f 31ff 	mov.w	r1, #4294967295
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff ffe7 	bl	80016bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80016ee:	e7fe      	b.n	80016ee <_exit+0x12>

080016f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	e00a      	b.n	8001718 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001702:	f3af 8000 	nop.w
 8001706:	4601      	mov	r1, r0
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	60ba      	str	r2, [r7, #8]
 800170e:	b2ca      	uxtb	r2, r1
 8001710:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	3301      	adds	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	429a      	cmp	r2, r3
 800171e:	dbf0      	blt.n	8001702 <_read+0x12>
  }

  return len;
 8001720:	687b      	ldr	r3, [r7, #4]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	60f8      	str	r0, [r7, #12]
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	e009      	b.n	8001750 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	60ba      	str	r2, [r7, #8]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	3301      	adds	r3, #1
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	429a      	cmp	r2, r3
 8001756:	dbf1      	blt.n	800173c <_write+0x12>
  }
  return len;
 8001758:	687b      	ldr	r3, [r7, #4]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <_close>:

int _close(int file)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001788:	605a      	str	r2, [r3, #4]
  return 0;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr

08001796 <_isatty>:

int _isatty(int file)
{
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800179e:	2301      	movs	r3, #1
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr

080017aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b085      	sub	sp, #20
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	60f8      	str	r0, [r7, #12]
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr
	...

080017c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017cc:	4a14      	ldr	r2, [pc, #80]	; (8001820 <_sbrk+0x5c>)
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <_sbrk+0x60>)
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d8:	4b13      	ldr	r3, [pc, #76]	; (8001828 <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <_sbrk+0x64>)
 80017e2:	4a12      	ldr	r2, [pc, #72]	; (800182c <_sbrk+0x68>)
 80017e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d207      	bcs.n	8001804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f4:	f002 fa10 	bl	8003c18 <__errno>
 80017f8:	4603      	mov	r3, r0
 80017fa:	220c      	movs	r2, #12
 80017fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001802:	e009      	b.n	8001818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <_sbrk+0x64>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <_sbrk+0x64>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	4a05      	ldr	r2, [pc, #20]	; (8001828 <_sbrk+0x64>)
 8001814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001816:	68fb      	ldr	r3, [r7, #12]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20005000 	.word	0x20005000
 8001824:	00000400 	.word	0x00000400
 8001828:	200006d4 	.word	0x200006d4
 800182c:	20000828 	.word	0x20000828

08001830 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800183c:	f7ff fff8 	bl	8001830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001840:	480b      	ldr	r0, [pc, #44]	; (8001870 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001842:	490c      	ldr	r1, [pc, #48]	; (8001874 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001844:	4a0c      	ldr	r2, [pc, #48]	; (8001878 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001848:	e002      	b.n	8001850 <LoopCopyDataInit>

0800184a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800184c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184e:	3304      	adds	r3, #4

08001850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001854:	d3f9      	bcc.n	800184a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001856:	4a09      	ldr	r2, [pc, #36]	; (800187c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001858:	4c09      	ldr	r4, [pc, #36]	; (8001880 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800185c:	e001      	b.n	8001862 <LoopFillZerobss>

0800185e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001860:	3204      	adds	r2, #4

08001862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001864:	d3fb      	bcc.n	800185e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001866:	f002 f9dd 	bl	8003c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800186a:	f7ff fa13 	bl	8000c94 <main>
  bx lr
 800186e:	4770      	bx	lr
  ldr r0, =_sdata
 8001870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001874:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001878:	080066cc 	.word	0x080066cc
  ldr r2, =_sbss
 800187c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001880:	20000828 	.word	0x20000828

08001884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001884:	e7fe      	b.n	8001884 <ADC1_2_IRQHandler>
	...

08001888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <HAL_Init+0x28>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a07      	ldr	r2, [pc, #28]	; (80018b0 <HAL_Init+0x28>)
 8001892:	f043 0310 	orr.w	r3, r3, #16
 8001896:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001898:	2003      	movs	r0, #3
 800189a:	f000 f947 	bl	8001b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800189e:	200f      	movs	r0, #15
 80018a0:	f000 f808 	bl	80018b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a4:	f7ff fe9c 	bl	80015e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40022000 	.word	0x40022000

080018b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_InitTick+0x54>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <HAL_InitTick+0x58>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	4619      	mov	r1, r3
 80018c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 f95f 	bl	8001b96 <HAL_SYSTICK_Config>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e00e      	b.n	8001900 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b0f      	cmp	r3, #15
 80018e6:	d80a      	bhi.n	80018fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e8:	2200      	movs	r2, #0
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295
 80018f0:	f000 f927 	bl	8001b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f4:	4a06      	ldr	r2, [pc, #24]	; (8001910 <HAL_InitTick+0x5c>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
 80018fc:	e000      	b.n	8001900 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000004 	.word	0x20000004
 800190c:	2000000c 	.word	0x2000000c
 8001910:	20000008 	.word	0x20000008

08001914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_IncTick+0x1c>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	4b05      	ldr	r3, [pc, #20]	; (8001934 <HAL_IncTick+0x20>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4413      	add	r3, r2
 8001924:	4a03      	ldr	r2, [pc, #12]	; (8001934 <HAL_IncTick+0x20>)
 8001926:	6013      	str	r3, [r2, #0]
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	2000000c 	.word	0x2000000c
 8001934:	200006d8 	.word	0x200006d8

08001938 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return uwTick;
 800193c:	4b02      	ldr	r3, [pc, #8]	; (8001948 <HAL_GetTick+0x10>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	200006d8 	.word	0x200006d8

0800194c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001954:	f7ff fff0 	bl	8001938 <HAL_GetTick>
 8001958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001964:	d005      	beq.n	8001972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <HAL_Delay+0x44>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4413      	add	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001972:	bf00      	nop
 8001974:	f7ff ffe0 	bl	8001938 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	429a      	cmp	r2, r3
 8001982:	d8f7      	bhi.n	8001974 <HAL_Delay+0x28>
  {
  }
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	2000000c 	.word	0x2000000c

08001994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <__NVIC_SetPriorityGrouping+0x44>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b0:	4013      	ands	r3, r2
 80019b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c6:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <__NVIC_SetPriorityGrouping+0x44>)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	60d3      	str	r3, [r2, #12]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <__NVIC_GetPriorityGrouping+0x18>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	0a1b      	lsrs	r3, r3, #8
 80019e6:	f003 0307 	and.w	r3, r3, #7
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	db0b      	blt.n	8001a22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	f003 021f 	and.w	r2, r3, #31
 8001a10:	4906      	ldr	r1, [pc, #24]	; (8001a2c <__NVIC_EnableIRQ+0x34>)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	095b      	lsrs	r3, r3, #5
 8001a18:	2001      	movs	r0, #1
 8001a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	e000e100 	.word	0xe000e100

08001a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	6039      	str	r1, [r7, #0]
 8001a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	db0a      	blt.n	8001a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	490c      	ldr	r1, [pc, #48]	; (8001a7c <__NVIC_SetPriority+0x4c>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	0112      	lsls	r2, r2, #4
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	440b      	add	r3, r1
 8001a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a58:	e00a      	b.n	8001a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4908      	ldr	r1, [pc, #32]	; (8001a80 <__NVIC_SetPriority+0x50>)
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	3b04      	subs	r3, #4
 8001a68:	0112      	lsls	r2, r2, #4
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	761a      	strb	r2, [r3, #24]
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000e100 	.word	0xe000e100
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	; 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f1c3 0307 	rsb	r3, r3, #7
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	bf28      	it	cs
 8001aa2:	2304      	movcs	r3, #4
 8001aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	2b06      	cmp	r3, #6
 8001aac:	d902      	bls.n	8001ab4 <NVIC_EncodePriority+0x30>
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3b03      	subs	r3, #3
 8001ab2:	e000      	b.n	8001ab6 <NVIC_EncodePriority+0x32>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	43d9      	mvns	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	4313      	orrs	r3, r2
         );
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3724      	adds	r7, #36	; 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af8:	d301      	bcc.n	8001afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001afa:	2301      	movs	r3, #1
 8001afc:	e00f      	b.n	8001b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afe:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <SysTick_Config+0x40>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b06:	210f      	movs	r1, #15
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	f7ff ff90 	bl	8001a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <SysTick_Config+0x40>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <SysTick_Config+0x40>)
 8001b18:	2207      	movs	r2, #7
 8001b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	e000e010 	.word	0xe000e010

08001b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ff2d 	bl	8001994 <__NVIC_SetPriorityGrouping>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b54:	f7ff ff42 	bl	80019dc <__NVIC_GetPriorityGrouping>
 8001b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	6978      	ldr	r0, [r7, #20]
 8001b60:	f7ff ff90 	bl	8001a84 <NVIC_EncodePriority>
 8001b64:	4602      	mov	r2, r0
 8001b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff5f 	bl	8001a30 <__NVIC_SetPriority>
}
 8001b72:	bf00      	nop
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff35 	bl	80019f8 <__NVIC_EnableIRQ>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ffa2 	bl	8001ae8 <SysTick_Config>
 8001ba4:	4603      	mov	r3, r0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b08b      	sub	sp, #44	; 0x2c
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc2:	e169      	b.n	8001e98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	69fa      	ldr	r2, [r7, #28]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	f040 8158 	bne.w	8001e92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4a9a      	ldr	r2, [pc, #616]	; (8001e50 <HAL_GPIO_Init+0x2a0>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d05e      	beq.n	8001caa <HAL_GPIO_Init+0xfa>
 8001bec:	4a98      	ldr	r2, [pc, #608]	; (8001e50 <HAL_GPIO_Init+0x2a0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d875      	bhi.n	8001cde <HAL_GPIO_Init+0x12e>
 8001bf2:	4a98      	ldr	r2, [pc, #608]	; (8001e54 <HAL_GPIO_Init+0x2a4>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d058      	beq.n	8001caa <HAL_GPIO_Init+0xfa>
 8001bf8:	4a96      	ldr	r2, [pc, #600]	; (8001e54 <HAL_GPIO_Init+0x2a4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d86f      	bhi.n	8001cde <HAL_GPIO_Init+0x12e>
 8001bfe:	4a96      	ldr	r2, [pc, #600]	; (8001e58 <HAL_GPIO_Init+0x2a8>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d052      	beq.n	8001caa <HAL_GPIO_Init+0xfa>
 8001c04:	4a94      	ldr	r2, [pc, #592]	; (8001e58 <HAL_GPIO_Init+0x2a8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d869      	bhi.n	8001cde <HAL_GPIO_Init+0x12e>
 8001c0a:	4a94      	ldr	r2, [pc, #592]	; (8001e5c <HAL_GPIO_Init+0x2ac>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d04c      	beq.n	8001caa <HAL_GPIO_Init+0xfa>
 8001c10:	4a92      	ldr	r2, [pc, #584]	; (8001e5c <HAL_GPIO_Init+0x2ac>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d863      	bhi.n	8001cde <HAL_GPIO_Init+0x12e>
 8001c16:	4a92      	ldr	r2, [pc, #584]	; (8001e60 <HAL_GPIO_Init+0x2b0>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d046      	beq.n	8001caa <HAL_GPIO_Init+0xfa>
 8001c1c:	4a90      	ldr	r2, [pc, #576]	; (8001e60 <HAL_GPIO_Init+0x2b0>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d85d      	bhi.n	8001cde <HAL_GPIO_Init+0x12e>
 8001c22:	2b12      	cmp	r3, #18
 8001c24:	d82a      	bhi.n	8001c7c <HAL_GPIO_Init+0xcc>
 8001c26:	2b12      	cmp	r3, #18
 8001c28:	d859      	bhi.n	8001cde <HAL_GPIO_Init+0x12e>
 8001c2a:	a201      	add	r2, pc, #4	; (adr r2, 8001c30 <HAL_GPIO_Init+0x80>)
 8001c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c30:	08001cab 	.word	0x08001cab
 8001c34:	08001c85 	.word	0x08001c85
 8001c38:	08001c97 	.word	0x08001c97
 8001c3c:	08001cd9 	.word	0x08001cd9
 8001c40:	08001cdf 	.word	0x08001cdf
 8001c44:	08001cdf 	.word	0x08001cdf
 8001c48:	08001cdf 	.word	0x08001cdf
 8001c4c:	08001cdf 	.word	0x08001cdf
 8001c50:	08001cdf 	.word	0x08001cdf
 8001c54:	08001cdf 	.word	0x08001cdf
 8001c58:	08001cdf 	.word	0x08001cdf
 8001c5c:	08001cdf 	.word	0x08001cdf
 8001c60:	08001cdf 	.word	0x08001cdf
 8001c64:	08001cdf 	.word	0x08001cdf
 8001c68:	08001cdf 	.word	0x08001cdf
 8001c6c:	08001cdf 	.word	0x08001cdf
 8001c70:	08001cdf 	.word	0x08001cdf
 8001c74:	08001c8d 	.word	0x08001c8d
 8001c78:	08001ca1 	.word	0x08001ca1
 8001c7c:	4a79      	ldr	r2, [pc, #484]	; (8001e64 <HAL_GPIO_Init+0x2b4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d013      	beq.n	8001caa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c82:	e02c      	b.n	8001cde <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	623b      	str	r3, [r7, #32]
          break;
 8001c8a:	e029      	b.n	8001ce0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	3304      	adds	r3, #4
 8001c92:	623b      	str	r3, [r7, #32]
          break;
 8001c94:	e024      	b.n	8001ce0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	3308      	adds	r3, #8
 8001c9c:	623b      	str	r3, [r7, #32]
          break;
 8001c9e:	e01f      	b.n	8001ce0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	330c      	adds	r3, #12
 8001ca6:	623b      	str	r3, [r7, #32]
          break;
 8001ca8:	e01a      	b.n	8001ce0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d102      	bne.n	8001cb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	623b      	str	r3, [r7, #32]
          break;
 8001cb6:	e013      	b.n	8001ce0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d105      	bne.n	8001ccc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cc0:	2308      	movs	r3, #8
 8001cc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	611a      	str	r2, [r3, #16]
          break;
 8001cca:	e009      	b.n	8001ce0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ccc:	2308      	movs	r3, #8
 8001cce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69fa      	ldr	r2, [r7, #28]
 8001cd4:	615a      	str	r2, [r3, #20]
          break;
 8001cd6:	e003      	b.n	8001ce0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	623b      	str	r3, [r7, #32]
          break;
 8001cdc:	e000      	b.n	8001ce0 <HAL_GPIO_Init+0x130>
          break;
 8001cde:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	2bff      	cmp	r3, #255	; 0xff
 8001ce4:	d801      	bhi.n	8001cea <HAL_GPIO_Init+0x13a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	e001      	b.n	8001cee <HAL_GPIO_Init+0x13e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3304      	adds	r3, #4
 8001cee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	2bff      	cmp	r3, #255	; 0xff
 8001cf4:	d802      	bhi.n	8001cfc <HAL_GPIO_Init+0x14c>
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	e002      	b.n	8001d02 <HAL_GPIO_Init+0x152>
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	3b08      	subs	r3, #8
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	210f      	movs	r1, #15
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	401a      	ands	r2, r3
 8001d14:	6a39      	ldr	r1, [r7, #32]
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 80b1 	beq.w	8001e92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d30:	4b4d      	ldr	r3, [pc, #308]	; (8001e68 <HAL_GPIO_Init+0x2b8>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	4a4c      	ldr	r2, [pc, #304]	; (8001e68 <HAL_GPIO_Init+0x2b8>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	6193      	str	r3, [r2, #24]
 8001d3c:	4b4a      	ldr	r3, [pc, #296]	; (8001e68 <HAL_GPIO_Init+0x2b8>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d48:	4a48      	ldr	r2, [pc, #288]	; (8001e6c <HAL_GPIO_Init+0x2bc>)
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	089b      	lsrs	r3, r3, #2
 8001d4e:	3302      	adds	r3, #2
 8001d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	220f      	movs	r2, #15
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a40      	ldr	r2, [pc, #256]	; (8001e70 <HAL_GPIO_Init+0x2c0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d013      	beq.n	8001d9c <HAL_GPIO_Init+0x1ec>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a3f      	ldr	r2, [pc, #252]	; (8001e74 <HAL_GPIO_Init+0x2c4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d00d      	beq.n	8001d98 <HAL_GPIO_Init+0x1e8>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a3e      	ldr	r2, [pc, #248]	; (8001e78 <HAL_GPIO_Init+0x2c8>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d007      	beq.n	8001d94 <HAL_GPIO_Init+0x1e4>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a3d      	ldr	r2, [pc, #244]	; (8001e7c <HAL_GPIO_Init+0x2cc>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d101      	bne.n	8001d90 <HAL_GPIO_Init+0x1e0>
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e006      	b.n	8001d9e <HAL_GPIO_Init+0x1ee>
 8001d90:	2304      	movs	r3, #4
 8001d92:	e004      	b.n	8001d9e <HAL_GPIO_Init+0x1ee>
 8001d94:	2302      	movs	r3, #2
 8001d96:	e002      	b.n	8001d9e <HAL_GPIO_Init+0x1ee>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <HAL_GPIO_Init+0x1ee>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da0:	f002 0203 	and.w	r2, r2, #3
 8001da4:	0092      	lsls	r2, r2, #2
 8001da6:	4093      	lsls	r3, r2
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dae:	492f      	ldr	r1, [pc, #188]	; (8001e6c <HAL_GPIO_Init+0x2bc>)
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	089b      	lsrs	r3, r3, #2
 8001db4:	3302      	adds	r3, #2
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d006      	beq.n	8001dd6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dc8:	4b2d      	ldr	r3, [pc, #180]	; (8001e80 <HAL_GPIO_Init+0x2d0>)
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	492c      	ldr	r1, [pc, #176]	; (8001e80 <HAL_GPIO_Init+0x2d0>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	608b      	str	r3, [r1, #8]
 8001dd4:	e006      	b.n	8001de4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dd6:	4b2a      	ldr	r3, [pc, #168]	; (8001e80 <HAL_GPIO_Init+0x2d0>)
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	4928      	ldr	r1, [pc, #160]	; (8001e80 <HAL_GPIO_Init+0x2d0>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d006      	beq.n	8001dfe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001df0:	4b23      	ldr	r3, [pc, #140]	; (8001e80 <HAL_GPIO_Init+0x2d0>)
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	4922      	ldr	r1, [pc, #136]	; (8001e80 <HAL_GPIO_Init+0x2d0>)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	60cb      	str	r3, [r1, #12]
 8001dfc:	e006      	b.n	8001e0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dfe:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <HAL_GPIO_Init+0x2d0>)
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	491e      	ldr	r1, [pc, #120]	; (8001e80 <HAL_GPIO_Init+0x2d0>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d006      	beq.n	8001e26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e18:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <HAL_GPIO_Init+0x2d0>)
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	4918      	ldr	r1, [pc, #96]	; (8001e80 <HAL_GPIO_Init+0x2d0>)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]
 8001e24:	e006      	b.n	8001e34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e26:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <HAL_GPIO_Init+0x2d0>)
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	4914      	ldr	r1, [pc, #80]	; (8001e80 <HAL_GPIO_Init+0x2d0>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d021      	beq.n	8001e84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e40:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <HAL_GPIO_Init+0x2d0>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	490e      	ldr	r1, [pc, #56]	; (8001e80 <HAL_GPIO_Init+0x2d0>)
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	600b      	str	r3, [r1, #0]
 8001e4c:	e021      	b.n	8001e92 <HAL_GPIO_Init+0x2e2>
 8001e4e:	bf00      	nop
 8001e50:	10320000 	.word	0x10320000
 8001e54:	10310000 	.word	0x10310000
 8001e58:	10220000 	.word	0x10220000
 8001e5c:	10210000 	.word	0x10210000
 8001e60:	10120000 	.word	0x10120000
 8001e64:	10110000 	.word	0x10110000
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40010000 	.word	0x40010000
 8001e70:	40010800 	.word	0x40010800
 8001e74:	40010c00 	.word	0x40010c00
 8001e78:	40011000 	.word	0x40011000
 8001e7c:	40011400 	.word	0x40011400
 8001e80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_GPIO_Init+0x304>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	4909      	ldr	r1, [pc, #36]	; (8001eb4 <HAL_GPIO_Init+0x304>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	3301      	adds	r3, #1
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f47f ae8e 	bne.w	8001bc4 <HAL_GPIO_Init+0x14>
  }
}
 8001ea8:	bf00      	nop
 8001eaa:	bf00      	nop
 8001eac:	372c      	adds	r7, #44	; 0x2c
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr
 8001eb4:	40010400 	.word	0x40010400

08001eb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	887b      	ldrh	r3, [r7, #2]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	73fb      	strb	r3, [r7, #15]
 8001ed4:	e001      	b.n	8001eda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	807b      	strh	r3, [r7, #2]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ef6:	787b      	ldrb	r3, [r7, #1]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001efc:	887a      	ldrh	r2, [r7, #2]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f02:	e003      	b.n	8001f0c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f04:	887b      	ldrh	r3, [r7, #2]
 8001f06:	041a      	lsls	r2, r3, #16
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	611a      	str	r2, [r3, #16]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr
	...

08001f18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f22:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f24:	695a      	ldr	r2, [r3, #20]
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d006      	beq.n	8001f3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f2e:	4a05      	ldr	r2, [pc, #20]	; (8001f44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f34:	88fb      	ldrh	r3, [r7, #6]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f806 	bl	8001f48 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40010400 	.word	0x40010400

08001f48 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e12b      	b.n	80021c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d106      	bne.n	8001f88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7fe fe48 	bl	8000c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2224      	movs	r2, #36	; 0x24
 8001f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0201 	bic.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fc0:	f001 f832 	bl	8003028 <HAL_RCC_GetPCLK1Freq>
 8001fc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	4a81      	ldr	r2, [pc, #516]	; (80021d0 <HAL_I2C_Init+0x274>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d807      	bhi.n	8001fe0 <HAL_I2C_Init+0x84>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4a80      	ldr	r2, [pc, #512]	; (80021d4 <HAL_I2C_Init+0x278>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	bf94      	ite	ls
 8001fd8:	2301      	movls	r3, #1
 8001fda:	2300      	movhi	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	e006      	b.n	8001fee <HAL_I2C_Init+0x92>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4a7d      	ldr	r2, [pc, #500]	; (80021d8 <HAL_I2C_Init+0x27c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	bf94      	ite	ls
 8001fe8:	2301      	movls	r3, #1
 8001fea:	2300      	movhi	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e0e7      	b.n	80021c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4a78      	ldr	r2, [pc, #480]	; (80021dc <HAL_I2C_Init+0x280>)
 8001ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffe:	0c9b      	lsrs	r3, r3, #18
 8002000:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	430a      	orrs	r2, r1
 8002014:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	4a6a      	ldr	r2, [pc, #424]	; (80021d0 <HAL_I2C_Init+0x274>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d802      	bhi.n	8002030 <HAL_I2C_Init+0xd4>
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	3301      	adds	r3, #1
 800202e:	e009      	b.n	8002044 <HAL_I2C_Init+0xe8>
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002036:	fb02 f303 	mul.w	r3, r2, r3
 800203a:	4a69      	ldr	r2, [pc, #420]	; (80021e0 <HAL_I2C_Init+0x284>)
 800203c:	fba2 2303 	umull	r2, r3, r2, r3
 8002040:	099b      	lsrs	r3, r3, #6
 8002042:	3301      	adds	r3, #1
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	430b      	orrs	r3, r1
 800204a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002056:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	495c      	ldr	r1, [pc, #368]	; (80021d0 <HAL_I2C_Init+0x274>)
 8002060:	428b      	cmp	r3, r1
 8002062:	d819      	bhi.n	8002098 <HAL_I2C_Init+0x13c>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1e59      	subs	r1, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002072:	1c59      	adds	r1, r3, #1
 8002074:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002078:	400b      	ands	r3, r1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00a      	beq.n	8002094 <HAL_I2C_Init+0x138>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1e59      	subs	r1, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	fbb1 f3f3 	udiv	r3, r1, r3
 800208c:	3301      	adds	r3, #1
 800208e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002092:	e051      	b.n	8002138 <HAL_I2C_Init+0x1dc>
 8002094:	2304      	movs	r3, #4
 8002096:	e04f      	b.n	8002138 <HAL_I2C_Init+0x1dc>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d111      	bne.n	80020c4 <HAL_I2C_Init+0x168>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	1e58      	subs	r0, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6859      	ldr	r1, [r3, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	440b      	add	r3, r1
 80020ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b2:	3301      	adds	r3, #1
 80020b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bf0c      	ite	eq
 80020bc:	2301      	moveq	r3, #1
 80020be:	2300      	movne	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	e012      	b.n	80020ea <HAL_I2C_Init+0x18e>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	1e58      	subs	r0, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6859      	ldr	r1, [r3, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	0099      	lsls	r1, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020da:	3301      	adds	r3, #1
 80020dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	bf0c      	ite	eq
 80020e4:	2301      	moveq	r3, #1
 80020e6:	2300      	movne	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_I2C_Init+0x196>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e022      	b.n	8002138 <HAL_I2C_Init+0x1dc>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10e      	bne.n	8002118 <HAL_I2C_Init+0x1bc>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1e58      	subs	r0, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6859      	ldr	r1, [r3, #4]
 8002102:	460b      	mov	r3, r1
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	440b      	add	r3, r1
 8002108:	fbb0 f3f3 	udiv	r3, r0, r3
 800210c:	3301      	adds	r3, #1
 800210e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002116:	e00f      	b.n	8002138 <HAL_I2C_Init+0x1dc>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	1e58      	subs	r0, r3, #1
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6859      	ldr	r1, [r3, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	0099      	lsls	r1, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	fbb0 f3f3 	udiv	r3, r0, r3
 800212e:	3301      	adds	r3, #1
 8002130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002134:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	6809      	ldr	r1, [r1, #0]
 800213c:	4313      	orrs	r3, r2
 800213e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69da      	ldr	r2, [r3, #28]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002166:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6911      	ldr	r1, [r2, #16]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68d2      	ldr	r2, [r2, #12]
 8002172:	4311      	orrs	r1, r2
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	430b      	orrs	r3, r1
 800217a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0201 	orr.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2220      	movs	r2, #32
 80021b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	000186a0 	.word	0x000186a0
 80021d4:	001e847f 	.word	0x001e847f
 80021d8:	003d08ff 	.word	0x003d08ff
 80021dc:	431bde83 	.word	0x431bde83
 80021e0:	10624dd3 	.word	0x10624dd3

080021e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af02      	add	r7, sp, #8
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	607a      	str	r2, [r7, #4]
 80021ee:	461a      	mov	r2, r3
 80021f0:	460b      	mov	r3, r1
 80021f2:	817b      	strh	r3, [r7, #10]
 80021f4:	4613      	mov	r3, r2
 80021f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021f8:	f7ff fb9e 	bl	8001938 <HAL_GetTick>
 80021fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b20      	cmp	r3, #32
 8002208:	f040 80e0 	bne.w	80023cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2319      	movs	r3, #25
 8002212:	2201      	movs	r2, #1
 8002214:	4970      	ldr	r1, [pc, #448]	; (80023d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 f964 	bl	80024e4 <I2C_WaitOnFlagUntilTimeout>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002222:	2302      	movs	r3, #2
 8002224:	e0d3      	b.n	80023ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_I2C_Master_Transmit+0x50>
 8002230:	2302      	movs	r3, #2
 8002232:	e0cc      	b.n	80023ce <HAL_I2C_Master_Transmit+0x1ea>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b01      	cmp	r3, #1
 8002248:	d007      	beq.n	800225a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 0201 	orr.w	r2, r2, #1
 8002258:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002268:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2221      	movs	r2, #33	; 0x21
 800226e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2210      	movs	r2, #16
 8002276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	893a      	ldrh	r2, [r7, #8]
 800228a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002290:	b29a      	uxth	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4a50      	ldr	r2, [pc, #320]	; (80023dc <HAL_I2C_Master_Transmit+0x1f8>)
 800229a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800229c:	8979      	ldrh	r1, [r7, #10]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	6a3a      	ldr	r2, [r7, #32]
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 f89c 	bl	80023e0 <I2C_MasterRequestWrite>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e08d      	b.n	80023ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022c8:	e066      	b.n	8002398 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	6a39      	ldr	r1, [r7, #32]
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 fa22 	bl	8002718 <I2C_WaitOnTXEFlagUntilTimeout>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00d      	beq.n	80022f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d107      	bne.n	80022f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e06b      	b.n	80023ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	781a      	ldrb	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002310:	b29b      	uxth	r3, r3
 8002312:	3b01      	subs	r3, #1
 8002314:	b29a      	uxth	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b04      	cmp	r3, #4
 8002332:	d11b      	bne.n	800236c <HAL_I2C_Master_Transmit+0x188>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002338:	2b00      	cmp	r3, #0
 800233a:	d017      	beq.n	800236c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	781a      	ldrb	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002356:	b29b      	uxth	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	6a39      	ldr	r1, [r7, #32]
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 fa19 	bl	80027a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00d      	beq.n	8002398 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	2b04      	cmp	r3, #4
 8002382:	d107      	bne.n	8002394 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002392:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e01a      	b.n	80023ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239c:	2b00      	cmp	r3, #0
 800239e:	d194      	bne.n	80022ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	e000      	b.n	80023ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023cc:	2302      	movs	r3, #2
  }
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	00100002 	.word	0x00100002
 80023dc:	ffff0000 	.word	0xffff0000

080023e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af02      	add	r7, sp, #8
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	607a      	str	r2, [r7, #4]
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	460b      	mov	r3, r1
 80023ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d006      	beq.n	800240a <I2C_MasterRequestWrite+0x2a>
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d003      	beq.n	800240a <I2C_MasterRequestWrite+0x2a>
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002408:	d108      	bne.n	800241c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	e00b      	b.n	8002434 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002420:	2b12      	cmp	r3, #18
 8002422:	d107      	bne.n	8002434 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002432:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 f84f 	bl	80024e4 <I2C_WaitOnFlagUntilTimeout>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00d      	beq.n	8002468 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800245a:	d103      	bne.n	8002464 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002462:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e035      	b.n	80024d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002470:	d108      	bne.n	8002484 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002472:	897b      	ldrh	r3, [r7, #10]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002480:	611a      	str	r2, [r3, #16]
 8002482:	e01b      	b.n	80024bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002484:	897b      	ldrh	r3, [r7, #10]
 8002486:	11db      	asrs	r3, r3, #7
 8002488:	b2db      	uxtb	r3, r3
 800248a:	f003 0306 	and.w	r3, r3, #6
 800248e:	b2db      	uxtb	r3, r3
 8002490:	f063 030f 	orn	r3, r3, #15
 8002494:	b2da      	uxtb	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	490e      	ldr	r1, [pc, #56]	; (80024dc <I2C_MasterRequestWrite+0xfc>)
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 f898 	bl	80025d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e010      	b.n	80024d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024b2:	897b      	ldrh	r3, [r7, #10]
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	4907      	ldr	r1, [pc, #28]	; (80024e0 <I2C_MasterRequestWrite+0x100>)
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 f888 	bl	80025d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	00010008 	.word	0x00010008
 80024e0:	00010002 	.word	0x00010002

080024e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	4613      	mov	r3, r2
 80024f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024f4:	e048      	b.n	8002588 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fc:	d044      	beq.n	8002588 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024fe:	f7ff fa1b 	bl	8001938 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d302      	bcc.n	8002514 <I2C_WaitOnFlagUntilTimeout+0x30>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d139      	bne.n	8002588 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	0c1b      	lsrs	r3, r3, #16
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b01      	cmp	r3, #1
 800251c:	d10d      	bne.n	800253a <I2C_WaitOnFlagUntilTimeout+0x56>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	43da      	mvns	r2, r3
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	4013      	ands	r3, r2
 800252a:	b29b      	uxth	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	bf0c      	ite	eq
 8002530:	2301      	moveq	r3, #1
 8002532:	2300      	movne	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	461a      	mov	r2, r3
 8002538:	e00c      	b.n	8002554 <I2C_WaitOnFlagUntilTimeout+0x70>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	43da      	mvns	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	4013      	ands	r3, r2
 8002546:	b29b      	uxth	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	bf0c      	ite	eq
 800254c:	2301      	moveq	r3, #1
 800254e:	2300      	movne	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	461a      	mov	r2, r3
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	429a      	cmp	r2, r3
 8002558:	d116      	bne.n	8002588 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	f043 0220 	orr.w	r2, r3, #32
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e023      	b.n	80025d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	0c1b      	lsrs	r3, r3, #16
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b01      	cmp	r3, #1
 8002590:	d10d      	bne.n	80025ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	43da      	mvns	r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	4013      	ands	r3, r2
 800259e:	b29b      	uxth	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	bf0c      	ite	eq
 80025a4:	2301      	moveq	r3, #1
 80025a6:	2300      	movne	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	461a      	mov	r2, r3
 80025ac:	e00c      	b.n	80025c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	43da      	mvns	r2, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	4013      	ands	r3, r2
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	bf0c      	ite	eq
 80025c0:	2301      	moveq	r3, #1
 80025c2:	2300      	movne	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	461a      	mov	r2, r3
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d093      	beq.n	80024f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
 80025e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025e6:	e071      	b.n	80026cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025f6:	d123      	bne.n	8002640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002606:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002610:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2220      	movs	r2, #32
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	f043 0204 	orr.w	r2, r3, #4
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e067      	b.n	8002710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002646:	d041      	beq.n	80026cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002648:	f7ff f976 	bl	8001938 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	429a      	cmp	r2, r3
 8002656:	d302      	bcc.n	800265e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d136      	bne.n	80026cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	0c1b      	lsrs	r3, r3, #16
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b01      	cmp	r3, #1
 8002666:	d10c      	bne.n	8002682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	43da      	mvns	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	4013      	ands	r3, r2
 8002674:	b29b      	uxth	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	bf14      	ite	ne
 800267a:	2301      	movne	r3, #1
 800267c:	2300      	moveq	r3, #0
 800267e:	b2db      	uxtb	r3, r3
 8002680:	e00b      	b.n	800269a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	43da      	mvns	r2, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	4013      	ands	r3, r2
 800268e:	b29b      	uxth	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	bf14      	ite	ne
 8002694:	2301      	movne	r3, #1
 8002696:	2300      	moveq	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d016      	beq.n	80026cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2220      	movs	r2, #32
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	f043 0220 	orr.w	r2, r3, #32
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e021      	b.n	8002710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	0c1b      	lsrs	r3, r3, #16
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d10c      	bne.n	80026f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	43da      	mvns	r2, r3
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	4013      	ands	r3, r2
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	bf14      	ite	ne
 80026e8:	2301      	movne	r3, #1
 80026ea:	2300      	moveq	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	e00b      	b.n	8002708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	43da      	mvns	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	4013      	ands	r3, r2
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	bf14      	ite	ne
 8002702:	2301      	movne	r3, #1
 8002704:	2300      	moveq	r3, #0
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	f47f af6d 	bne.w	80025e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002724:	e034      	b.n	8002790 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 f886 	bl	8002838 <I2C_IsAcknowledgeFailed>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e034      	b.n	80027a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273c:	d028      	beq.n	8002790 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800273e:	f7ff f8fb 	bl	8001938 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	68ba      	ldr	r2, [r7, #8]
 800274a:	429a      	cmp	r2, r3
 800274c:	d302      	bcc.n	8002754 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d11d      	bne.n	8002790 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275e:	2b80      	cmp	r3, #128	; 0x80
 8002760:	d016      	beq.n	8002790 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	f043 0220 	orr.w	r2, r3, #32
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e007      	b.n	80027a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279a:	2b80      	cmp	r3, #128	; 0x80
 800279c:	d1c3      	bne.n	8002726 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027b4:	e034      	b.n	8002820 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 f83e 	bl	8002838 <I2C_IsAcknowledgeFailed>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e034      	b.n	8002830 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027cc:	d028      	beq.n	8002820 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ce:	f7ff f8b3 	bl	8001938 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d302      	bcc.n	80027e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d11d      	bne.n	8002820 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d016      	beq.n	8002820 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2220      	movs	r2, #32
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	f043 0220 	orr.w	r2, r3, #32
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e007      	b.n	8002830 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b04      	cmp	r3, #4
 800282c:	d1c3      	bne.n	80027b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800284e:	d11b      	bne.n	8002888 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002858:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	f043 0204 	orr.w	r2, r3, #4
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e272      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 8087 	beq.w	80029c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028b4:	4b92      	ldr	r3, [pc, #584]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 030c 	and.w	r3, r3, #12
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d00c      	beq.n	80028da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028c0:	4b8f      	ldr	r3, [pc, #572]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 030c 	and.w	r3, r3, #12
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d112      	bne.n	80028f2 <HAL_RCC_OscConfig+0x5e>
 80028cc:	4b8c      	ldr	r3, [pc, #560]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d8:	d10b      	bne.n	80028f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028da:	4b89      	ldr	r3, [pc, #548]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d06c      	beq.n	80029c0 <HAL_RCC_OscConfig+0x12c>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d168      	bne.n	80029c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e24c      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fa:	d106      	bne.n	800290a <HAL_RCC_OscConfig+0x76>
 80028fc:	4b80      	ldr	r3, [pc, #512]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a7f      	ldr	r2, [pc, #508]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002906:	6013      	str	r3, [r2, #0]
 8002908:	e02e      	b.n	8002968 <HAL_RCC_OscConfig+0xd4>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10c      	bne.n	800292c <HAL_RCC_OscConfig+0x98>
 8002912:	4b7b      	ldr	r3, [pc, #492]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a7a      	ldr	r2, [pc, #488]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	4b78      	ldr	r3, [pc, #480]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a77      	ldr	r2, [pc, #476]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	e01d      	b.n	8002968 <HAL_RCC_OscConfig+0xd4>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002934:	d10c      	bne.n	8002950 <HAL_RCC_OscConfig+0xbc>
 8002936:	4b72      	ldr	r3, [pc, #456]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a71      	ldr	r2, [pc, #452]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 800293c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	4b6f      	ldr	r3, [pc, #444]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a6e      	ldr	r2, [pc, #440]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	e00b      	b.n	8002968 <HAL_RCC_OscConfig+0xd4>
 8002950:	4b6b      	ldr	r3, [pc, #428]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a6a      	ldr	r2, [pc, #424]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	4b68      	ldr	r3, [pc, #416]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a67      	ldr	r2, [pc, #412]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002966:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d013      	beq.n	8002998 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7fe ffe2 	bl	8001938 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002978:	f7fe ffde 	bl	8001938 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	; 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e200      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298a:	4b5d      	ldr	r3, [pc, #372]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0xe4>
 8002996:	e014      	b.n	80029c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7fe ffce 	bl	8001938 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a0:	f7fe ffca 	bl	8001938 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b64      	cmp	r3, #100	; 0x64
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e1ec      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b2:	4b53      	ldr	r3, [pc, #332]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x10c>
 80029be:	e000      	b.n	80029c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d063      	beq.n	8002a96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ce:	4b4c      	ldr	r3, [pc, #304]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00b      	beq.n	80029f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029da:	4b49      	ldr	r3, [pc, #292]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d11c      	bne.n	8002a20 <HAL_RCC_OscConfig+0x18c>
 80029e6:	4b46      	ldr	r3, [pc, #280]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d116      	bne.n	8002a20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f2:	4b43      	ldr	r3, [pc, #268]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <HAL_RCC_OscConfig+0x176>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d001      	beq.n	8002a0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e1c0      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0a:	4b3d      	ldr	r3, [pc, #244]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4939      	ldr	r1, [pc, #228]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1e:	e03a      	b.n	8002a96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d020      	beq.n	8002a6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a28:	4b36      	ldr	r3, [pc, #216]	; (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2e:	f7fe ff83 	bl	8001938 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a36:	f7fe ff7f 	bl	8001938 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e1a1      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a48:	4b2d      	ldr	r3, [pc, #180]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f0      	beq.n	8002a36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a54:	4b2a      	ldr	r3, [pc, #168]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4927      	ldr	r1, [pc, #156]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	600b      	str	r3, [r1, #0]
 8002a68:	e015      	b.n	8002a96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a6a:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7fe ff62 	bl	8001938 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a78:	f7fe ff5e 	bl	8001938 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e180      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a8a:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d03a      	beq.n	8002b18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d019      	beq.n	8002ade <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aaa:	4b17      	ldr	r3, [pc, #92]	; (8002b08 <HAL_RCC_OscConfig+0x274>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab0:	f7fe ff42 	bl	8001938 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab8:	f7fe ff3e 	bl	8001938 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e160      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aca:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	f000 faba 	bl	8003050 <RCC_Delay>
 8002adc:	e01c      	b.n	8002b18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ade:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <HAL_RCC_OscConfig+0x274>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae4:	f7fe ff28 	bl	8001938 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aea:	e00f      	b.n	8002b0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aec:	f7fe ff24 	bl	8001938 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d908      	bls.n	8002b0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e146      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
 8002afe:	bf00      	nop
 8002b00:	40021000 	.word	0x40021000
 8002b04:	42420000 	.word	0x42420000
 8002b08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b0c:	4b92      	ldr	r3, [pc, #584]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1e9      	bne.n	8002aec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 80a6 	beq.w	8002c72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b26:	2300      	movs	r3, #0
 8002b28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b2a:	4b8b      	ldr	r3, [pc, #556]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10d      	bne.n	8002b52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b36:	4b88      	ldr	r3, [pc, #544]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	4a87      	ldr	r2, [pc, #540]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b40:	61d3      	str	r3, [r2, #28]
 8002b42:	4b85      	ldr	r3, [pc, #532]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	60bb      	str	r3, [r7, #8]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b52:	4b82      	ldr	r3, [pc, #520]	; (8002d5c <HAL_RCC_OscConfig+0x4c8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d118      	bne.n	8002b90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b5e:	4b7f      	ldr	r3, [pc, #508]	; (8002d5c <HAL_RCC_OscConfig+0x4c8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a7e      	ldr	r2, [pc, #504]	; (8002d5c <HAL_RCC_OscConfig+0x4c8>)
 8002b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b6a:	f7fe fee5 	bl	8001938 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b72:	f7fe fee1 	bl	8001938 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b64      	cmp	r3, #100	; 0x64
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e103      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b84:	4b75      	ldr	r3, [pc, #468]	; (8002d5c <HAL_RCC_OscConfig+0x4c8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0f0      	beq.n	8002b72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d106      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x312>
 8002b98:	4b6f      	ldr	r3, [pc, #444]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	4a6e      	ldr	r2, [pc, #440]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	6213      	str	r3, [r2, #32]
 8002ba4:	e02d      	b.n	8002c02 <HAL_RCC_OscConfig+0x36e>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x334>
 8002bae:	4b6a      	ldr	r3, [pc, #424]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	4a69      	ldr	r2, [pc, #420]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002bb4:	f023 0301 	bic.w	r3, r3, #1
 8002bb8:	6213      	str	r3, [r2, #32]
 8002bba:	4b67      	ldr	r3, [pc, #412]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	4a66      	ldr	r2, [pc, #408]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002bc0:	f023 0304 	bic.w	r3, r3, #4
 8002bc4:	6213      	str	r3, [r2, #32]
 8002bc6:	e01c      	b.n	8002c02 <HAL_RCC_OscConfig+0x36e>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	2b05      	cmp	r3, #5
 8002bce:	d10c      	bne.n	8002bea <HAL_RCC_OscConfig+0x356>
 8002bd0:	4b61      	ldr	r3, [pc, #388]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	4a60      	ldr	r2, [pc, #384]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002bd6:	f043 0304 	orr.w	r3, r3, #4
 8002bda:	6213      	str	r3, [r2, #32]
 8002bdc:	4b5e      	ldr	r3, [pc, #376]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	4a5d      	ldr	r2, [pc, #372]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	6213      	str	r3, [r2, #32]
 8002be8:	e00b      	b.n	8002c02 <HAL_RCC_OscConfig+0x36e>
 8002bea:	4b5b      	ldr	r3, [pc, #364]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	4a5a      	ldr	r2, [pc, #360]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	f023 0301 	bic.w	r3, r3, #1
 8002bf4:	6213      	str	r3, [r2, #32]
 8002bf6:	4b58      	ldr	r3, [pc, #352]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	4a57      	ldr	r2, [pc, #348]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002bfc:	f023 0304 	bic.w	r3, r3, #4
 8002c00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d015      	beq.n	8002c36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0a:	f7fe fe95 	bl	8001938 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c10:	e00a      	b.n	8002c28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c12:	f7fe fe91 	bl	8001938 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e0b1      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c28:	4b4b      	ldr	r3, [pc, #300]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0ee      	beq.n	8002c12 <HAL_RCC_OscConfig+0x37e>
 8002c34:	e014      	b.n	8002c60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c36:	f7fe fe7f 	bl	8001938 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c3c:	e00a      	b.n	8002c54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3e:	f7fe fe7b 	bl	8001938 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e09b      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c54:	4b40      	ldr	r3, [pc, #256]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1ee      	bne.n	8002c3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c60:	7dfb      	ldrb	r3, [r7, #23]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d105      	bne.n	8002c72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c66:	4b3c      	ldr	r3, [pc, #240]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	4a3b      	ldr	r2, [pc, #236]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 8087 	beq.w	8002d8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c7c:	4b36      	ldr	r3, [pc, #216]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 030c 	and.w	r3, r3, #12
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d061      	beq.n	8002d4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d146      	bne.n	8002d1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c90:	4b33      	ldr	r3, [pc, #204]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c96:	f7fe fe4f 	bl	8001938 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9e:	f7fe fe4b 	bl	8001938 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e06d      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb0:	4b29      	ldr	r3, [pc, #164]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1f0      	bne.n	8002c9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc4:	d108      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cc6:	4b24      	ldr	r3, [pc, #144]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	4921      	ldr	r1, [pc, #132]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cd8:	4b1f      	ldr	r3, [pc, #124]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a19      	ldr	r1, [r3, #32]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	491b      	ldr	r1, [pc, #108]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf6:	f7fe fe1f 	bl	8001938 <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfe:	f7fe fe1b 	bl	8001938 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e03d      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d10:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f0      	beq.n	8002cfe <HAL_RCC_OscConfig+0x46a>
 8002d1c:	e035      	b.n	8002d8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1e:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7fe fe08 	bl	8001938 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2c:	f7fe fe04 	bl	8001938 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e026      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d3e:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <HAL_RCC_OscConfig+0x4c4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x498>
 8002d4a:	e01e      	b.n	8002d8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d107      	bne.n	8002d64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e019      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40007000 	.word	0x40007000
 8002d60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d64:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <HAL_RCC_OscConfig+0x500>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d106      	bne.n	8002d86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d001      	beq.n	8002d8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40021000 	.word	0x40021000

08002d98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0d0      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dac:	4b6a      	ldr	r3, [pc, #424]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d910      	bls.n	8002ddc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dba:	4b67      	ldr	r3, [pc, #412]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f023 0207 	bic.w	r2, r3, #7
 8002dc2:	4965      	ldr	r1, [pc, #404]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dca:	4b63      	ldr	r3, [pc, #396]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0b8      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d020      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002df4:	4b59      	ldr	r3, [pc, #356]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	4a58      	ldr	r2, [pc, #352]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002dfa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dfe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e0c:	4b53      	ldr	r3, [pc, #332]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	4a52      	ldr	r2, [pc, #328]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e18:	4b50      	ldr	r3, [pc, #320]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	494d      	ldr	r1, [pc, #308]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d040      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d107      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3e:	4b47      	ldr	r3, [pc, #284]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d115      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e07f      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d107      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e56:	4b41      	ldr	r3, [pc, #260]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d109      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e073      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e66:	4b3d      	ldr	r3, [pc, #244]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e06b      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e76:	4b39      	ldr	r3, [pc, #228]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f023 0203 	bic.w	r2, r3, #3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4936      	ldr	r1, [pc, #216]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e88:	f7fe fd56 	bl	8001938 <HAL_GetTick>
 8002e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e90:	f7fe fd52 	bl	8001938 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e053      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea6:	4b2d      	ldr	r3, [pc, #180]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 020c 	and.w	r2, r3, #12
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d1eb      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb8:	4b27      	ldr	r3, [pc, #156]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d210      	bcs.n	8002ee8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec6:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 0207 	bic.w	r2, r3, #7
 8002ece:	4922      	ldr	r1, [pc, #136]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed6:	4b20      	ldr	r3, [pc, #128]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e032      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d008      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ef4:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	4916      	ldr	r1, [pc, #88]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d009      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f12:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	490e      	ldr	r1, [pc, #56]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f26:	f000 f821 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	490a      	ldr	r1, [pc, #40]	; (8002f60 <HAL_RCC_ClockConfig+0x1c8>)
 8002f38:	5ccb      	ldrb	r3, [r1, r3]
 8002f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3e:	4a09      	ldr	r2, [pc, #36]	; (8002f64 <HAL_RCC_ClockConfig+0x1cc>)
 8002f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f42:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <HAL_RCC_ClockConfig+0x1d0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe fcb4 	bl	80018b4 <HAL_InitTick>

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40022000 	.word	0x40022000
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	0800632c 	.word	0x0800632c
 8002f64:	20000004 	.word	0x20000004
 8002f68:	20000008 	.word	0x20000008

08002f6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f86:	4b1e      	ldr	r3, [pc, #120]	; (8003000 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d002      	beq.n	8002f9c <HAL_RCC_GetSysClockFreq+0x30>
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d003      	beq.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x36>
 8002f9a:	e027      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f9c:	4b19      	ldr	r3, [pc, #100]	; (8003004 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f9e:	613b      	str	r3, [r7, #16]
      break;
 8002fa0:	e027      	b.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	0c9b      	lsrs	r3, r3, #18
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	4a17      	ldr	r2, [pc, #92]	; (8003008 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fac:	5cd3      	ldrb	r3, [r2, r3]
 8002fae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d010      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fba:	4b11      	ldr	r3, [pc, #68]	; (8003000 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	0c5b      	lsrs	r3, r3, #17
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	4a11      	ldr	r2, [pc, #68]	; (800300c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002fc6:	5cd3      	ldrb	r3, [r2, r3]
 8002fc8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a0d      	ldr	r2, [pc, #52]	; (8003004 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fce:	fb03 f202 	mul.w	r2, r3, r2
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	e004      	b.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a0c      	ldr	r2, [pc, #48]	; (8003010 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fe0:	fb02 f303 	mul.w	r3, r2, r3
 8002fe4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	613b      	str	r3, [r7, #16]
      break;
 8002fea:	e002      	b.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fec:	4b05      	ldr	r3, [pc, #20]	; (8003004 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fee:	613b      	str	r3, [r7, #16]
      break;
 8002ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ff2:	693b      	ldr	r3, [r7, #16]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	371c      	adds	r7, #28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40021000 	.word	0x40021000
 8003004:	007a1200 	.word	0x007a1200
 8003008:	08006344 	.word	0x08006344
 800300c:	08006354 	.word	0x08006354
 8003010:	003d0900 	.word	0x003d0900

08003014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003018:	4b02      	ldr	r3, [pc, #8]	; (8003024 <HAL_RCC_GetHCLKFreq+0x10>)
 800301a:	681b      	ldr	r3, [r3, #0]
}
 800301c:	4618      	mov	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr
 8003024:	20000004 	.word	0x20000004

08003028 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800302c:	f7ff fff2 	bl	8003014 <HAL_RCC_GetHCLKFreq>
 8003030:	4602      	mov	r2, r0
 8003032:	4b05      	ldr	r3, [pc, #20]	; (8003048 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	0a1b      	lsrs	r3, r3, #8
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	4903      	ldr	r1, [pc, #12]	; (800304c <HAL_RCC_GetPCLK1Freq+0x24>)
 800303e:	5ccb      	ldrb	r3, [r1, r3]
 8003040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003044:	4618      	mov	r0, r3
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40021000 	.word	0x40021000
 800304c:	0800633c 	.word	0x0800633c

08003050 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003058:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <RCC_Delay+0x34>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <RCC_Delay+0x38>)
 800305e:	fba2 2303 	umull	r2, r3, r2, r3
 8003062:	0a5b      	lsrs	r3, r3, #9
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	fb02 f303 	mul.w	r3, r2, r3
 800306a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800306c:	bf00      	nop
  }
  while (Delay --);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1e5a      	subs	r2, r3, #1
 8003072:	60fa      	str	r2, [r7, #12]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1f9      	bne.n	800306c <RCC_Delay+0x1c>
}
 8003078:	bf00      	nop
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr
 8003084:	20000004 	.word	0x20000004
 8003088:	10624dd3 	.word	0x10624dd3

0800308c <__cvt>:
 800308c:	2b00      	cmp	r3, #0
 800308e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003092:	461f      	mov	r7, r3
 8003094:	bfbb      	ittet	lt
 8003096:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800309a:	461f      	movlt	r7, r3
 800309c:	2300      	movge	r3, #0
 800309e:	232d      	movlt	r3, #45	; 0x2d
 80030a0:	b088      	sub	sp, #32
 80030a2:	4614      	mov	r4, r2
 80030a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80030a6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80030a8:	7013      	strb	r3, [r2, #0]
 80030aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80030ac:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80030b0:	f023 0820 	bic.w	r8, r3, #32
 80030b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80030b8:	d005      	beq.n	80030c6 <__cvt+0x3a>
 80030ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80030be:	d100      	bne.n	80030c2 <__cvt+0x36>
 80030c0:	3501      	adds	r5, #1
 80030c2:	2302      	movs	r3, #2
 80030c4:	e000      	b.n	80030c8 <__cvt+0x3c>
 80030c6:	2303      	movs	r3, #3
 80030c8:	aa07      	add	r2, sp, #28
 80030ca:	9204      	str	r2, [sp, #16]
 80030cc:	aa06      	add	r2, sp, #24
 80030ce:	e9cd a202 	strd	sl, r2, [sp, #8]
 80030d2:	e9cd 3500 	strd	r3, r5, [sp]
 80030d6:	4622      	mov	r2, r4
 80030d8:	463b      	mov	r3, r7
 80030da:	f000 fe71 	bl	8003dc0 <_dtoa_r>
 80030de:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80030e2:	4606      	mov	r6, r0
 80030e4:	d102      	bne.n	80030ec <__cvt+0x60>
 80030e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80030e8:	07db      	lsls	r3, r3, #31
 80030ea:	d522      	bpl.n	8003132 <__cvt+0xa6>
 80030ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80030f0:	eb06 0905 	add.w	r9, r6, r5
 80030f4:	d110      	bne.n	8003118 <__cvt+0x8c>
 80030f6:	7833      	ldrb	r3, [r6, #0]
 80030f8:	2b30      	cmp	r3, #48	; 0x30
 80030fa:	d10a      	bne.n	8003112 <__cvt+0x86>
 80030fc:	2200      	movs	r2, #0
 80030fe:	2300      	movs	r3, #0
 8003100:	4620      	mov	r0, r4
 8003102:	4639      	mov	r1, r7
 8003104:	f7fd fc50 	bl	80009a8 <__aeabi_dcmpeq>
 8003108:	b918      	cbnz	r0, 8003112 <__cvt+0x86>
 800310a:	f1c5 0501 	rsb	r5, r5, #1
 800310e:	f8ca 5000 	str.w	r5, [sl]
 8003112:	f8da 3000 	ldr.w	r3, [sl]
 8003116:	4499      	add	r9, r3
 8003118:	2200      	movs	r2, #0
 800311a:	2300      	movs	r3, #0
 800311c:	4620      	mov	r0, r4
 800311e:	4639      	mov	r1, r7
 8003120:	f7fd fc42 	bl	80009a8 <__aeabi_dcmpeq>
 8003124:	b108      	cbz	r0, 800312a <__cvt+0x9e>
 8003126:	f8cd 901c 	str.w	r9, [sp, #28]
 800312a:	2230      	movs	r2, #48	; 0x30
 800312c:	9b07      	ldr	r3, [sp, #28]
 800312e:	454b      	cmp	r3, r9
 8003130:	d307      	bcc.n	8003142 <__cvt+0xb6>
 8003132:	4630      	mov	r0, r6
 8003134:	9b07      	ldr	r3, [sp, #28]
 8003136:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003138:	1b9b      	subs	r3, r3, r6
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	b008      	add	sp, #32
 800313e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003142:	1c59      	adds	r1, r3, #1
 8003144:	9107      	str	r1, [sp, #28]
 8003146:	701a      	strb	r2, [r3, #0]
 8003148:	e7f0      	b.n	800312c <__cvt+0xa0>

0800314a <__exponent>:
 800314a:	4603      	mov	r3, r0
 800314c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800314e:	2900      	cmp	r1, #0
 8003150:	f803 2b02 	strb.w	r2, [r3], #2
 8003154:	bfb6      	itet	lt
 8003156:	222d      	movlt	r2, #45	; 0x2d
 8003158:	222b      	movge	r2, #43	; 0x2b
 800315a:	4249      	neglt	r1, r1
 800315c:	2909      	cmp	r1, #9
 800315e:	7042      	strb	r2, [r0, #1]
 8003160:	dd2a      	ble.n	80031b8 <__exponent+0x6e>
 8003162:	f10d 0207 	add.w	r2, sp, #7
 8003166:	4617      	mov	r7, r2
 8003168:	260a      	movs	r6, #10
 800316a:	fb91 f5f6 	sdiv	r5, r1, r6
 800316e:	4694      	mov	ip, r2
 8003170:	fb06 1415 	mls	r4, r6, r5, r1
 8003174:	3430      	adds	r4, #48	; 0x30
 8003176:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800317a:	460c      	mov	r4, r1
 800317c:	2c63      	cmp	r4, #99	; 0x63
 800317e:	4629      	mov	r1, r5
 8003180:	f102 32ff 	add.w	r2, r2, #4294967295
 8003184:	dcf1      	bgt.n	800316a <__exponent+0x20>
 8003186:	3130      	adds	r1, #48	; 0x30
 8003188:	f1ac 0402 	sub.w	r4, ip, #2
 800318c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003190:	4622      	mov	r2, r4
 8003192:	1c41      	adds	r1, r0, #1
 8003194:	42ba      	cmp	r2, r7
 8003196:	d30a      	bcc.n	80031ae <__exponent+0x64>
 8003198:	f10d 0209 	add.w	r2, sp, #9
 800319c:	eba2 020c 	sub.w	r2, r2, ip
 80031a0:	42bc      	cmp	r4, r7
 80031a2:	bf88      	it	hi
 80031a4:	2200      	movhi	r2, #0
 80031a6:	4413      	add	r3, r2
 80031a8:	1a18      	subs	r0, r3, r0
 80031aa:	b003      	add	sp, #12
 80031ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ae:	f812 5b01 	ldrb.w	r5, [r2], #1
 80031b2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80031b6:	e7ed      	b.n	8003194 <__exponent+0x4a>
 80031b8:	2330      	movs	r3, #48	; 0x30
 80031ba:	3130      	adds	r1, #48	; 0x30
 80031bc:	7083      	strb	r3, [r0, #2]
 80031be:	70c1      	strb	r1, [r0, #3]
 80031c0:	1d03      	adds	r3, r0, #4
 80031c2:	e7f1      	b.n	80031a8 <__exponent+0x5e>

080031c4 <_printf_float>:
 80031c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031c8:	b091      	sub	sp, #68	; 0x44
 80031ca:	460c      	mov	r4, r1
 80031cc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80031d0:	4616      	mov	r6, r2
 80031d2:	461f      	mov	r7, r3
 80031d4:	4605      	mov	r5, r0
 80031d6:	f000 fcd5 	bl	8003b84 <_localeconv_r>
 80031da:	6803      	ldr	r3, [r0, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	9309      	str	r3, [sp, #36]	; 0x24
 80031e0:	f7fc ffb6 	bl	8000150 <strlen>
 80031e4:	2300      	movs	r3, #0
 80031e6:	930e      	str	r3, [sp, #56]	; 0x38
 80031e8:	f8d8 3000 	ldr.w	r3, [r8]
 80031ec:	900a      	str	r0, [sp, #40]	; 0x28
 80031ee:	3307      	adds	r3, #7
 80031f0:	f023 0307 	bic.w	r3, r3, #7
 80031f4:	f103 0208 	add.w	r2, r3, #8
 80031f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80031fc:	f8d4 b000 	ldr.w	fp, [r4]
 8003200:	f8c8 2000 	str.w	r2, [r8]
 8003204:	e9d3 a800 	ldrd	sl, r8, [r3]
 8003208:	4652      	mov	r2, sl
 800320a:	4643      	mov	r3, r8
 800320c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003210:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003214:	930b      	str	r3, [sp, #44]	; 0x2c
 8003216:	f04f 32ff 	mov.w	r2, #4294967295
 800321a:	4650      	mov	r0, sl
 800321c:	4b9c      	ldr	r3, [pc, #624]	; (8003490 <_printf_float+0x2cc>)
 800321e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003220:	f7fd fbf4 	bl	8000a0c <__aeabi_dcmpun>
 8003224:	bb70      	cbnz	r0, 8003284 <_printf_float+0xc0>
 8003226:	f04f 32ff 	mov.w	r2, #4294967295
 800322a:	4650      	mov	r0, sl
 800322c:	4b98      	ldr	r3, [pc, #608]	; (8003490 <_printf_float+0x2cc>)
 800322e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003230:	f7fd fbce 	bl	80009d0 <__aeabi_dcmple>
 8003234:	bb30      	cbnz	r0, 8003284 <_printf_float+0xc0>
 8003236:	2200      	movs	r2, #0
 8003238:	2300      	movs	r3, #0
 800323a:	4650      	mov	r0, sl
 800323c:	4641      	mov	r1, r8
 800323e:	f7fd fbbd 	bl	80009bc <__aeabi_dcmplt>
 8003242:	b110      	cbz	r0, 800324a <_printf_float+0x86>
 8003244:	232d      	movs	r3, #45	; 0x2d
 8003246:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800324a:	4a92      	ldr	r2, [pc, #584]	; (8003494 <_printf_float+0x2d0>)
 800324c:	4b92      	ldr	r3, [pc, #584]	; (8003498 <_printf_float+0x2d4>)
 800324e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003252:	bf94      	ite	ls
 8003254:	4690      	movls	r8, r2
 8003256:	4698      	movhi	r8, r3
 8003258:	2303      	movs	r3, #3
 800325a:	f04f 0a00 	mov.w	sl, #0
 800325e:	6123      	str	r3, [r4, #16]
 8003260:	f02b 0304 	bic.w	r3, fp, #4
 8003264:	6023      	str	r3, [r4, #0]
 8003266:	4633      	mov	r3, r6
 8003268:	4621      	mov	r1, r4
 800326a:	4628      	mov	r0, r5
 800326c:	9700      	str	r7, [sp, #0]
 800326e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003270:	f000 f9d6 	bl	8003620 <_printf_common>
 8003274:	3001      	adds	r0, #1
 8003276:	f040 8090 	bne.w	800339a <_printf_float+0x1d6>
 800327a:	f04f 30ff 	mov.w	r0, #4294967295
 800327e:	b011      	add	sp, #68	; 0x44
 8003280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003284:	4652      	mov	r2, sl
 8003286:	4643      	mov	r3, r8
 8003288:	4650      	mov	r0, sl
 800328a:	4641      	mov	r1, r8
 800328c:	f7fd fbbe 	bl	8000a0c <__aeabi_dcmpun>
 8003290:	b148      	cbz	r0, 80032a6 <_printf_float+0xe2>
 8003292:	f1b8 0f00 	cmp.w	r8, #0
 8003296:	bfb8      	it	lt
 8003298:	232d      	movlt	r3, #45	; 0x2d
 800329a:	4a80      	ldr	r2, [pc, #512]	; (800349c <_printf_float+0x2d8>)
 800329c:	bfb8      	it	lt
 800329e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80032a2:	4b7f      	ldr	r3, [pc, #508]	; (80034a0 <_printf_float+0x2dc>)
 80032a4:	e7d3      	b.n	800324e <_printf_float+0x8a>
 80032a6:	6863      	ldr	r3, [r4, #4]
 80032a8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	d142      	bne.n	8003336 <_printf_float+0x172>
 80032b0:	2306      	movs	r3, #6
 80032b2:	6063      	str	r3, [r4, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	9206      	str	r2, [sp, #24]
 80032b8:	aa0e      	add	r2, sp, #56	; 0x38
 80032ba:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80032be:	aa0d      	add	r2, sp, #52	; 0x34
 80032c0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80032c4:	9203      	str	r2, [sp, #12]
 80032c6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80032ca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80032ce:	6023      	str	r3, [r4, #0]
 80032d0:	6863      	ldr	r3, [r4, #4]
 80032d2:	4652      	mov	r2, sl
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	4628      	mov	r0, r5
 80032d8:	4643      	mov	r3, r8
 80032da:	910b      	str	r1, [sp, #44]	; 0x2c
 80032dc:	f7ff fed6 	bl	800308c <__cvt>
 80032e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80032e2:	4680      	mov	r8, r0
 80032e4:	2947      	cmp	r1, #71	; 0x47
 80032e6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80032e8:	d108      	bne.n	80032fc <_printf_float+0x138>
 80032ea:	1cc8      	adds	r0, r1, #3
 80032ec:	db02      	blt.n	80032f4 <_printf_float+0x130>
 80032ee:	6863      	ldr	r3, [r4, #4]
 80032f0:	4299      	cmp	r1, r3
 80032f2:	dd40      	ble.n	8003376 <_printf_float+0x1b2>
 80032f4:	f1a9 0902 	sub.w	r9, r9, #2
 80032f8:	fa5f f989 	uxtb.w	r9, r9
 80032fc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003300:	d81f      	bhi.n	8003342 <_printf_float+0x17e>
 8003302:	464a      	mov	r2, r9
 8003304:	3901      	subs	r1, #1
 8003306:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800330a:	910d      	str	r1, [sp, #52]	; 0x34
 800330c:	f7ff ff1d 	bl	800314a <__exponent>
 8003310:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003312:	4682      	mov	sl, r0
 8003314:	1813      	adds	r3, r2, r0
 8003316:	2a01      	cmp	r2, #1
 8003318:	6123      	str	r3, [r4, #16]
 800331a:	dc02      	bgt.n	8003322 <_printf_float+0x15e>
 800331c:	6822      	ldr	r2, [r4, #0]
 800331e:	07d2      	lsls	r2, r2, #31
 8003320:	d501      	bpl.n	8003326 <_printf_float+0x162>
 8003322:	3301      	adds	r3, #1
 8003324:	6123      	str	r3, [r4, #16]
 8003326:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800332a:	2b00      	cmp	r3, #0
 800332c:	d09b      	beq.n	8003266 <_printf_float+0xa2>
 800332e:	232d      	movs	r3, #45	; 0x2d
 8003330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003334:	e797      	b.n	8003266 <_printf_float+0xa2>
 8003336:	2947      	cmp	r1, #71	; 0x47
 8003338:	d1bc      	bne.n	80032b4 <_printf_float+0xf0>
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1ba      	bne.n	80032b4 <_printf_float+0xf0>
 800333e:	2301      	movs	r3, #1
 8003340:	e7b7      	b.n	80032b2 <_printf_float+0xee>
 8003342:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003346:	d118      	bne.n	800337a <_printf_float+0x1b6>
 8003348:	2900      	cmp	r1, #0
 800334a:	6863      	ldr	r3, [r4, #4]
 800334c:	dd0b      	ble.n	8003366 <_printf_float+0x1a2>
 800334e:	6121      	str	r1, [r4, #16]
 8003350:	b913      	cbnz	r3, 8003358 <_printf_float+0x194>
 8003352:	6822      	ldr	r2, [r4, #0]
 8003354:	07d0      	lsls	r0, r2, #31
 8003356:	d502      	bpl.n	800335e <_printf_float+0x19a>
 8003358:	3301      	adds	r3, #1
 800335a:	440b      	add	r3, r1
 800335c:	6123      	str	r3, [r4, #16]
 800335e:	f04f 0a00 	mov.w	sl, #0
 8003362:	65a1      	str	r1, [r4, #88]	; 0x58
 8003364:	e7df      	b.n	8003326 <_printf_float+0x162>
 8003366:	b913      	cbnz	r3, 800336e <_printf_float+0x1aa>
 8003368:	6822      	ldr	r2, [r4, #0]
 800336a:	07d2      	lsls	r2, r2, #31
 800336c:	d501      	bpl.n	8003372 <_printf_float+0x1ae>
 800336e:	3302      	adds	r3, #2
 8003370:	e7f4      	b.n	800335c <_printf_float+0x198>
 8003372:	2301      	movs	r3, #1
 8003374:	e7f2      	b.n	800335c <_printf_float+0x198>
 8003376:	f04f 0967 	mov.w	r9, #103	; 0x67
 800337a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800337c:	4299      	cmp	r1, r3
 800337e:	db05      	blt.n	800338c <_printf_float+0x1c8>
 8003380:	6823      	ldr	r3, [r4, #0]
 8003382:	6121      	str	r1, [r4, #16]
 8003384:	07d8      	lsls	r0, r3, #31
 8003386:	d5ea      	bpl.n	800335e <_printf_float+0x19a>
 8003388:	1c4b      	adds	r3, r1, #1
 800338a:	e7e7      	b.n	800335c <_printf_float+0x198>
 800338c:	2900      	cmp	r1, #0
 800338e:	bfcc      	ite	gt
 8003390:	2201      	movgt	r2, #1
 8003392:	f1c1 0202 	rsble	r2, r1, #2
 8003396:	4413      	add	r3, r2
 8003398:	e7e0      	b.n	800335c <_printf_float+0x198>
 800339a:	6823      	ldr	r3, [r4, #0]
 800339c:	055a      	lsls	r2, r3, #21
 800339e:	d407      	bmi.n	80033b0 <_printf_float+0x1ec>
 80033a0:	6923      	ldr	r3, [r4, #16]
 80033a2:	4642      	mov	r2, r8
 80033a4:	4631      	mov	r1, r6
 80033a6:	4628      	mov	r0, r5
 80033a8:	47b8      	blx	r7
 80033aa:	3001      	adds	r0, #1
 80033ac:	d12b      	bne.n	8003406 <_printf_float+0x242>
 80033ae:	e764      	b.n	800327a <_printf_float+0xb6>
 80033b0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80033b4:	f240 80dd 	bls.w	8003572 <_printf_float+0x3ae>
 80033b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80033bc:	2200      	movs	r2, #0
 80033be:	2300      	movs	r3, #0
 80033c0:	f7fd faf2 	bl	80009a8 <__aeabi_dcmpeq>
 80033c4:	2800      	cmp	r0, #0
 80033c6:	d033      	beq.n	8003430 <_printf_float+0x26c>
 80033c8:	2301      	movs	r3, #1
 80033ca:	4631      	mov	r1, r6
 80033cc:	4628      	mov	r0, r5
 80033ce:	4a35      	ldr	r2, [pc, #212]	; (80034a4 <_printf_float+0x2e0>)
 80033d0:	47b8      	blx	r7
 80033d2:	3001      	adds	r0, #1
 80033d4:	f43f af51 	beq.w	800327a <_printf_float+0xb6>
 80033d8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80033dc:	429a      	cmp	r2, r3
 80033de:	db02      	blt.n	80033e6 <_printf_float+0x222>
 80033e0:	6823      	ldr	r3, [r4, #0]
 80033e2:	07d8      	lsls	r0, r3, #31
 80033e4:	d50f      	bpl.n	8003406 <_printf_float+0x242>
 80033e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80033ea:	4631      	mov	r1, r6
 80033ec:	4628      	mov	r0, r5
 80033ee:	47b8      	blx	r7
 80033f0:	3001      	adds	r0, #1
 80033f2:	f43f af42 	beq.w	800327a <_printf_float+0xb6>
 80033f6:	f04f 0800 	mov.w	r8, #0
 80033fa:	f104 091a 	add.w	r9, r4, #26
 80033fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003400:	3b01      	subs	r3, #1
 8003402:	4543      	cmp	r3, r8
 8003404:	dc09      	bgt.n	800341a <_printf_float+0x256>
 8003406:	6823      	ldr	r3, [r4, #0]
 8003408:	079b      	lsls	r3, r3, #30
 800340a:	f100 8104 	bmi.w	8003616 <_printf_float+0x452>
 800340e:	68e0      	ldr	r0, [r4, #12]
 8003410:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003412:	4298      	cmp	r0, r3
 8003414:	bfb8      	it	lt
 8003416:	4618      	movlt	r0, r3
 8003418:	e731      	b.n	800327e <_printf_float+0xba>
 800341a:	2301      	movs	r3, #1
 800341c:	464a      	mov	r2, r9
 800341e:	4631      	mov	r1, r6
 8003420:	4628      	mov	r0, r5
 8003422:	47b8      	blx	r7
 8003424:	3001      	adds	r0, #1
 8003426:	f43f af28 	beq.w	800327a <_printf_float+0xb6>
 800342a:	f108 0801 	add.w	r8, r8, #1
 800342e:	e7e6      	b.n	80033fe <_printf_float+0x23a>
 8003430:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003432:	2b00      	cmp	r3, #0
 8003434:	dc38      	bgt.n	80034a8 <_printf_float+0x2e4>
 8003436:	2301      	movs	r3, #1
 8003438:	4631      	mov	r1, r6
 800343a:	4628      	mov	r0, r5
 800343c:	4a19      	ldr	r2, [pc, #100]	; (80034a4 <_printf_float+0x2e0>)
 800343e:	47b8      	blx	r7
 8003440:	3001      	adds	r0, #1
 8003442:	f43f af1a 	beq.w	800327a <_printf_float+0xb6>
 8003446:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800344a:	4313      	orrs	r3, r2
 800344c:	d102      	bne.n	8003454 <_printf_float+0x290>
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	07d9      	lsls	r1, r3, #31
 8003452:	d5d8      	bpl.n	8003406 <_printf_float+0x242>
 8003454:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003458:	4631      	mov	r1, r6
 800345a:	4628      	mov	r0, r5
 800345c:	47b8      	blx	r7
 800345e:	3001      	adds	r0, #1
 8003460:	f43f af0b 	beq.w	800327a <_printf_float+0xb6>
 8003464:	f04f 0900 	mov.w	r9, #0
 8003468:	f104 0a1a 	add.w	sl, r4, #26
 800346c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800346e:	425b      	negs	r3, r3
 8003470:	454b      	cmp	r3, r9
 8003472:	dc01      	bgt.n	8003478 <_printf_float+0x2b4>
 8003474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003476:	e794      	b.n	80033a2 <_printf_float+0x1de>
 8003478:	2301      	movs	r3, #1
 800347a:	4652      	mov	r2, sl
 800347c:	4631      	mov	r1, r6
 800347e:	4628      	mov	r0, r5
 8003480:	47b8      	blx	r7
 8003482:	3001      	adds	r0, #1
 8003484:	f43f aef9 	beq.w	800327a <_printf_float+0xb6>
 8003488:	f109 0901 	add.w	r9, r9, #1
 800348c:	e7ee      	b.n	800346c <_printf_float+0x2a8>
 800348e:	bf00      	nop
 8003490:	7fefffff 	.word	0x7fefffff
 8003494:	08006356 	.word	0x08006356
 8003498:	0800635a 	.word	0x0800635a
 800349c:	0800635e 	.word	0x0800635e
 80034a0:	08006362 	.word	0x08006362
 80034a4:	08006366 	.word	0x08006366
 80034a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80034aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034ac:	429a      	cmp	r2, r3
 80034ae:	bfa8      	it	ge
 80034b0:	461a      	movge	r2, r3
 80034b2:	2a00      	cmp	r2, #0
 80034b4:	4691      	mov	r9, r2
 80034b6:	dc37      	bgt.n	8003528 <_printf_float+0x364>
 80034b8:	f04f 0b00 	mov.w	fp, #0
 80034bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80034c0:	f104 021a 	add.w	r2, r4, #26
 80034c4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80034c8:	ebaa 0309 	sub.w	r3, sl, r9
 80034cc:	455b      	cmp	r3, fp
 80034ce:	dc33      	bgt.n	8003538 <_printf_float+0x374>
 80034d0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80034d4:	429a      	cmp	r2, r3
 80034d6:	db3b      	blt.n	8003550 <_printf_float+0x38c>
 80034d8:	6823      	ldr	r3, [r4, #0]
 80034da:	07da      	lsls	r2, r3, #31
 80034dc:	d438      	bmi.n	8003550 <_printf_float+0x38c>
 80034de:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80034e2:	eba2 0903 	sub.w	r9, r2, r3
 80034e6:	eba2 020a 	sub.w	r2, r2, sl
 80034ea:	4591      	cmp	r9, r2
 80034ec:	bfa8      	it	ge
 80034ee:	4691      	movge	r9, r2
 80034f0:	f1b9 0f00 	cmp.w	r9, #0
 80034f4:	dc34      	bgt.n	8003560 <_printf_float+0x39c>
 80034f6:	f04f 0800 	mov.w	r8, #0
 80034fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80034fe:	f104 0a1a 	add.w	sl, r4, #26
 8003502:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	eba3 0309 	sub.w	r3, r3, r9
 800350c:	4543      	cmp	r3, r8
 800350e:	f77f af7a 	ble.w	8003406 <_printf_float+0x242>
 8003512:	2301      	movs	r3, #1
 8003514:	4652      	mov	r2, sl
 8003516:	4631      	mov	r1, r6
 8003518:	4628      	mov	r0, r5
 800351a:	47b8      	blx	r7
 800351c:	3001      	adds	r0, #1
 800351e:	f43f aeac 	beq.w	800327a <_printf_float+0xb6>
 8003522:	f108 0801 	add.w	r8, r8, #1
 8003526:	e7ec      	b.n	8003502 <_printf_float+0x33e>
 8003528:	4613      	mov	r3, r2
 800352a:	4631      	mov	r1, r6
 800352c:	4642      	mov	r2, r8
 800352e:	4628      	mov	r0, r5
 8003530:	47b8      	blx	r7
 8003532:	3001      	adds	r0, #1
 8003534:	d1c0      	bne.n	80034b8 <_printf_float+0x2f4>
 8003536:	e6a0      	b.n	800327a <_printf_float+0xb6>
 8003538:	2301      	movs	r3, #1
 800353a:	4631      	mov	r1, r6
 800353c:	4628      	mov	r0, r5
 800353e:	920b      	str	r2, [sp, #44]	; 0x2c
 8003540:	47b8      	blx	r7
 8003542:	3001      	adds	r0, #1
 8003544:	f43f ae99 	beq.w	800327a <_printf_float+0xb6>
 8003548:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800354a:	f10b 0b01 	add.w	fp, fp, #1
 800354e:	e7b9      	b.n	80034c4 <_printf_float+0x300>
 8003550:	4631      	mov	r1, r6
 8003552:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003556:	4628      	mov	r0, r5
 8003558:	47b8      	blx	r7
 800355a:	3001      	adds	r0, #1
 800355c:	d1bf      	bne.n	80034de <_printf_float+0x31a>
 800355e:	e68c      	b.n	800327a <_printf_float+0xb6>
 8003560:	464b      	mov	r3, r9
 8003562:	4631      	mov	r1, r6
 8003564:	4628      	mov	r0, r5
 8003566:	eb08 020a 	add.w	r2, r8, sl
 800356a:	47b8      	blx	r7
 800356c:	3001      	adds	r0, #1
 800356e:	d1c2      	bne.n	80034f6 <_printf_float+0x332>
 8003570:	e683      	b.n	800327a <_printf_float+0xb6>
 8003572:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003574:	2a01      	cmp	r2, #1
 8003576:	dc01      	bgt.n	800357c <_printf_float+0x3b8>
 8003578:	07db      	lsls	r3, r3, #31
 800357a:	d539      	bpl.n	80035f0 <_printf_float+0x42c>
 800357c:	2301      	movs	r3, #1
 800357e:	4642      	mov	r2, r8
 8003580:	4631      	mov	r1, r6
 8003582:	4628      	mov	r0, r5
 8003584:	47b8      	blx	r7
 8003586:	3001      	adds	r0, #1
 8003588:	f43f ae77 	beq.w	800327a <_printf_float+0xb6>
 800358c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003590:	4631      	mov	r1, r6
 8003592:	4628      	mov	r0, r5
 8003594:	47b8      	blx	r7
 8003596:	3001      	adds	r0, #1
 8003598:	f43f ae6f 	beq.w	800327a <_printf_float+0xb6>
 800359c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80035a0:	2200      	movs	r2, #0
 80035a2:	2300      	movs	r3, #0
 80035a4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80035a8:	f7fd f9fe 	bl	80009a8 <__aeabi_dcmpeq>
 80035ac:	b9d8      	cbnz	r0, 80035e6 <_printf_float+0x422>
 80035ae:	f109 33ff 	add.w	r3, r9, #4294967295
 80035b2:	f108 0201 	add.w	r2, r8, #1
 80035b6:	4631      	mov	r1, r6
 80035b8:	4628      	mov	r0, r5
 80035ba:	47b8      	blx	r7
 80035bc:	3001      	adds	r0, #1
 80035be:	d10e      	bne.n	80035de <_printf_float+0x41a>
 80035c0:	e65b      	b.n	800327a <_printf_float+0xb6>
 80035c2:	2301      	movs	r3, #1
 80035c4:	464a      	mov	r2, r9
 80035c6:	4631      	mov	r1, r6
 80035c8:	4628      	mov	r0, r5
 80035ca:	47b8      	blx	r7
 80035cc:	3001      	adds	r0, #1
 80035ce:	f43f ae54 	beq.w	800327a <_printf_float+0xb6>
 80035d2:	f108 0801 	add.w	r8, r8, #1
 80035d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035d8:	3b01      	subs	r3, #1
 80035da:	4543      	cmp	r3, r8
 80035dc:	dcf1      	bgt.n	80035c2 <_printf_float+0x3fe>
 80035de:	4653      	mov	r3, sl
 80035e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80035e4:	e6de      	b.n	80033a4 <_printf_float+0x1e0>
 80035e6:	f04f 0800 	mov.w	r8, #0
 80035ea:	f104 091a 	add.w	r9, r4, #26
 80035ee:	e7f2      	b.n	80035d6 <_printf_float+0x412>
 80035f0:	2301      	movs	r3, #1
 80035f2:	4642      	mov	r2, r8
 80035f4:	e7df      	b.n	80035b6 <_printf_float+0x3f2>
 80035f6:	2301      	movs	r3, #1
 80035f8:	464a      	mov	r2, r9
 80035fa:	4631      	mov	r1, r6
 80035fc:	4628      	mov	r0, r5
 80035fe:	47b8      	blx	r7
 8003600:	3001      	adds	r0, #1
 8003602:	f43f ae3a 	beq.w	800327a <_printf_float+0xb6>
 8003606:	f108 0801 	add.w	r8, r8, #1
 800360a:	68e3      	ldr	r3, [r4, #12]
 800360c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800360e:	1a5b      	subs	r3, r3, r1
 8003610:	4543      	cmp	r3, r8
 8003612:	dcf0      	bgt.n	80035f6 <_printf_float+0x432>
 8003614:	e6fb      	b.n	800340e <_printf_float+0x24a>
 8003616:	f04f 0800 	mov.w	r8, #0
 800361a:	f104 0919 	add.w	r9, r4, #25
 800361e:	e7f4      	b.n	800360a <_printf_float+0x446>

08003620 <_printf_common>:
 8003620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003624:	4616      	mov	r6, r2
 8003626:	4699      	mov	r9, r3
 8003628:	688a      	ldr	r2, [r1, #8]
 800362a:	690b      	ldr	r3, [r1, #16]
 800362c:	4607      	mov	r7, r0
 800362e:	4293      	cmp	r3, r2
 8003630:	bfb8      	it	lt
 8003632:	4613      	movlt	r3, r2
 8003634:	6033      	str	r3, [r6, #0]
 8003636:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800363a:	460c      	mov	r4, r1
 800363c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003640:	b10a      	cbz	r2, 8003646 <_printf_common+0x26>
 8003642:	3301      	adds	r3, #1
 8003644:	6033      	str	r3, [r6, #0]
 8003646:	6823      	ldr	r3, [r4, #0]
 8003648:	0699      	lsls	r1, r3, #26
 800364a:	bf42      	ittt	mi
 800364c:	6833      	ldrmi	r3, [r6, #0]
 800364e:	3302      	addmi	r3, #2
 8003650:	6033      	strmi	r3, [r6, #0]
 8003652:	6825      	ldr	r5, [r4, #0]
 8003654:	f015 0506 	ands.w	r5, r5, #6
 8003658:	d106      	bne.n	8003668 <_printf_common+0x48>
 800365a:	f104 0a19 	add.w	sl, r4, #25
 800365e:	68e3      	ldr	r3, [r4, #12]
 8003660:	6832      	ldr	r2, [r6, #0]
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	42ab      	cmp	r3, r5
 8003666:	dc2b      	bgt.n	80036c0 <_printf_common+0xa0>
 8003668:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800366c:	1e13      	subs	r3, r2, #0
 800366e:	6822      	ldr	r2, [r4, #0]
 8003670:	bf18      	it	ne
 8003672:	2301      	movne	r3, #1
 8003674:	0692      	lsls	r2, r2, #26
 8003676:	d430      	bmi.n	80036da <_printf_common+0xba>
 8003678:	4649      	mov	r1, r9
 800367a:	4638      	mov	r0, r7
 800367c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003680:	47c0      	blx	r8
 8003682:	3001      	adds	r0, #1
 8003684:	d023      	beq.n	80036ce <_printf_common+0xae>
 8003686:	6823      	ldr	r3, [r4, #0]
 8003688:	6922      	ldr	r2, [r4, #16]
 800368a:	f003 0306 	and.w	r3, r3, #6
 800368e:	2b04      	cmp	r3, #4
 8003690:	bf14      	ite	ne
 8003692:	2500      	movne	r5, #0
 8003694:	6833      	ldreq	r3, [r6, #0]
 8003696:	f04f 0600 	mov.w	r6, #0
 800369a:	bf08      	it	eq
 800369c:	68e5      	ldreq	r5, [r4, #12]
 800369e:	f104 041a 	add.w	r4, r4, #26
 80036a2:	bf08      	it	eq
 80036a4:	1aed      	subeq	r5, r5, r3
 80036a6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80036aa:	bf08      	it	eq
 80036ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036b0:	4293      	cmp	r3, r2
 80036b2:	bfc4      	itt	gt
 80036b4:	1a9b      	subgt	r3, r3, r2
 80036b6:	18ed      	addgt	r5, r5, r3
 80036b8:	42b5      	cmp	r5, r6
 80036ba:	d11a      	bne.n	80036f2 <_printf_common+0xd2>
 80036bc:	2000      	movs	r0, #0
 80036be:	e008      	b.n	80036d2 <_printf_common+0xb2>
 80036c0:	2301      	movs	r3, #1
 80036c2:	4652      	mov	r2, sl
 80036c4:	4649      	mov	r1, r9
 80036c6:	4638      	mov	r0, r7
 80036c8:	47c0      	blx	r8
 80036ca:	3001      	adds	r0, #1
 80036cc:	d103      	bne.n	80036d6 <_printf_common+0xb6>
 80036ce:	f04f 30ff 	mov.w	r0, #4294967295
 80036d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036d6:	3501      	adds	r5, #1
 80036d8:	e7c1      	b.n	800365e <_printf_common+0x3e>
 80036da:	2030      	movs	r0, #48	; 0x30
 80036dc:	18e1      	adds	r1, r4, r3
 80036de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036e8:	4422      	add	r2, r4
 80036ea:	3302      	adds	r3, #2
 80036ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036f0:	e7c2      	b.n	8003678 <_printf_common+0x58>
 80036f2:	2301      	movs	r3, #1
 80036f4:	4622      	mov	r2, r4
 80036f6:	4649      	mov	r1, r9
 80036f8:	4638      	mov	r0, r7
 80036fa:	47c0      	blx	r8
 80036fc:	3001      	adds	r0, #1
 80036fe:	d0e6      	beq.n	80036ce <_printf_common+0xae>
 8003700:	3601      	adds	r6, #1
 8003702:	e7d9      	b.n	80036b8 <_printf_common+0x98>

08003704 <_printf_i>:
 8003704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003708:	7e0f      	ldrb	r7, [r1, #24]
 800370a:	4691      	mov	r9, r2
 800370c:	2f78      	cmp	r7, #120	; 0x78
 800370e:	4680      	mov	r8, r0
 8003710:	460c      	mov	r4, r1
 8003712:	469a      	mov	sl, r3
 8003714:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003716:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800371a:	d807      	bhi.n	800372c <_printf_i+0x28>
 800371c:	2f62      	cmp	r7, #98	; 0x62
 800371e:	d80a      	bhi.n	8003736 <_printf_i+0x32>
 8003720:	2f00      	cmp	r7, #0
 8003722:	f000 80d5 	beq.w	80038d0 <_printf_i+0x1cc>
 8003726:	2f58      	cmp	r7, #88	; 0x58
 8003728:	f000 80c1 	beq.w	80038ae <_printf_i+0x1aa>
 800372c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003730:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003734:	e03a      	b.n	80037ac <_printf_i+0xa8>
 8003736:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800373a:	2b15      	cmp	r3, #21
 800373c:	d8f6      	bhi.n	800372c <_printf_i+0x28>
 800373e:	a101      	add	r1, pc, #4	; (adr r1, 8003744 <_printf_i+0x40>)
 8003740:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003744:	0800379d 	.word	0x0800379d
 8003748:	080037b1 	.word	0x080037b1
 800374c:	0800372d 	.word	0x0800372d
 8003750:	0800372d 	.word	0x0800372d
 8003754:	0800372d 	.word	0x0800372d
 8003758:	0800372d 	.word	0x0800372d
 800375c:	080037b1 	.word	0x080037b1
 8003760:	0800372d 	.word	0x0800372d
 8003764:	0800372d 	.word	0x0800372d
 8003768:	0800372d 	.word	0x0800372d
 800376c:	0800372d 	.word	0x0800372d
 8003770:	080038b7 	.word	0x080038b7
 8003774:	080037dd 	.word	0x080037dd
 8003778:	08003871 	.word	0x08003871
 800377c:	0800372d 	.word	0x0800372d
 8003780:	0800372d 	.word	0x0800372d
 8003784:	080038d9 	.word	0x080038d9
 8003788:	0800372d 	.word	0x0800372d
 800378c:	080037dd 	.word	0x080037dd
 8003790:	0800372d 	.word	0x0800372d
 8003794:	0800372d 	.word	0x0800372d
 8003798:	08003879 	.word	0x08003879
 800379c:	682b      	ldr	r3, [r5, #0]
 800379e:	1d1a      	adds	r2, r3, #4
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	602a      	str	r2, [r5, #0]
 80037a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0a0      	b.n	80038f2 <_printf_i+0x1ee>
 80037b0:	6820      	ldr	r0, [r4, #0]
 80037b2:	682b      	ldr	r3, [r5, #0]
 80037b4:	0607      	lsls	r7, r0, #24
 80037b6:	f103 0104 	add.w	r1, r3, #4
 80037ba:	6029      	str	r1, [r5, #0]
 80037bc:	d501      	bpl.n	80037c2 <_printf_i+0xbe>
 80037be:	681e      	ldr	r6, [r3, #0]
 80037c0:	e003      	b.n	80037ca <_printf_i+0xc6>
 80037c2:	0646      	lsls	r6, r0, #25
 80037c4:	d5fb      	bpl.n	80037be <_printf_i+0xba>
 80037c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80037ca:	2e00      	cmp	r6, #0
 80037cc:	da03      	bge.n	80037d6 <_printf_i+0xd2>
 80037ce:	232d      	movs	r3, #45	; 0x2d
 80037d0:	4276      	negs	r6, r6
 80037d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037d6:	230a      	movs	r3, #10
 80037d8:	4859      	ldr	r0, [pc, #356]	; (8003940 <_printf_i+0x23c>)
 80037da:	e012      	b.n	8003802 <_printf_i+0xfe>
 80037dc:	682b      	ldr	r3, [r5, #0]
 80037de:	6820      	ldr	r0, [r4, #0]
 80037e0:	1d19      	adds	r1, r3, #4
 80037e2:	6029      	str	r1, [r5, #0]
 80037e4:	0605      	lsls	r5, r0, #24
 80037e6:	d501      	bpl.n	80037ec <_printf_i+0xe8>
 80037e8:	681e      	ldr	r6, [r3, #0]
 80037ea:	e002      	b.n	80037f2 <_printf_i+0xee>
 80037ec:	0641      	lsls	r1, r0, #25
 80037ee:	d5fb      	bpl.n	80037e8 <_printf_i+0xe4>
 80037f0:	881e      	ldrh	r6, [r3, #0]
 80037f2:	2f6f      	cmp	r7, #111	; 0x6f
 80037f4:	bf0c      	ite	eq
 80037f6:	2308      	moveq	r3, #8
 80037f8:	230a      	movne	r3, #10
 80037fa:	4851      	ldr	r0, [pc, #324]	; (8003940 <_printf_i+0x23c>)
 80037fc:	2100      	movs	r1, #0
 80037fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003802:	6865      	ldr	r5, [r4, #4]
 8003804:	2d00      	cmp	r5, #0
 8003806:	bfa8      	it	ge
 8003808:	6821      	ldrge	r1, [r4, #0]
 800380a:	60a5      	str	r5, [r4, #8]
 800380c:	bfa4      	itt	ge
 800380e:	f021 0104 	bicge.w	r1, r1, #4
 8003812:	6021      	strge	r1, [r4, #0]
 8003814:	b90e      	cbnz	r6, 800381a <_printf_i+0x116>
 8003816:	2d00      	cmp	r5, #0
 8003818:	d04b      	beq.n	80038b2 <_printf_i+0x1ae>
 800381a:	4615      	mov	r5, r2
 800381c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003820:	fb03 6711 	mls	r7, r3, r1, r6
 8003824:	5dc7      	ldrb	r7, [r0, r7]
 8003826:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800382a:	4637      	mov	r7, r6
 800382c:	42bb      	cmp	r3, r7
 800382e:	460e      	mov	r6, r1
 8003830:	d9f4      	bls.n	800381c <_printf_i+0x118>
 8003832:	2b08      	cmp	r3, #8
 8003834:	d10b      	bne.n	800384e <_printf_i+0x14a>
 8003836:	6823      	ldr	r3, [r4, #0]
 8003838:	07de      	lsls	r6, r3, #31
 800383a:	d508      	bpl.n	800384e <_printf_i+0x14a>
 800383c:	6923      	ldr	r3, [r4, #16]
 800383e:	6861      	ldr	r1, [r4, #4]
 8003840:	4299      	cmp	r1, r3
 8003842:	bfde      	ittt	le
 8003844:	2330      	movle	r3, #48	; 0x30
 8003846:	f805 3c01 	strble.w	r3, [r5, #-1]
 800384a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800384e:	1b52      	subs	r2, r2, r5
 8003850:	6122      	str	r2, [r4, #16]
 8003852:	464b      	mov	r3, r9
 8003854:	4621      	mov	r1, r4
 8003856:	4640      	mov	r0, r8
 8003858:	f8cd a000 	str.w	sl, [sp]
 800385c:	aa03      	add	r2, sp, #12
 800385e:	f7ff fedf 	bl	8003620 <_printf_common>
 8003862:	3001      	adds	r0, #1
 8003864:	d14a      	bne.n	80038fc <_printf_i+0x1f8>
 8003866:	f04f 30ff 	mov.w	r0, #4294967295
 800386a:	b004      	add	sp, #16
 800386c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003870:	6823      	ldr	r3, [r4, #0]
 8003872:	f043 0320 	orr.w	r3, r3, #32
 8003876:	6023      	str	r3, [r4, #0]
 8003878:	2778      	movs	r7, #120	; 0x78
 800387a:	4832      	ldr	r0, [pc, #200]	; (8003944 <_printf_i+0x240>)
 800387c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003880:	6823      	ldr	r3, [r4, #0]
 8003882:	6829      	ldr	r1, [r5, #0]
 8003884:	061f      	lsls	r7, r3, #24
 8003886:	f851 6b04 	ldr.w	r6, [r1], #4
 800388a:	d402      	bmi.n	8003892 <_printf_i+0x18e>
 800388c:	065f      	lsls	r7, r3, #25
 800388e:	bf48      	it	mi
 8003890:	b2b6      	uxthmi	r6, r6
 8003892:	07df      	lsls	r7, r3, #31
 8003894:	bf48      	it	mi
 8003896:	f043 0320 	orrmi.w	r3, r3, #32
 800389a:	6029      	str	r1, [r5, #0]
 800389c:	bf48      	it	mi
 800389e:	6023      	strmi	r3, [r4, #0]
 80038a0:	b91e      	cbnz	r6, 80038aa <_printf_i+0x1a6>
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	f023 0320 	bic.w	r3, r3, #32
 80038a8:	6023      	str	r3, [r4, #0]
 80038aa:	2310      	movs	r3, #16
 80038ac:	e7a6      	b.n	80037fc <_printf_i+0xf8>
 80038ae:	4824      	ldr	r0, [pc, #144]	; (8003940 <_printf_i+0x23c>)
 80038b0:	e7e4      	b.n	800387c <_printf_i+0x178>
 80038b2:	4615      	mov	r5, r2
 80038b4:	e7bd      	b.n	8003832 <_printf_i+0x12e>
 80038b6:	682b      	ldr	r3, [r5, #0]
 80038b8:	6826      	ldr	r6, [r4, #0]
 80038ba:	1d18      	adds	r0, r3, #4
 80038bc:	6961      	ldr	r1, [r4, #20]
 80038be:	6028      	str	r0, [r5, #0]
 80038c0:	0635      	lsls	r5, r6, #24
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	d501      	bpl.n	80038ca <_printf_i+0x1c6>
 80038c6:	6019      	str	r1, [r3, #0]
 80038c8:	e002      	b.n	80038d0 <_printf_i+0x1cc>
 80038ca:	0670      	lsls	r0, r6, #25
 80038cc:	d5fb      	bpl.n	80038c6 <_printf_i+0x1c2>
 80038ce:	8019      	strh	r1, [r3, #0]
 80038d0:	2300      	movs	r3, #0
 80038d2:	4615      	mov	r5, r2
 80038d4:	6123      	str	r3, [r4, #16]
 80038d6:	e7bc      	b.n	8003852 <_printf_i+0x14e>
 80038d8:	682b      	ldr	r3, [r5, #0]
 80038da:	2100      	movs	r1, #0
 80038dc:	1d1a      	adds	r2, r3, #4
 80038de:	602a      	str	r2, [r5, #0]
 80038e0:	681d      	ldr	r5, [r3, #0]
 80038e2:	6862      	ldr	r2, [r4, #4]
 80038e4:	4628      	mov	r0, r5
 80038e6:	f000 f9c4 	bl	8003c72 <memchr>
 80038ea:	b108      	cbz	r0, 80038f0 <_printf_i+0x1ec>
 80038ec:	1b40      	subs	r0, r0, r5
 80038ee:	6060      	str	r0, [r4, #4]
 80038f0:	6863      	ldr	r3, [r4, #4]
 80038f2:	6123      	str	r3, [r4, #16]
 80038f4:	2300      	movs	r3, #0
 80038f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038fa:	e7aa      	b.n	8003852 <_printf_i+0x14e>
 80038fc:	462a      	mov	r2, r5
 80038fe:	4649      	mov	r1, r9
 8003900:	4640      	mov	r0, r8
 8003902:	6923      	ldr	r3, [r4, #16]
 8003904:	47d0      	blx	sl
 8003906:	3001      	adds	r0, #1
 8003908:	d0ad      	beq.n	8003866 <_printf_i+0x162>
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	079b      	lsls	r3, r3, #30
 800390e:	d413      	bmi.n	8003938 <_printf_i+0x234>
 8003910:	68e0      	ldr	r0, [r4, #12]
 8003912:	9b03      	ldr	r3, [sp, #12]
 8003914:	4298      	cmp	r0, r3
 8003916:	bfb8      	it	lt
 8003918:	4618      	movlt	r0, r3
 800391a:	e7a6      	b.n	800386a <_printf_i+0x166>
 800391c:	2301      	movs	r3, #1
 800391e:	4632      	mov	r2, r6
 8003920:	4649      	mov	r1, r9
 8003922:	4640      	mov	r0, r8
 8003924:	47d0      	blx	sl
 8003926:	3001      	adds	r0, #1
 8003928:	d09d      	beq.n	8003866 <_printf_i+0x162>
 800392a:	3501      	adds	r5, #1
 800392c:	68e3      	ldr	r3, [r4, #12]
 800392e:	9903      	ldr	r1, [sp, #12]
 8003930:	1a5b      	subs	r3, r3, r1
 8003932:	42ab      	cmp	r3, r5
 8003934:	dcf2      	bgt.n	800391c <_printf_i+0x218>
 8003936:	e7eb      	b.n	8003910 <_printf_i+0x20c>
 8003938:	2500      	movs	r5, #0
 800393a:	f104 0619 	add.w	r6, r4, #25
 800393e:	e7f5      	b.n	800392c <_printf_i+0x228>
 8003940:	08006368 	.word	0x08006368
 8003944:	08006379 	.word	0x08006379

08003948 <std>:
 8003948:	2300      	movs	r3, #0
 800394a:	b510      	push	{r4, lr}
 800394c:	4604      	mov	r4, r0
 800394e:	e9c0 3300 	strd	r3, r3, [r0]
 8003952:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003956:	6083      	str	r3, [r0, #8]
 8003958:	8181      	strh	r1, [r0, #12]
 800395a:	6643      	str	r3, [r0, #100]	; 0x64
 800395c:	81c2      	strh	r2, [r0, #14]
 800395e:	6183      	str	r3, [r0, #24]
 8003960:	4619      	mov	r1, r3
 8003962:	2208      	movs	r2, #8
 8003964:	305c      	adds	r0, #92	; 0x5c
 8003966:	f000 f904 	bl	8003b72 <memset>
 800396a:	4b0d      	ldr	r3, [pc, #52]	; (80039a0 <std+0x58>)
 800396c:	6224      	str	r4, [r4, #32]
 800396e:	6263      	str	r3, [r4, #36]	; 0x24
 8003970:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <std+0x5c>)
 8003972:	62a3      	str	r3, [r4, #40]	; 0x28
 8003974:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <std+0x60>)
 8003976:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003978:	4b0c      	ldr	r3, [pc, #48]	; (80039ac <std+0x64>)
 800397a:	6323      	str	r3, [r4, #48]	; 0x30
 800397c:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <std+0x68>)
 800397e:	429c      	cmp	r4, r3
 8003980:	d006      	beq.n	8003990 <std+0x48>
 8003982:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003986:	4294      	cmp	r4, r2
 8003988:	d002      	beq.n	8003990 <std+0x48>
 800398a:	33d0      	adds	r3, #208	; 0xd0
 800398c:	429c      	cmp	r4, r3
 800398e:	d105      	bne.n	800399c <std+0x54>
 8003990:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003998:	f000 b968 	b.w	8003c6c <__retarget_lock_init_recursive>
 800399c:	bd10      	pop	{r4, pc}
 800399e:	bf00      	nop
 80039a0:	08003acd 	.word	0x08003acd
 80039a4:	08003aef 	.word	0x08003aef
 80039a8:	08003b27 	.word	0x08003b27
 80039ac:	08003b4b 	.word	0x08003b4b
 80039b0:	200006dc 	.word	0x200006dc

080039b4 <stdio_exit_handler>:
 80039b4:	4a02      	ldr	r2, [pc, #8]	; (80039c0 <stdio_exit_handler+0xc>)
 80039b6:	4903      	ldr	r1, [pc, #12]	; (80039c4 <stdio_exit_handler+0x10>)
 80039b8:	4803      	ldr	r0, [pc, #12]	; (80039c8 <stdio_exit_handler+0x14>)
 80039ba:	f000 b869 	b.w	8003a90 <_fwalk_sglue>
 80039be:	bf00      	nop
 80039c0:	20000010 	.word	0x20000010
 80039c4:	08005375 	.word	0x08005375
 80039c8:	2000001c 	.word	0x2000001c

080039cc <cleanup_stdio>:
 80039cc:	6841      	ldr	r1, [r0, #4]
 80039ce:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <cleanup_stdio+0x34>)
 80039d0:	b510      	push	{r4, lr}
 80039d2:	4299      	cmp	r1, r3
 80039d4:	4604      	mov	r4, r0
 80039d6:	d001      	beq.n	80039dc <cleanup_stdio+0x10>
 80039d8:	f001 fccc 	bl	8005374 <_fflush_r>
 80039dc:	68a1      	ldr	r1, [r4, #8]
 80039de:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <cleanup_stdio+0x38>)
 80039e0:	4299      	cmp	r1, r3
 80039e2:	d002      	beq.n	80039ea <cleanup_stdio+0x1e>
 80039e4:	4620      	mov	r0, r4
 80039e6:	f001 fcc5 	bl	8005374 <_fflush_r>
 80039ea:	68e1      	ldr	r1, [r4, #12]
 80039ec:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <cleanup_stdio+0x3c>)
 80039ee:	4299      	cmp	r1, r3
 80039f0:	d004      	beq.n	80039fc <cleanup_stdio+0x30>
 80039f2:	4620      	mov	r0, r4
 80039f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039f8:	f001 bcbc 	b.w	8005374 <_fflush_r>
 80039fc:	bd10      	pop	{r4, pc}
 80039fe:	bf00      	nop
 8003a00:	200006dc 	.word	0x200006dc
 8003a04:	20000744 	.word	0x20000744
 8003a08:	200007ac 	.word	0x200007ac

08003a0c <global_stdio_init.part.0>:
 8003a0c:	b510      	push	{r4, lr}
 8003a0e:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <global_stdio_init.part.0+0x30>)
 8003a10:	4c0b      	ldr	r4, [pc, #44]	; (8003a40 <global_stdio_init.part.0+0x34>)
 8003a12:	4a0c      	ldr	r2, [pc, #48]	; (8003a44 <global_stdio_init.part.0+0x38>)
 8003a14:	4620      	mov	r0, r4
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	2104      	movs	r1, #4
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f7ff ff94 	bl	8003948 <std>
 8003a20:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003a24:	2201      	movs	r2, #1
 8003a26:	2109      	movs	r1, #9
 8003a28:	f7ff ff8e 	bl	8003948 <std>
 8003a2c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003a30:	2202      	movs	r2, #2
 8003a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a36:	2112      	movs	r1, #18
 8003a38:	f7ff bf86 	b.w	8003948 <std>
 8003a3c:	20000814 	.word	0x20000814
 8003a40:	200006dc 	.word	0x200006dc
 8003a44:	080039b5 	.word	0x080039b5

08003a48 <__sfp_lock_acquire>:
 8003a48:	4801      	ldr	r0, [pc, #4]	; (8003a50 <__sfp_lock_acquire+0x8>)
 8003a4a:	f000 b910 	b.w	8003c6e <__retarget_lock_acquire_recursive>
 8003a4e:	bf00      	nop
 8003a50:	2000081d 	.word	0x2000081d

08003a54 <__sfp_lock_release>:
 8003a54:	4801      	ldr	r0, [pc, #4]	; (8003a5c <__sfp_lock_release+0x8>)
 8003a56:	f000 b90b 	b.w	8003c70 <__retarget_lock_release_recursive>
 8003a5a:	bf00      	nop
 8003a5c:	2000081d 	.word	0x2000081d

08003a60 <__sinit>:
 8003a60:	b510      	push	{r4, lr}
 8003a62:	4604      	mov	r4, r0
 8003a64:	f7ff fff0 	bl	8003a48 <__sfp_lock_acquire>
 8003a68:	6a23      	ldr	r3, [r4, #32]
 8003a6a:	b11b      	cbz	r3, 8003a74 <__sinit+0x14>
 8003a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a70:	f7ff bff0 	b.w	8003a54 <__sfp_lock_release>
 8003a74:	4b04      	ldr	r3, [pc, #16]	; (8003a88 <__sinit+0x28>)
 8003a76:	6223      	str	r3, [r4, #32]
 8003a78:	4b04      	ldr	r3, [pc, #16]	; (8003a8c <__sinit+0x2c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1f5      	bne.n	8003a6c <__sinit+0xc>
 8003a80:	f7ff ffc4 	bl	8003a0c <global_stdio_init.part.0>
 8003a84:	e7f2      	b.n	8003a6c <__sinit+0xc>
 8003a86:	bf00      	nop
 8003a88:	080039cd 	.word	0x080039cd
 8003a8c:	20000814 	.word	0x20000814

08003a90 <_fwalk_sglue>:
 8003a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a94:	4607      	mov	r7, r0
 8003a96:	4688      	mov	r8, r1
 8003a98:	4614      	mov	r4, r2
 8003a9a:	2600      	movs	r6, #0
 8003a9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003aa0:	f1b9 0901 	subs.w	r9, r9, #1
 8003aa4:	d505      	bpl.n	8003ab2 <_fwalk_sglue+0x22>
 8003aa6:	6824      	ldr	r4, [r4, #0]
 8003aa8:	2c00      	cmp	r4, #0
 8003aaa:	d1f7      	bne.n	8003a9c <_fwalk_sglue+0xc>
 8003aac:	4630      	mov	r0, r6
 8003aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ab2:	89ab      	ldrh	r3, [r5, #12]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d907      	bls.n	8003ac8 <_fwalk_sglue+0x38>
 8003ab8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003abc:	3301      	adds	r3, #1
 8003abe:	d003      	beq.n	8003ac8 <_fwalk_sglue+0x38>
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	4638      	mov	r0, r7
 8003ac4:	47c0      	blx	r8
 8003ac6:	4306      	orrs	r6, r0
 8003ac8:	3568      	adds	r5, #104	; 0x68
 8003aca:	e7e9      	b.n	8003aa0 <_fwalk_sglue+0x10>

08003acc <__sread>:
 8003acc:	b510      	push	{r4, lr}
 8003ace:	460c      	mov	r4, r1
 8003ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ad4:	f000 f87c 	bl	8003bd0 <_read_r>
 8003ad8:	2800      	cmp	r0, #0
 8003ada:	bfab      	itete	ge
 8003adc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003ade:	89a3      	ldrhlt	r3, [r4, #12]
 8003ae0:	181b      	addge	r3, r3, r0
 8003ae2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ae6:	bfac      	ite	ge
 8003ae8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003aea:	81a3      	strhlt	r3, [r4, #12]
 8003aec:	bd10      	pop	{r4, pc}

08003aee <__swrite>:
 8003aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003af2:	461f      	mov	r7, r3
 8003af4:	898b      	ldrh	r3, [r1, #12]
 8003af6:	4605      	mov	r5, r0
 8003af8:	05db      	lsls	r3, r3, #23
 8003afa:	460c      	mov	r4, r1
 8003afc:	4616      	mov	r6, r2
 8003afe:	d505      	bpl.n	8003b0c <__swrite+0x1e>
 8003b00:	2302      	movs	r3, #2
 8003b02:	2200      	movs	r2, #0
 8003b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b08:	f000 f850 	bl	8003bac <_lseek_r>
 8003b0c:	89a3      	ldrh	r3, [r4, #12]
 8003b0e:	4632      	mov	r2, r6
 8003b10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b14:	81a3      	strh	r3, [r4, #12]
 8003b16:	4628      	mov	r0, r5
 8003b18:	463b      	mov	r3, r7
 8003b1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b22:	f000 b867 	b.w	8003bf4 <_write_r>

08003b26 <__sseek>:
 8003b26:	b510      	push	{r4, lr}
 8003b28:	460c      	mov	r4, r1
 8003b2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b2e:	f000 f83d 	bl	8003bac <_lseek_r>
 8003b32:	1c43      	adds	r3, r0, #1
 8003b34:	89a3      	ldrh	r3, [r4, #12]
 8003b36:	bf15      	itete	ne
 8003b38:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b42:	81a3      	strheq	r3, [r4, #12]
 8003b44:	bf18      	it	ne
 8003b46:	81a3      	strhne	r3, [r4, #12]
 8003b48:	bd10      	pop	{r4, pc}

08003b4a <__sclose>:
 8003b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b4e:	f000 b81d 	b.w	8003b8c <_close_r>

08003b52 <memcmp>:
 8003b52:	b510      	push	{r4, lr}
 8003b54:	3901      	subs	r1, #1
 8003b56:	4402      	add	r2, r0
 8003b58:	4290      	cmp	r0, r2
 8003b5a:	d101      	bne.n	8003b60 <memcmp+0xe>
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	e005      	b.n	8003b6c <memcmp+0x1a>
 8003b60:	7803      	ldrb	r3, [r0, #0]
 8003b62:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003b66:	42a3      	cmp	r3, r4
 8003b68:	d001      	beq.n	8003b6e <memcmp+0x1c>
 8003b6a:	1b18      	subs	r0, r3, r4
 8003b6c:	bd10      	pop	{r4, pc}
 8003b6e:	3001      	adds	r0, #1
 8003b70:	e7f2      	b.n	8003b58 <memcmp+0x6>

08003b72 <memset>:
 8003b72:	4603      	mov	r3, r0
 8003b74:	4402      	add	r2, r0
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d100      	bne.n	8003b7c <memset+0xa>
 8003b7a:	4770      	bx	lr
 8003b7c:	f803 1b01 	strb.w	r1, [r3], #1
 8003b80:	e7f9      	b.n	8003b76 <memset+0x4>
	...

08003b84 <_localeconv_r>:
 8003b84:	4800      	ldr	r0, [pc, #0]	; (8003b88 <_localeconv_r+0x4>)
 8003b86:	4770      	bx	lr
 8003b88:	2000015c 	.word	0x2000015c

08003b8c <_close_r>:
 8003b8c:	b538      	push	{r3, r4, r5, lr}
 8003b8e:	2300      	movs	r3, #0
 8003b90:	4d05      	ldr	r5, [pc, #20]	; (8003ba8 <_close_r+0x1c>)
 8003b92:	4604      	mov	r4, r0
 8003b94:	4608      	mov	r0, r1
 8003b96:	602b      	str	r3, [r5, #0]
 8003b98:	f7fd fde3 	bl	8001762 <_close>
 8003b9c:	1c43      	adds	r3, r0, #1
 8003b9e:	d102      	bne.n	8003ba6 <_close_r+0x1a>
 8003ba0:	682b      	ldr	r3, [r5, #0]
 8003ba2:	b103      	cbz	r3, 8003ba6 <_close_r+0x1a>
 8003ba4:	6023      	str	r3, [r4, #0]
 8003ba6:	bd38      	pop	{r3, r4, r5, pc}
 8003ba8:	20000818 	.word	0x20000818

08003bac <_lseek_r>:
 8003bac:	b538      	push	{r3, r4, r5, lr}
 8003bae:	4604      	mov	r4, r0
 8003bb0:	4608      	mov	r0, r1
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	4d05      	ldr	r5, [pc, #20]	; (8003bcc <_lseek_r+0x20>)
 8003bb8:	602a      	str	r2, [r5, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f7fd fdf5 	bl	80017aa <_lseek>
 8003bc0:	1c43      	adds	r3, r0, #1
 8003bc2:	d102      	bne.n	8003bca <_lseek_r+0x1e>
 8003bc4:	682b      	ldr	r3, [r5, #0]
 8003bc6:	b103      	cbz	r3, 8003bca <_lseek_r+0x1e>
 8003bc8:	6023      	str	r3, [r4, #0]
 8003bca:	bd38      	pop	{r3, r4, r5, pc}
 8003bcc:	20000818 	.word	0x20000818

08003bd0 <_read_r>:
 8003bd0:	b538      	push	{r3, r4, r5, lr}
 8003bd2:	4604      	mov	r4, r0
 8003bd4:	4608      	mov	r0, r1
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	2200      	movs	r2, #0
 8003bda:	4d05      	ldr	r5, [pc, #20]	; (8003bf0 <_read_r+0x20>)
 8003bdc:	602a      	str	r2, [r5, #0]
 8003bde:	461a      	mov	r2, r3
 8003be0:	f7fd fd86 	bl	80016f0 <_read>
 8003be4:	1c43      	adds	r3, r0, #1
 8003be6:	d102      	bne.n	8003bee <_read_r+0x1e>
 8003be8:	682b      	ldr	r3, [r5, #0]
 8003bea:	b103      	cbz	r3, 8003bee <_read_r+0x1e>
 8003bec:	6023      	str	r3, [r4, #0]
 8003bee:	bd38      	pop	{r3, r4, r5, pc}
 8003bf0:	20000818 	.word	0x20000818

08003bf4 <_write_r>:
 8003bf4:	b538      	push	{r3, r4, r5, lr}
 8003bf6:	4604      	mov	r4, r0
 8003bf8:	4608      	mov	r0, r1
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	4d05      	ldr	r5, [pc, #20]	; (8003c14 <_write_r+0x20>)
 8003c00:	602a      	str	r2, [r5, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	f7fd fd91 	bl	800172a <_write>
 8003c08:	1c43      	adds	r3, r0, #1
 8003c0a:	d102      	bne.n	8003c12 <_write_r+0x1e>
 8003c0c:	682b      	ldr	r3, [r5, #0]
 8003c0e:	b103      	cbz	r3, 8003c12 <_write_r+0x1e>
 8003c10:	6023      	str	r3, [r4, #0]
 8003c12:	bd38      	pop	{r3, r4, r5, pc}
 8003c14:	20000818 	.word	0x20000818

08003c18 <__errno>:
 8003c18:	4b01      	ldr	r3, [pc, #4]	; (8003c20 <__errno+0x8>)
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	20000068 	.word	0x20000068

08003c24 <__libc_init_array>:
 8003c24:	b570      	push	{r4, r5, r6, lr}
 8003c26:	2600      	movs	r6, #0
 8003c28:	4d0c      	ldr	r5, [pc, #48]	; (8003c5c <__libc_init_array+0x38>)
 8003c2a:	4c0d      	ldr	r4, [pc, #52]	; (8003c60 <__libc_init_array+0x3c>)
 8003c2c:	1b64      	subs	r4, r4, r5
 8003c2e:	10a4      	asrs	r4, r4, #2
 8003c30:	42a6      	cmp	r6, r4
 8003c32:	d109      	bne.n	8003c48 <__libc_init_array+0x24>
 8003c34:	f001 fee0 	bl	80059f8 <_init>
 8003c38:	2600      	movs	r6, #0
 8003c3a:	4d0a      	ldr	r5, [pc, #40]	; (8003c64 <__libc_init_array+0x40>)
 8003c3c:	4c0a      	ldr	r4, [pc, #40]	; (8003c68 <__libc_init_array+0x44>)
 8003c3e:	1b64      	subs	r4, r4, r5
 8003c40:	10a4      	asrs	r4, r4, #2
 8003c42:	42a6      	cmp	r6, r4
 8003c44:	d105      	bne.n	8003c52 <__libc_init_array+0x2e>
 8003c46:	bd70      	pop	{r4, r5, r6, pc}
 8003c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c4c:	4798      	blx	r3
 8003c4e:	3601      	adds	r6, #1
 8003c50:	e7ee      	b.n	8003c30 <__libc_init_array+0xc>
 8003c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c56:	4798      	blx	r3
 8003c58:	3601      	adds	r6, #1
 8003c5a:	e7f2      	b.n	8003c42 <__libc_init_array+0x1e>
 8003c5c:	080066c4 	.word	0x080066c4
 8003c60:	080066c4 	.word	0x080066c4
 8003c64:	080066c4 	.word	0x080066c4
 8003c68:	080066c8 	.word	0x080066c8

08003c6c <__retarget_lock_init_recursive>:
 8003c6c:	4770      	bx	lr

08003c6e <__retarget_lock_acquire_recursive>:
 8003c6e:	4770      	bx	lr

08003c70 <__retarget_lock_release_recursive>:
 8003c70:	4770      	bx	lr

08003c72 <memchr>:
 8003c72:	4603      	mov	r3, r0
 8003c74:	b510      	push	{r4, lr}
 8003c76:	b2c9      	uxtb	r1, r1
 8003c78:	4402      	add	r2, r0
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	d101      	bne.n	8003c84 <memchr+0x12>
 8003c80:	2000      	movs	r0, #0
 8003c82:	e003      	b.n	8003c8c <memchr+0x1a>
 8003c84:	7804      	ldrb	r4, [r0, #0]
 8003c86:	3301      	adds	r3, #1
 8003c88:	428c      	cmp	r4, r1
 8003c8a:	d1f6      	bne.n	8003c7a <memchr+0x8>
 8003c8c:	bd10      	pop	{r4, pc}

08003c8e <memcpy>:
 8003c8e:	440a      	add	r2, r1
 8003c90:	4291      	cmp	r1, r2
 8003c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c96:	d100      	bne.n	8003c9a <memcpy+0xc>
 8003c98:	4770      	bx	lr
 8003c9a:	b510      	push	{r4, lr}
 8003c9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ca0:	4291      	cmp	r1, r2
 8003ca2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ca6:	d1f9      	bne.n	8003c9c <memcpy+0xe>
 8003ca8:	bd10      	pop	{r4, pc}

08003caa <quorem>:
 8003caa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cae:	6903      	ldr	r3, [r0, #16]
 8003cb0:	690c      	ldr	r4, [r1, #16]
 8003cb2:	4607      	mov	r7, r0
 8003cb4:	42a3      	cmp	r3, r4
 8003cb6:	db7f      	blt.n	8003db8 <quorem+0x10e>
 8003cb8:	3c01      	subs	r4, #1
 8003cba:	f100 0514 	add.w	r5, r0, #20
 8003cbe:	f101 0814 	add.w	r8, r1, #20
 8003cc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003cc6:	9301      	str	r3, [sp, #4]
 8003cc8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003ccc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	fbb2 f6f3 	udiv	r6, r2, r3
 8003cd8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003cdc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003ce0:	d331      	bcc.n	8003d46 <quorem+0x9c>
 8003ce2:	f04f 0e00 	mov.w	lr, #0
 8003ce6:	4640      	mov	r0, r8
 8003ce8:	46ac      	mov	ip, r5
 8003cea:	46f2      	mov	sl, lr
 8003cec:	f850 2b04 	ldr.w	r2, [r0], #4
 8003cf0:	b293      	uxth	r3, r2
 8003cf2:	fb06 e303 	mla	r3, r6, r3, lr
 8003cf6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003cfa:	0c1a      	lsrs	r2, r3, #16
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	fb06 220e 	mla	r2, r6, lr, r2
 8003d02:	ebaa 0303 	sub.w	r3, sl, r3
 8003d06:	f8dc a000 	ldr.w	sl, [ip]
 8003d0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003d0e:	fa1f fa8a 	uxth.w	sl, sl
 8003d12:	4453      	add	r3, sl
 8003d14:	f8dc a000 	ldr.w	sl, [ip]
 8003d18:	b292      	uxth	r2, r2
 8003d1a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003d1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d28:	4581      	cmp	r9, r0
 8003d2a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003d2e:	f84c 3b04 	str.w	r3, [ip], #4
 8003d32:	d2db      	bcs.n	8003cec <quorem+0x42>
 8003d34:	f855 300b 	ldr.w	r3, [r5, fp]
 8003d38:	b92b      	cbnz	r3, 8003d46 <quorem+0x9c>
 8003d3a:	9b01      	ldr	r3, [sp, #4]
 8003d3c:	3b04      	subs	r3, #4
 8003d3e:	429d      	cmp	r5, r3
 8003d40:	461a      	mov	r2, r3
 8003d42:	d32d      	bcc.n	8003da0 <quorem+0xf6>
 8003d44:	613c      	str	r4, [r7, #16]
 8003d46:	4638      	mov	r0, r7
 8003d48:	f001 f994 	bl	8005074 <__mcmp>
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	db23      	blt.n	8003d98 <quorem+0xee>
 8003d50:	4629      	mov	r1, r5
 8003d52:	2000      	movs	r0, #0
 8003d54:	3601      	adds	r6, #1
 8003d56:	f858 2b04 	ldr.w	r2, [r8], #4
 8003d5a:	f8d1 c000 	ldr.w	ip, [r1]
 8003d5e:	b293      	uxth	r3, r2
 8003d60:	1ac3      	subs	r3, r0, r3
 8003d62:	0c12      	lsrs	r2, r2, #16
 8003d64:	fa1f f08c 	uxth.w	r0, ip
 8003d68:	4403      	add	r3, r0
 8003d6a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003d6e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d78:	45c1      	cmp	r9, r8
 8003d7a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003d7e:	f841 3b04 	str.w	r3, [r1], #4
 8003d82:	d2e8      	bcs.n	8003d56 <quorem+0xac>
 8003d84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003d88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003d8c:	b922      	cbnz	r2, 8003d98 <quorem+0xee>
 8003d8e:	3b04      	subs	r3, #4
 8003d90:	429d      	cmp	r5, r3
 8003d92:	461a      	mov	r2, r3
 8003d94:	d30a      	bcc.n	8003dac <quorem+0x102>
 8003d96:	613c      	str	r4, [r7, #16]
 8003d98:	4630      	mov	r0, r6
 8003d9a:	b003      	add	sp, #12
 8003d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003da0:	6812      	ldr	r2, [r2, #0]
 8003da2:	3b04      	subs	r3, #4
 8003da4:	2a00      	cmp	r2, #0
 8003da6:	d1cd      	bne.n	8003d44 <quorem+0x9a>
 8003da8:	3c01      	subs	r4, #1
 8003daa:	e7c8      	b.n	8003d3e <quorem+0x94>
 8003dac:	6812      	ldr	r2, [r2, #0]
 8003dae:	3b04      	subs	r3, #4
 8003db0:	2a00      	cmp	r2, #0
 8003db2:	d1f0      	bne.n	8003d96 <quorem+0xec>
 8003db4:	3c01      	subs	r4, #1
 8003db6:	e7eb      	b.n	8003d90 <quorem+0xe6>
 8003db8:	2000      	movs	r0, #0
 8003dba:	e7ee      	b.n	8003d9a <quorem+0xf0>
 8003dbc:	0000      	movs	r0, r0
	...

08003dc0 <_dtoa_r>:
 8003dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc4:	4616      	mov	r6, r2
 8003dc6:	461f      	mov	r7, r3
 8003dc8:	69c4      	ldr	r4, [r0, #28]
 8003dca:	b099      	sub	sp, #100	; 0x64
 8003dcc:	4605      	mov	r5, r0
 8003dce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003dd2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003dd6:	b974      	cbnz	r4, 8003df6 <_dtoa_r+0x36>
 8003dd8:	2010      	movs	r0, #16
 8003dda:	f000 fe1d 	bl	8004a18 <malloc>
 8003dde:	4602      	mov	r2, r0
 8003de0:	61e8      	str	r0, [r5, #28]
 8003de2:	b920      	cbnz	r0, 8003dee <_dtoa_r+0x2e>
 8003de4:	21ef      	movs	r1, #239	; 0xef
 8003de6:	4bac      	ldr	r3, [pc, #688]	; (8004098 <_dtoa_r+0x2d8>)
 8003de8:	48ac      	ldr	r0, [pc, #688]	; (800409c <_dtoa_r+0x2dc>)
 8003dea:	f001 fafb 	bl	80053e4 <__assert_func>
 8003dee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003df2:	6004      	str	r4, [r0, #0]
 8003df4:	60c4      	str	r4, [r0, #12]
 8003df6:	69eb      	ldr	r3, [r5, #28]
 8003df8:	6819      	ldr	r1, [r3, #0]
 8003dfa:	b151      	cbz	r1, 8003e12 <_dtoa_r+0x52>
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	2301      	movs	r3, #1
 8003e00:	4093      	lsls	r3, r2
 8003e02:	604a      	str	r2, [r1, #4]
 8003e04:	608b      	str	r3, [r1, #8]
 8003e06:	4628      	mov	r0, r5
 8003e08:	f000 fefa 	bl	8004c00 <_Bfree>
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	69eb      	ldr	r3, [r5, #28]
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	1e3b      	subs	r3, r7, #0
 8003e14:	bfaf      	iteee	ge
 8003e16:	2300      	movge	r3, #0
 8003e18:	2201      	movlt	r2, #1
 8003e1a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003e1e:	9305      	strlt	r3, [sp, #20]
 8003e20:	bfa8      	it	ge
 8003e22:	f8c8 3000 	strge.w	r3, [r8]
 8003e26:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003e2a:	4b9d      	ldr	r3, [pc, #628]	; (80040a0 <_dtoa_r+0x2e0>)
 8003e2c:	bfb8      	it	lt
 8003e2e:	f8c8 2000 	strlt.w	r2, [r8]
 8003e32:	ea33 0309 	bics.w	r3, r3, r9
 8003e36:	d119      	bne.n	8003e6c <_dtoa_r+0xac>
 8003e38:	f242 730f 	movw	r3, #9999	; 0x270f
 8003e3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003e44:	4333      	orrs	r3, r6
 8003e46:	f000 8589 	beq.w	800495c <_dtoa_r+0xb9c>
 8003e4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003e4c:	b953      	cbnz	r3, 8003e64 <_dtoa_r+0xa4>
 8003e4e:	4b95      	ldr	r3, [pc, #596]	; (80040a4 <_dtoa_r+0x2e4>)
 8003e50:	e023      	b.n	8003e9a <_dtoa_r+0xda>
 8003e52:	4b95      	ldr	r3, [pc, #596]	; (80040a8 <_dtoa_r+0x2e8>)
 8003e54:	9303      	str	r3, [sp, #12]
 8003e56:	3308      	adds	r3, #8
 8003e58:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	9803      	ldr	r0, [sp, #12]
 8003e5e:	b019      	add	sp, #100	; 0x64
 8003e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e64:	4b8f      	ldr	r3, [pc, #572]	; (80040a4 <_dtoa_r+0x2e4>)
 8003e66:	9303      	str	r3, [sp, #12]
 8003e68:	3303      	adds	r3, #3
 8003e6a:	e7f5      	b.n	8003e58 <_dtoa_r+0x98>
 8003e6c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003e70:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003e74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003e78:	2200      	movs	r2, #0
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f7fc fd94 	bl	80009a8 <__aeabi_dcmpeq>
 8003e80:	4680      	mov	r8, r0
 8003e82:	b160      	cbz	r0, 8003e9e <_dtoa_r+0xde>
 8003e84:	2301      	movs	r3, #1
 8003e86:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 8562 	beq.w	8004956 <_dtoa_r+0xb96>
 8003e92:	4b86      	ldr	r3, [pc, #536]	; (80040ac <_dtoa_r+0x2ec>)
 8003e94:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003e96:	6013      	str	r3, [r2, #0]
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	9303      	str	r3, [sp, #12]
 8003e9c:	e7de      	b.n	8003e5c <_dtoa_r+0x9c>
 8003e9e:	ab16      	add	r3, sp, #88	; 0x58
 8003ea0:	9301      	str	r3, [sp, #4]
 8003ea2:	ab17      	add	r3, sp, #92	; 0x5c
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	4628      	mov	r0, r5
 8003ea8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003eac:	f001 f98a 	bl	80051c4 <__d2b>
 8003eb0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003eb4:	4682      	mov	sl, r0
 8003eb6:	2c00      	cmp	r4, #0
 8003eb8:	d07e      	beq.n	8003fb8 <_dtoa_r+0x1f8>
 8003eba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003ebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ec0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003ec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ec8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003ecc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003ed0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	4b75      	ldr	r3, [pc, #468]	; (80040b0 <_dtoa_r+0x2f0>)
 8003eda:	f7fc f945 	bl	8000168 <__aeabi_dsub>
 8003ede:	a368      	add	r3, pc, #416	; (adr r3, 8004080 <_dtoa_r+0x2c0>)
 8003ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee4:	f7fc faf8 	bl	80004d8 <__aeabi_dmul>
 8003ee8:	a367      	add	r3, pc, #412	; (adr r3, 8004088 <_dtoa_r+0x2c8>)
 8003eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eee:	f7fc f93d 	bl	800016c <__adddf3>
 8003ef2:	4606      	mov	r6, r0
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	460f      	mov	r7, r1
 8003ef8:	f7fc fa84 	bl	8000404 <__aeabi_i2d>
 8003efc:	a364      	add	r3, pc, #400	; (adr r3, 8004090 <_dtoa_r+0x2d0>)
 8003efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f02:	f7fc fae9 	bl	80004d8 <__aeabi_dmul>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4630      	mov	r0, r6
 8003f0c:	4639      	mov	r1, r7
 8003f0e:	f7fc f92d 	bl	800016c <__adddf3>
 8003f12:	4606      	mov	r6, r0
 8003f14:	460f      	mov	r7, r1
 8003f16:	f7fc fd8f 	bl	8000a38 <__aeabi_d2iz>
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	4683      	mov	fp, r0
 8003f1e:	2300      	movs	r3, #0
 8003f20:	4630      	mov	r0, r6
 8003f22:	4639      	mov	r1, r7
 8003f24:	f7fc fd4a 	bl	80009bc <__aeabi_dcmplt>
 8003f28:	b148      	cbz	r0, 8003f3e <_dtoa_r+0x17e>
 8003f2a:	4658      	mov	r0, fp
 8003f2c:	f7fc fa6a 	bl	8000404 <__aeabi_i2d>
 8003f30:	4632      	mov	r2, r6
 8003f32:	463b      	mov	r3, r7
 8003f34:	f7fc fd38 	bl	80009a8 <__aeabi_dcmpeq>
 8003f38:	b908      	cbnz	r0, 8003f3e <_dtoa_r+0x17e>
 8003f3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003f3e:	f1bb 0f16 	cmp.w	fp, #22
 8003f42:	d857      	bhi.n	8003ff4 <_dtoa_r+0x234>
 8003f44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003f48:	4b5a      	ldr	r3, [pc, #360]	; (80040b4 <_dtoa_r+0x2f4>)
 8003f4a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f52:	f7fc fd33 	bl	80009bc <__aeabi_dcmplt>
 8003f56:	2800      	cmp	r0, #0
 8003f58:	d04e      	beq.n	8003ff8 <_dtoa_r+0x238>
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003f60:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f62:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003f64:	1b1b      	subs	r3, r3, r4
 8003f66:	1e5a      	subs	r2, r3, #1
 8003f68:	bf46      	itte	mi
 8003f6a:	f1c3 0901 	rsbmi	r9, r3, #1
 8003f6e:	2300      	movmi	r3, #0
 8003f70:	f04f 0900 	movpl.w	r9, #0
 8003f74:	9209      	str	r2, [sp, #36]	; 0x24
 8003f76:	bf48      	it	mi
 8003f78:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003f7a:	f1bb 0f00 	cmp.w	fp, #0
 8003f7e:	db3d      	blt.n	8003ffc <_dtoa_r+0x23c>
 8003f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f82:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8003f86:	445b      	add	r3, fp
 8003f88:	9309      	str	r3, [sp, #36]	; 0x24
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	930a      	str	r3, [sp, #40]	; 0x28
 8003f8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f90:	2b09      	cmp	r3, #9
 8003f92:	d867      	bhi.n	8004064 <_dtoa_r+0x2a4>
 8003f94:	2b05      	cmp	r3, #5
 8003f96:	bfc4      	itt	gt
 8003f98:	3b04      	subgt	r3, #4
 8003f9a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003f9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f9e:	bfc8      	it	gt
 8003fa0:	2400      	movgt	r4, #0
 8003fa2:	f1a3 0302 	sub.w	r3, r3, #2
 8003fa6:	bfd8      	it	le
 8003fa8:	2401      	movle	r4, #1
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	f200 8086 	bhi.w	80040bc <_dtoa_r+0x2fc>
 8003fb0:	e8df f003 	tbb	[pc, r3]
 8003fb4:	5637392c 	.word	0x5637392c
 8003fb8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003fbc:	441c      	add	r4, r3
 8003fbe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003fc2:	2b20      	cmp	r3, #32
 8003fc4:	bfc1      	itttt	gt
 8003fc6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003fca:	fa09 f903 	lslgt.w	r9, r9, r3
 8003fce:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8003fd2:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003fd6:	bfd6      	itet	le
 8003fd8:	f1c3 0320 	rsble	r3, r3, #32
 8003fdc:	ea49 0003 	orrgt.w	r0, r9, r3
 8003fe0:	fa06 f003 	lslle.w	r0, r6, r3
 8003fe4:	f7fc f9fe 	bl	80003e4 <__aeabi_ui2d>
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8003fee:	3c01      	subs	r4, #1
 8003ff0:	9213      	str	r2, [sp, #76]	; 0x4c
 8003ff2:	e76f      	b.n	8003ed4 <_dtoa_r+0x114>
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e7b3      	b.n	8003f60 <_dtoa_r+0x1a0>
 8003ff8:	900f      	str	r0, [sp, #60]	; 0x3c
 8003ffa:	e7b2      	b.n	8003f62 <_dtoa_r+0x1a2>
 8003ffc:	f1cb 0300 	rsb	r3, fp, #0
 8004000:	930a      	str	r3, [sp, #40]	; 0x28
 8004002:	2300      	movs	r3, #0
 8004004:	eba9 090b 	sub.w	r9, r9, fp
 8004008:	930e      	str	r3, [sp, #56]	; 0x38
 800400a:	e7c0      	b.n	8003f8e <_dtoa_r+0x1ce>
 800400c:	2300      	movs	r3, #0
 800400e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004010:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004012:	2b00      	cmp	r3, #0
 8004014:	dc55      	bgt.n	80040c2 <_dtoa_r+0x302>
 8004016:	2301      	movs	r3, #1
 8004018:	461a      	mov	r2, r3
 800401a:	9306      	str	r3, [sp, #24]
 800401c:	9308      	str	r3, [sp, #32]
 800401e:	9223      	str	r2, [sp, #140]	; 0x8c
 8004020:	e00b      	b.n	800403a <_dtoa_r+0x27a>
 8004022:	2301      	movs	r3, #1
 8004024:	e7f3      	b.n	800400e <_dtoa_r+0x24e>
 8004026:	2300      	movs	r3, #0
 8004028:	930b      	str	r3, [sp, #44]	; 0x2c
 800402a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800402c:	445b      	add	r3, fp
 800402e:	9306      	str	r3, [sp, #24]
 8004030:	3301      	adds	r3, #1
 8004032:	2b01      	cmp	r3, #1
 8004034:	9308      	str	r3, [sp, #32]
 8004036:	bfb8      	it	lt
 8004038:	2301      	movlt	r3, #1
 800403a:	2100      	movs	r1, #0
 800403c:	2204      	movs	r2, #4
 800403e:	69e8      	ldr	r0, [r5, #28]
 8004040:	f102 0614 	add.w	r6, r2, #20
 8004044:	429e      	cmp	r6, r3
 8004046:	d940      	bls.n	80040ca <_dtoa_r+0x30a>
 8004048:	6041      	str	r1, [r0, #4]
 800404a:	4628      	mov	r0, r5
 800404c:	f000 fd98 	bl	8004b80 <_Balloc>
 8004050:	9003      	str	r0, [sp, #12]
 8004052:	2800      	cmp	r0, #0
 8004054:	d13c      	bne.n	80040d0 <_dtoa_r+0x310>
 8004056:	4602      	mov	r2, r0
 8004058:	f240 11af 	movw	r1, #431	; 0x1af
 800405c:	4b16      	ldr	r3, [pc, #88]	; (80040b8 <_dtoa_r+0x2f8>)
 800405e:	e6c3      	b.n	8003de8 <_dtoa_r+0x28>
 8004060:	2301      	movs	r3, #1
 8004062:	e7e1      	b.n	8004028 <_dtoa_r+0x268>
 8004064:	2401      	movs	r4, #1
 8004066:	2300      	movs	r3, #0
 8004068:	940b      	str	r4, [sp, #44]	; 0x2c
 800406a:	9322      	str	r3, [sp, #136]	; 0x88
 800406c:	f04f 33ff 	mov.w	r3, #4294967295
 8004070:	2200      	movs	r2, #0
 8004072:	9306      	str	r3, [sp, #24]
 8004074:	9308      	str	r3, [sp, #32]
 8004076:	2312      	movs	r3, #18
 8004078:	e7d1      	b.n	800401e <_dtoa_r+0x25e>
 800407a:	bf00      	nop
 800407c:	f3af 8000 	nop.w
 8004080:	636f4361 	.word	0x636f4361
 8004084:	3fd287a7 	.word	0x3fd287a7
 8004088:	8b60c8b3 	.word	0x8b60c8b3
 800408c:	3fc68a28 	.word	0x3fc68a28
 8004090:	509f79fb 	.word	0x509f79fb
 8004094:	3fd34413 	.word	0x3fd34413
 8004098:	08006397 	.word	0x08006397
 800409c:	080063ae 	.word	0x080063ae
 80040a0:	7ff00000 	.word	0x7ff00000
 80040a4:	08006393 	.word	0x08006393
 80040a8:	0800638a 	.word	0x0800638a
 80040ac:	08006367 	.word	0x08006367
 80040b0:	3ff80000 	.word	0x3ff80000
 80040b4:	08006498 	.word	0x08006498
 80040b8:	08006406 	.word	0x08006406
 80040bc:	2301      	movs	r3, #1
 80040be:	930b      	str	r3, [sp, #44]	; 0x2c
 80040c0:	e7d4      	b.n	800406c <_dtoa_r+0x2ac>
 80040c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80040c4:	9306      	str	r3, [sp, #24]
 80040c6:	9308      	str	r3, [sp, #32]
 80040c8:	e7b7      	b.n	800403a <_dtoa_r+0x27a>
 80040ca:	3101      	adds	r1, #1
 80040cc:	0052      	lsls	r2, r2, #1
 80040ce:	e7b7      	b.n	8004040 <_dtoa_r+0x280>
 80040d0:	69eb      	ldr	r3, [r5, #28]
 80040d2:	9a03      	ldr	r2, [sp, #12]
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	9b08      	ldr	r3, [sp, #32]
 80040d8:	2b0e      	cmp	r3, #14
 80040da:	f200 80a8 	bhi.w	800422e <_dtoa_r+0x46e>
 80040de:	2c00      	cmp	r4, #0
 80040e0:	f000 80a5 	beq.w	800422e <_dtoa_r+0x46e>
 80040e4:	f1bb 0f00 	cmp.w	fp, #0
 80040e8:	dd34      	ble.n	8004154 <_dtoa_r+0x394>
 80040ea:	4b9a      	ldr	r3, [pc, #616]	; (8004354 <_dtoa_r+0x594>)
 80040ec:	f00b 020f 	and.w	r2, fp, #15
 80040f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80040f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80040f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80040fc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004100:	ea4f 142b 	mov.w	r4, fp, asr #4
 8004104:	d016      	beq.n	8004134 <_dtoa_r+0x374>
 8004106:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800410a:	4b93      	ldr	r3, [pc, #588]	; (8004358 <_dtoa_r+0x598>)
 800410c:	2703      	movs	r7, #3
 800410e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004112:	f7fc fb0b 	bl	800072c <__aeabi_ddiv>
 8004116:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800411a:	f004 040f 	and.w	r4, r4, #15
 800411e:	4e8e      	ldr	r6, [pc, #568]	; (8004358 <_dtoa_r+0x598>)
 8004120:	b954      	cbnz	r4, 8004138 <_dtoa_r+0x378>
 8004122:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004126:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800412a:	f7fc faff 	bl	800072c <__aeabi_ddiv>
 800412e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004132:	e029      	b.n	8004188 <_dtoa_r+0x3c8>
 8004134:	2702      	movs	r7, #2
 8004136:	e7f2      	b.n	800411e <_dtoa_r+0x35e>
 8004138:	07e1      	lsls	r1, r4, #31
 800413a:	d508      	bpl.n	800414e <_dtoa_r+0x38e>
 800413c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004140:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004144:	f7fc f9c8 	bl	80004d8 <__aeabi_dmul>
 8004148:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800414c:	3701      	adds	r7, #1
 800414e:	1064      	asrs	r4, r4, #1
 8004150:	3608      	adds	r6, #8
 8004152:	e7e5      	b.n	8004120 <_dtoa_r+0x360>
 8004154:	f000 80a5 	beq.w	80042a2 <_dtoa_r+0x4e2>
 8004158:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800415c:	f1cb 0400 	rsb	r4, fp, #0
 8004160:	4b7c      	ldr	r3, [pc, #496]	; (8004354 <_dtoa_r+0x594>)
 8004162:	f004 020f 	and.w	r2, r4, #15
 8004166:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800416a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416e:	f7fc f9b3 	bl	80004d8 <__aeabi_dmul>
 8004172:	2702      	movs	r7, #2
 8004174:	2300      	movs	r3, #0
 8004176:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800417a:	4e77      	ldr	r6, [pc, #476]	; (8004358 <_dtoa_r+0x598>)
 800417c:	1124      	asrs	r4, r4, #4
 800417e:	2c00      	cmp	r4, #0
 8004180:	f040 8084 	bne.w	800428c <_dtoa_r+0x4cc>
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1d2      	bne.n	800412e <_dtoa_r+0x36e>
 8004188:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800418c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004190:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 8087 	beq.w	80042a6 <_dtoa_r+0x4e6>
 8004198:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800419c:	2200      	movs	r2, #0
 800419e:	4b6f      	ldr	r3, [pc, #444]	; (800435c <_dtoa_r+0x59c>)
 80041a0:	f7fc fc0c 	bl	80009bc <__aeabi_dcmplt>
 80041a4:	2800      	cmp	r0, #0
 80041a6:	d07e      	beq.n	80042a6 <_dtoa_r+0x4e6>
 80041a8:	9b08      	ldr	r3, [sp, #32]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d07b      	beq.n	80042a6 <_dtoa_r+0x4e6>
 80041ae:	9b06      	ldr	r3, [sp, #24]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	dd38      	ble.n	8004226 <_dtoa_r+0x466>
 80041b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80041b8:	2200      	movs	r2, #0
 80041ba:	4b69      	ldr	r3, [pc, #420]	; (8004360 <_dtoa_r+0x5a0>)
 80041bc:	f7fc f98c 	bl	80004d8 <__aeabi_dmul>
 80041c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80041c4:	9c06      	ldr	r4, [sp, #24]
 80041c6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80041ca:	3701      	adds	r7, #1
 80041cc:	4638      	mov	r0, r7
 80041ce:	f7fc f919 	bl	8000404 <__aeabi_i2d>
 80041d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041d6:	f7fc f97f 	bl	80004d8 <__aeabi_dmul>
 80041da:	2200      	movs	r2, #0
 80041dc:	4b61      	ldr	r3, [pc, #388]	; (8004364 <_dtoa_r+0x5a4>)
 80041de:	f7fb ffc5 	bl	800016c <__adddf3>
 80041e2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80041e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80041ea:	9611      	str	r6, [sp, #68]	; 0x44
 80041ec:	2c00      	cmp	r4, #0
 80041ee:	d15d      	bne.n	80042ac <_dtoa_r+0x4ec>
 80041f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041f4:	2200      	movs	r2, #0
 80041f6:	4b5c      	ldr	r3, [pc, #368]	; (8004368 <_dtoa_r+0x5a8>)
 80041f8:	f7fb ffb6 	bl	8000168 <__aeabi_dsub>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004204:	4633      	mov	r3, r6
 8004206:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004208:	f7fc fbf6 	bl	80009f8 <__aeabi_dcmpgt>
 800420c:	2800      	cmp	r0, #0
 800420e:	f040 8295 	bne.w	800473c <_dtoa_r+0x97c>
 8004212:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004216:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004218:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800421c:	f7fc fbce 	bl	80009bc <__aeabi_dcmplt>
 8004220:	2800      	cmp	r0, #0
 8004222:	f040 8289 	bne.w	8004738 <_dtoa_r+0x978>
 8004226:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800422a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800422e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004230:	2b00      	cmp	r3, #0
 8004232:	f2c0 8151 	blt.w	80044d8 <_dtoa_r+0x718>
 8004236:	f1bb 0f0e 	cmp.w	fp, #14
 800423a:	f300 814d 	bgt.w	80044d8 <_dtoa_r+0x718>
 800423e:	4b45      	ldr	r3, [pc, #276]	; (8004354 <_dtoa_r+0x594>)
 8004240:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004244:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004248:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800424c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800424e:	2b00      	cmp	r3, #0
 8004250:	f280 80da 	bge.w	8004408 <_dtoa_r+0x648>
 8004254:	9b08      	ldr	r3, [sp, #32]
 8004256:	2b00      	cmp	r3, #0
 8004258:	f300 80d6 	bgt.w	8004408 <_dtoa_r+0x648>
 800425c:	f040 826b 	bne.w	8004736 <_dtoa_r+0x976>
 8004260:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004264:	2200      	movs	r2, #0
 8004266:	4b40      	ldr	r3, [pc, #256]	; (8004368 <_dtoa_r+0x5a8>)
 8004268:	f7fc f936 	bl	80004d8 <__aeabi_dmul>
 800426c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004270:	f7fc fbb8 	bl	80009e4 <__aeabi_dcmpge>
 8004274:	9c08      	ldr	r4, [sp, #32]
 8004276:	4626      	mov	r6, r4
 8004278:	2800      	cmp	r0, #0
 800427a:	f040 8241 	bne.w	8004700 <_dtoa_r+0x940>
 800427e:	2331      	movs	r3, #49	; 0x31
 8004280:	9f03      	ldr	r7, [sp, #12]
 8004282:	f10b 0b01 	add.w	fp, fp, #1
 8004286:	f807 3b01 	strb.w	r3, [r7], #1
 800428a:	e23d      	b.n	8004708 <_dtoa_r+0x948>
 800428c:	07e2      	lsls	r2, r4, #31
 800428e:	d505      	bpl.n	800429c <_dtoa_r+0x4dc>
 8004290:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004294:	f7fc f920 	bl	80004d8 <__aeabi_dmul>
 8004298:	2301      	movs	r3, #1
 800429a:	3701      	adds	r7, #1
 800429c:	1064      	asrs	r4, r4, #1
 800429e:	3608      	adds	r6, #8
 80042a0:	e76d      	b.n	800417e <_dtoa_r+0x3be>
 80042a2:	2702      	movs	r7, #2
 80042a4:	e770      	b.n	8004188 <_dtoa_r+0x3c8>
 80042a6:	46d8      	mov	r8, fp
 80042a8:	9c08      	ldr	r4, [sp, #32]
 80042aa:	e78f      	b.n	80041cc <_dtoa_r+0x40c>
 80042ac:	9903      	ldr	r1, [sp, #12]
 80042ae:	4b29      	ldr	r3, [pc, #164]	; (8004354 <_dtoa_r+0x594>)
 80042b0:	4421      	add	r1, r4
 80042b2:	9112      	str	r1, [sp, #72]	; 0x48
 80042b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80042b6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80042ba:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80042be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80042c2:	2900      	cmp	r1, #0
 80042c4:	d054      	beq.n	8004370 <_dtoa_r+0x5b0>
 80042c6:	2000      	movs	r0, #0
 80042c8:	4928      	ldr	r1, [pc, #160]	; (800436c <_dtoa_r+0x5ac>)
 80042ca:	f7fc fa2f 	bl	800072c <__aeabi_ddiv>
 80042ce:	463b      	mov	r3, r7
 80042d0:	4632      	mov	r2, r6
 80042d2:	f7fb ff49 	bl	8000168 <__aeabi_dsub>
 80042d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80042da:	9f03      	ldr	r7, [sp, #12]
 80042dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042e0:	f7fc fbaa 	bl	8000a38 <__aeabi_d2iz>
 80042e4:	4604      	mov	r4, r0
 80042e6:	f7fc f88d 	bl	8000404 <__aeabi_i2d>
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042f2:	f7fb ff39 	bl	8000168 <__aeabi_dsub>
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	3430      	adds	r4, #48	; 0x30
 80042fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004300:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004304:	f807 4b01 	strb.w	r4, [r7], #1
 8004308:	f7fc fb58 	bl	80009bc <__aeabi_dcmplt>
 800430c:	2800      	cmp	r0, #0
 800430e:	d173      	bne.n	80043f8 <_dtoa_r+0x638>
 8004310:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004314:	2000      	movs	r0, #0
 8004316:	4911      	ldr	r1, [pc, #68]	; (800435c <_dtoa_r+0x59c>)
 8004318:	f7fb ff26 	bl	8000168 <__aeabi_dsub>
 800431c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004320:	f7fc fb4c 	bl	80009bc <__aeabi_dcmplt>
 8004324:	2800      	cmp	r0, #0
 8004326:	f040 80b6 	bne.w	8004496 <_dtoa_r+0x6d6>
 800432a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800432c:	429f      	cmp	r7, r3
 800432e:	f43f af7a 	beq.w	8004226 <_dtoa_r+0x466>
 8004332:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004336:	2200      	movs	r2, #0
 8004338:	4b09      	ldr	r3, [pc, #36]	; (8004360 <_dtoa_r+0x5a0>)
 800433a:	f7fc f8cd 	bl	80004d8 <__aeabi_dmul>
 800433e:	2200      	movs	r2, #0
 8004340:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004344:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004348:	4b05      	ldr	r3, [pc, #20]	; (8004360 <_dtoa_r+0x5a0>)
 800434a:	f7fc f8c5 	bl	80004d8 <__aeabi_dmul>
 800434e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004352:	e7c3      	b.n	80042dc <_dtoa_r+0x51c>
 8004354:	08006498 	.word	0x08006498
 8004358:	08006470 	.word	0x08006470
 800435c:	3ff00000 	.word	0x3ff00000
 8004360:	40240000 	.word	0x40240000
 8004364:	401c0000 	.word	0x401c0000
 8004368:	40140000 	.word	0x40140000
 800436c:	3fe00000 	.word	0x3fe00000
 8004370:	4630      	mov	r0, r6
 8004372:	4639      	mov	r1, r7
 8004374:	f7fc f8b0 	bl	80004d8 <__aeabi_dmul>
 8004378:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800437a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800437e:	9c03      	ldr	r4, [sp, #12]
 8004380:	9314      	str	r3, [sp, #80]	; 0x50
 8004382:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004386:	f7fc fb57 	bl	8000a38 <__aeabi_d2iz>
 800438a:	9015      	str	r0, [sp, #84]	; 0x54
 800438c:	f7fc f83a 	bl	8000404 <__aeabi_i2d>
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004398:	f7fb fee6 	bl	8000168 <__aeabi_dsub>
 800439c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800439e:	4606      	mov	r6, r0
 80043a0:	3330      	adds	r3, #48	; 0x30
 80043a2:	f804 3b01 	strb.w	r3, [r4], #1
 80043a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80043a8:	460f      	mov	r7, r1
 80043aa:	429c      	cmp	r4, r3
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	d124      	bne.n	80043fc <_dtoa_r+0x63c>
 80043b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80043b6:	4baf      	ldr	r3, [pc, #700]	; (8004674 <_dtoa_r+0x8b4>)
 80043b8:	f7fb fed8 	bl	800016c <__adddf3>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4630      	mov	r0, r6
 80043c2:	4639      	mov	r1, r7
 80043c4:	f7fc fb18 	bl	80009f8 <__aeabi_dcmpgt>
 80043c8:	2800      	cmp	r0, #0
 80043ca:	d163      	bne.n	8004494 <_dtoa_r+0x6d4>
 80043cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80043d0:	2000      	movs	r0, #0
 80043d2:	49a8      	ldr	r1, [pc, #672]	; (8004674 <_dtoa_r+0x8b4>)
 80043d4:	f7fb fec8 	bl	8000168 <__aeabi_dsub>
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	4630      	mov	r0, r6
 80043de:	4639      	mov	r1, r7
 80043e0:	f7fc faec 	bl	80009bc <__aeabi_dcmplt>
 80043e4:	2800      	cmp	r0, #0
 80043e6:	f43f af1e 	beq.w	8004226 <_dtoa_r+0x466>
 80043ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80043ec:	1e7b      	subs	r3, r7, #1
 80043ee:	9314      	str	r3, [sp, #80]	; 0x50
 80043f0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80043f4:	2b30      	cmp	r3, #48	; 0x30
 80043f6:	d0f8      	beq.n	80043ea <_dtoa_r+0x62a>
 80043f8:	46c3      	mov	fp, r8
 80043fa:	e03b      	b.n	8004474 <_dtoa_r+0x6b4>
 80043fc:	4b9e      	ldr	r3, [pc, #632]	; (8004678 <_dtoa_r+0x8b8>)
 80043fe:	f7fc f86b 	bl	80004d8 <__aeabi_dmul>
 8004402:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004406:	e7bc      	b.n	8004382 <_dtoa_r+0x5c2>
 8004408:	9f03      	ldr	r7, [sp, #12]
 800440a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800440e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004412:	4640      	mov	r0, r8
 8004414:	4649      	mov	r1, r9
 8004416:	f7fc f989 	bl	800072c <__aeabi_ddiv>
 800441a:	f7fc fb0d 	bl	8000a38 <__aeabi_d2iz>
 800441e:	4604      	mov	r4, r0
 8004420:	f7fb fff0 	bl	8000404 <__aeabi_i2d>
 8004424:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004428:	f7fc f856 	bl	80004d8 <__aeabi_dmul>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4640      	mov	r0, r8
 8004432:	4649      	mov	r1, r9
 8004434:	f7fb fe98 	bl	8000168 <__aeabi_dsub>
 8004438:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800443c:	f807 6b01 	strb.w	r6, [r7], #1
 8004440:	9e03      	ldr	r6, [sp, #12]
 8004442:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004446:	1bbe      	subs	r6, r7, r6
 8004448:	45b4      	cmp	ip, r6
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	d136      	bne.n	80044be <_dtoa_r+0x6fe>
 8004450:	f7fb fe8c 	bl	800016c <__adddf3>
 8004454:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004458:	4680      	mov	r8, r0
 800445a:	4689      	mov	r9, r1
 800445c:	f7fc facc 	bl	80009f8 <__aeabi_dcmpgt>
 8004460:	bb58      	cbnz	r0, 80044ba <_dtoa_r+0x6fa>
 8004462:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004466:	4640      	mov	r0, r8
 8004468:	4649      	mov	r1, r9
 800446a:	f7fc fa9d 	bl	80009a8 <__aeabi_dcmpeq>
 800446e:	b108      	cbz	r0, 8004474 <_dtoa_r+0x6b4>
 8004470:	07e3      	lsls	r3, r4, #31
 8004472:	d422      	bmi.n	80044ba <_dtoa_r+0x6fa>
 8004474:	4651      	mov	r1, sl
 8004476:	4628      	mov	r0, r5
 8004478:	f000 fbc2 	bl	8004c00 <_Bfree>
 800447c:	2300      	movs	r3, #0
 800447e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004480:	703b      	strb	r3, [r7, #0]
 8004482:	f10b 0301 	add.w	r3, fp, #1
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800448a:	2b00      	cmp	r3, #0
 800448c:	f43f ace6 	beq.w	8003e5c <_dtoa_r+0x9c>
 8004490:	601f      	str	r7, [r3, #0]
 8004492:	e4e3      	b.n	8003e5c <_dtoa_r+0x9c>
 8004494:	4627      	mov	r7, r4
 8004496:	463b      	mov	r3, r7
 8004498:	461f      	mov	r7, r3
 800449a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800449e:	2a39      	cmp	r2, #57	; 0x39
 80044a0:	d107      	bne.n	80044b2 <_dtoa_r+0x6f2>
 80044a2:	9a03      	ldr	r2, [sp, #12]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d1f7      	bne.n	8004498 <_dtoa_r+0x6d8>
 80044a8:	2230      	movs	r2, #48	; 0x30
 80044aa:	9903      	ldr	r1, [sp, #12]
 80044ac:	f108 0801 	add.w	r8, r8, #1
 80044b0:	700a      	strb	r2, [r1, #0]
 80044b2:	781a      	ldrb	r2, [r3, #0]
 80044b4:	3201      	adds	r2, #1
 80044b6:	701a      	strb	r2, [r3, #0]
 80044b8:	e79e      	b.n	80043f8 <_dtoa_r+0x638>
 80044ba:	46d8      	mov	r8, fp
 80044bc:	e7eb      	b.n	8004496 <_dtoa_r+0x6d6>
 80044be:	2200      	movs	r2, #0
 80044c0:	4b6d      	ldr	r3, [pc, #436]	; (8004678 <_dtoa_r+0x8b8>)
 80044c2:	f7fc f809 	bl	80004d8 <__aeabi_dmul>
 80044c6:	2200      	movs	r2, #0
 80044c8:	2300      	movs	r3, #0
 80044ca:	4680      	mov	r8, r0
 80044cc:	4689      	mov	r9, r1
 80044ce:	f7fc fa6b 	bl	80009a8 <__aeabi_dcmpeq>
 80044d2:	2800      	cmp	r0, #0
 80044d4:	d09b      	beq.n	800440e <_dtoa_r+0x64e>
 80044d6:	e7cd      	b.n	8004474 <_dtoa_r+0x6b4>
 80044d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80044da:	2a00      	cmp	r2, #0
 80044dc:	f000 80c4 	beq.w	8004668 <_dtoa_r+0x8a8>
 80044e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80044e2:	2a01      	cmp	r2, #1
 80044e4:	f300 80a8 	bgt.w	8004638 <_dtoa_r+0x878>
 80044e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80044ea:	2a00      	cmp	r2, #0
 80044ec:	f000 80a0 	beq.w	8004630 <_dtoa_r+0x870>
 80044f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80044f4:	464f      	mov	r7, r9
 80044f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80044f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044fa:	2101      	movs	r1, #1
 80044fc:	441a      	add	r2, r3
 80044fe:	4628      	mov	r0, r5
 8004500:	4499      	add	r9, r3
 8004502:	9209      	str	r2, [sp, #36]	; 0x24
 8004504:	f000 fc32 	bl	8004d6c <__i2b>
 8004508:	4606      	mov	r6, r0
 800450a:	b15f      	cbz	r7, 8004524 <_dtoa_r+0x764>
 800450c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800450e:	2b00      	cmp	r3, #0
 8004510:	dd08      	ble.n	8004524 <_dtoa_r+0x764>
 8004512:	42bb      	cmp	r3, r7
 8004514:	bfa8      	it	ge
 8004516:	463b      	movge	r3, r7
 8004518:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800451a:	eba9 0903 	sub.w	r9, r9, r3
 800451e:	1aff      	subs	r7, r7, r3
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	9309      	str	r3, [sp, #36]	; 0x24
 8004524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004526:	b1f3      	cbz	r3, 8004566 <_dtoa_r+0x7a6>
 8004528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 80a0 	beq.w	8004670 <_dtoa_r+0x8b0>
 8004530:	2c00      	cmp	r4, #0
 8004532:	dd10      	ble.n	8004556 <_dtoa_r+0x796>
 8004534:	4631      	mov	r1, r6
 8004536:	4622      	mov	r2, r4
 8004538:	4628      	mov	r0, r5
 800453a:	f000 fcd5 	bl	8004ee8 <__pow5mult>
 800453e:	4652      	mov	r2, sl
 8004540:	4601      	mov	r1, r0
 8004542:	4606      	mov	r6, r0
 8004544:	4628      	mov	r0, r5
 8004546:	f000 fc27 	bl	8004d98 <__multiply>
 800454a:	4680      	mov	r8, r0
 800454c:	4651      	mov	r1, sl
 800454e:	4628      	mov	r0, r5
 8004550:	f000 fb56 	bl	8004c00 <_Bfree>
 8004554:	46c2      	mov	sl, r8
 8004556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004558:	1b1a      	subs	r2, r3, r4
 800455a:	d004      	beq.n	8004566 <_dtoa_r+0x7a6>
 800455c:	4651      	mov	r1, sl
 800455e:	4628      	mov	r0, r5
 8004560:	f000 fcc2 	bl	8004ee8 <__pow5mult>
 8004564:	4682      	mov	sl, r0
 8004566:	2101      	movs	r1, #1
 8004568:	4628      	mov	r0, r5
 800456a:	f000 fbff 	bl	8004d6c <__i2b>
 800456e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004570:	4604      	mov	r4, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	f340 8082 	ble.w	800467c <_dtoa_r+0x8bc>
 8004578:	461a      	mov	r2, r3
 800457a:	4601      	mov	r1, r0
 800457c:	4628      	mov	r0, r5
 800457e:	f000 fcb3 	bl	8004ee8 <__pow5mult>
 8004582:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004584:	4604      	mov	r4, r0
 8004586:	2b01      	cmp	r3, #1
 8004588:	dd7b      	ble.n	8004682 <_dtoa_r+0x8c2>
 800458a:	f04f 0800 	mov.w	r8, #0
 800458e:	6923      	ldr	r3, [r4, #16]
 8004590:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004594:	6918      	ldr	r0, [r3, #16]
 8004596:	f000 fb9b 	bl	8004cd0 <__hi0bits>
 800459a:	f1c0 0020 	rsb	r0, r0, #32
 800459e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045a0:	4418      	add	r0, r3
 80045a2:	f010 001f 	ands.w	r0, r0, #31
 80045a6:	f000 8092 	beq.w	80046ce <_dtoa_r+0x90e>
 80045aa:	f1c0 0320 	rsb	r3, r0, #32
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	f340 8085 	ble.w	80046be <_dtoa_r+0x8fe>
 80045b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045b6:	f1c0 001c 	rsb	r0, r0, #28
 80045ba:	4403      	add	r3, r0
 80045bc:	4481      	add	r9, r0
 80045be:	4407      	add	r7, r0
 80045c0:	9309      	str	r3, [sp, #36]	; 0x24
 80045c2:	f1b9 0f00 	cmp.w	r9, #0
 80045c6:	dd05      	ble.n	80045d4 <_dtoa_r+0x814>
 80045c8:	4651      	mov	r1, sl
 80045ca:	464a      	mov	r2, r9
 80045cc:	4628      	mov	r0, r5
 80045ce:	f000 fce5 	bl	8004f9c <__lshift>
 80045d2:	4682      	mov	sl, r0
 80045d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	dd05      	ble.n	80045e6 <_dtoa_r+0x826>
 80045da:	4621      	mov	r1, r4
 80045dc:	461a      	mov	r2, r3
 80045de:	4628      	mov	r0, r5
 80045e0:	f000 fcdc 	bl	8004f9c <__lshift>
 80045e4:	4604      	mov	r4, r0
 80045e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d072      	beq.n	80046d2 <_dtoa_r+0x912>
 80045ec:	4621      	mov	r1, r4
 80045ee:	4650      	mov	r0, sl
 80045f0:	f000 fd40 	bl	8005074 <__mcmp>
 80045f4:	2800      	cmp	r0, #0
 80045f6:	da6c      	bge.n	80046d2 <_dtoa_r+0x912>
 80045f8:	2300      	movs	r3, #0
 80045fa:	4651      	mov	r1, sl
 80045fc:	220a      	movs	r2, #10
 80045fe:	4628      	mov	r0, r5
 8004600:	f000 fb20 	bl	8004c44 <__multadd>
 8004604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004606:	4682      	mov	sl, r0
 8004608:	f10b 3bff 	add.w	fp, fp, #4294967295
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 81ac 	beq.w	800496a <_dtoa_r+0xbaa>
 8004612:	2300      	movs	r3, #0
 8004614:	4631      	mov	r1, r6
 8004616:	220a      	movs	r2, #10
 8004618:	4628      	mov	r0, r5
 800461a:	f000 fb13 	bl	8004c44 <__multadd>
 800461e:	9b06      	ldr	r3, [sp, #24]
 8004620:	4606      	mov	r6, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	f300 8093 	bgt.w	800474e <_dtoa_r+0x98e>
 8004628:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800462a:	2b02      	cmp	r3, #2
 800462c:	dc59      	bgt.n	80046e2 <_dtoa_r+0x922>
 800462e:	e08e      	b.n	800474e <_dtoa_r+0x98e>
 8004630:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004632:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004636:	e75d      	b.n	80044f4 <_dtoa_r+0x734>
 8004638:	9b08      	ldr	r3, [sp, #32]
 800463a:	1e5c      	subs	r4, r3, #1
 800463c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800463e:	42a3      	cmp	r3, r4
 8004640:	bfbf      	itttt	lt
 8004642:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004644:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8004646:	1ae3      	sublt	r3, r4, r3
 8004648:	18d2      	addlt	r2, r2, r3
 800464a:	bfa8      	it	ge
 800464c:	1b1c      	subge	r4, r3, r4
 800464e:	9b08      	ldr	r3, [sp, #32]
 8004650:	bfbe      	ittt	lt
 8004652:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004654:	920e      	strlt	r2, [sp, #56]	; 0x38
 8004656:	2400      	movlt	r4, #0
 8004658:	2b00      	cmp	r3, #0
 800465a:	bfb5      	itete	lt
 800465c:	eba9 0703 	sublt.w	r7, r9, r3
 8004660:	464f      	movge	r7, r9
 8004662:	2300      	movlt	r3, #0
 8004664:	9b08      	ldrge	r3, [sp, #32]
 8004666:	e747      	b.n	80044f8 <_dtoa_r+0x738>
 8004668:	464f      	mov	r7, r9
 800466a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800466c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800466e:	e74c      	b.n	800450a <_dtoa_r+0x74a>
 8004670:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004672:	e773      	b.n	800455c <_dtoa_r+0x79c>
 8004674:	3fe00000 	.word	0x3fe00000
 8004678:	40240000 	.word	0x40240000
 800467c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800467e:	2b01      	cmp	r3, #1
 8004680:	dc18      	bgt.n	80046b4 <_dtoa_r+0x8f4>
 8004682:	9b04      	ldr	r3, [sp, #16]
 8004684:	b9b3      	cbnz	r3, 80046b4 <_dtoa_r+0x8f4>
 8004686:	9b05      	ldr	r3, [sp, #20]
 8004688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800468c:	b993      	cbnz	r3, 80046b4 <_dtoa_r+0x8f4>
 800468e:	9b05      	ldr	r3, [sp, #20]
 8004690:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004694:	0d1b      	lsrs	r3, r3, #20
 8004696:	051b      	lsls	r3, r3, #20
 8004698:	b17b      	cbz	r3, 80046ba <_dtoa_r+0x8fa>
 800469a:	f04f 0801 	mov.w	r8, #1
 800469e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046a0:	f109 0901 	add.w	r9, r9, #1
 80046a4:	3301      	adds	r3, #1
 80046a6:	9309      	str	r3, [sp, #36]	; 0x24
 80046a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f47f af6f 	bne.w	800458e <_dtoa_r+0x7ce>
 80046b0:	2001      	movs	r0, #1
 80046b2:	e774      	b.n	800459e <_dtoa_r+0x7de>
 80046b4:	f04f 0800 	mov.w	r8, #0
 80046b8:	e7f6      	b.n	80046a8 <_dtoa_r+0x8e8>
 80046ba:	4698      	mov	r8, r3
 80046bc:	e7f4      	b.n	80046a8 <_dtoa_r+0x8e8>
 80046be:	d080      	beq.n	80045c2 <_dtoa_r+0x802>
 80046c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046c2:	331c      	adds	r3, #28
 80046c4:	441a      	add	r2, r3
 80046c6:	4499      	add	r9, r3
 80046c8:	441f      	add	r7, r3
 80046ca:	9209      	str	r2, [sp, #36]	; 0x24
 80046cc:	e779      	b.n	80045c2 <_dtoa_r+0x802>
 80046ce:	4603      	mov	r3, r0
 80046d0:	e7f6      	b.n	80046c0 <_dtoa_r+0x900>
 80046d2:	9b08      	ldr	r3, [sp, #32]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	dc34      	bgt.n	8004742 <_dtoa_r+0x982>
 80046d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80046da:	2b02      	cmp	r3, #2
 80046dc:	dd31      	ble.n	8004742 <_dtoa_r+0x982>
 80046de:	9b08      	ldr	r3, [sp, #32]
 80046e0:	9306      	str	r3, [sp, #24]
 80046e2:	9b06      	ldr	r3, [sp, #24]
 80046e4:	b963      	cbnz	r3, 8004700 <_dtoa_r+0x940>
 80046e6:	4621      	mov	r1, r4
 80046e8:	2205      	movs	r2, #5
 80046ea:	4628      	mov	r0, r5
 80046ec:	f000 faaa 	bl	8004c44 <__multadd>
 80046f0:	4601      	mov	r1, r0
 80046f2:	4604      	mov	r4, r0
 80046f4:	4650      	mov	r0, sl
 80046f6:	f000 fcbd 	bl	8005074 <__mcmp>
 80046fa:	2800      	cmp	r0, #0
 80046fc:	f73f adbf 	bgt.w	800427e <_dtoa_r+0x4be>
 8004700:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004702:	9f03      	ldr	r7, [sp, #12]
 8004704:	ea6f 0b03 	mvn.w	fp, r3
 8004708:	f04f 0800 	mov.w	r8, #0
 800470c:	4621      	mov	r1, r4
 800470e:	4628      	mov	r0, r5
 8004710:	f000 fa76 	bl	8004c00 <_Bfree>
 8004714:	2e00      	cmp	r6, #0
 8004716:	f43f aead 	beq.w	8004474 <_dtoa_r+0x6b4>
 800471a:	f1b8 0f00 	cmp.w	r8, #0
 800471e:	d005      	beq.n	800472c <_dtoa_r+0x96c>
 8004720:	45b0      	cmp	r8, r6
 8004722:	d003      	beq.n	800472c <_dtoa_r+0x96c>
 8004724:	4641      	mov	r1, r8
 8004726:	4628      	mov	r0, r5
 8004728:	f000 fa6a 	bl	8004c00 <_Bfree>
 800472c:	4631      	mov	r1, r6
 800472e:	4628      	mov	r0, r5
 8004730:	f000 fa66 	bl	8004c00 <_Bfree>
 8004734:	e69e      	b.n	8004474 <_dtoa_r+0x6b4>
 8004736:	2400      	movs	r4, #0
 8004738:	4626      	mov	r6, r4
 800473a:	e7e1      	b.n	8004700 <_dtoa_r+0x940>
 800473c:	46c3      	mov	fp, r8
 800473e:	4626      	mov	r6, r4
 8004740:	e59d      	b.n	800427e <_dtoa_r+0x4be>
 8004742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 80c8 	beq.w	80048da <_dtoa_r+0xb1a>
 800474a:	9b08      	ldr	r3, [sp, #32]
 800474c:	9306      	str	r3, [sp, #24]
 800474e:	2f00      	cmp	r7, #0
 8004750:	dd05      	ble.n	800475e <_dtoa_r+0x99e>
 8004752:	4631      	mov	r1, r6
 8004754:	463a      	mov	r2, r7
 8004756:	4628      	mov	r0, r5
 8004758:	f000 fc20 	bl	8004f9c <__lshift>
 800475c:	4606      	mov	r6, r0
 800475e:	f1b8 0f00 	cmp.w	r8, #0
 8004762:	d05b      	beq.n	800481c <_dtoa_r+0xa5c>
 8004764:	4628      	mov	r0, r5
 8004766:	6871      	ldr	r1, [r6, #4]
 8004768:	f000 fa0a 	bl	8004b80 <_Balloc>
 800476c:	4607      	mov	r7, r0
 800476e:	b928      	cbnz	r0, 800477c <_dtoa_r+0x9bc>
 8004770:	4602      	mov	r2, r0
 8004772:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004776:	4b81      	ldr	r3, [pc, #516]	; (800497c <_dtoa_r+0xbbc>)
 8004778:	f7ff bb36 	b.w	8003de8 <_dtoa_r+0x28>
 800477c:	6932      	ldr	r2, [r6, #16]
 800477e:	f106 010c 	add.w	r1, r6, #12
 8004782:	3202      	adds	r2, #2
 8004784:	0092      	lsls	r2, r2, #2
 8004786:	300c      	adds	r0, #12
 8004788:	f7ff fa81 	bl	8003c8e <memcpy>
 800478c:	2201      	movs	r2, #1
 800478e:	4639      	mov	r1, r7
 8004790:	4628      	mov	r0, r5
 8004792:	f000 fc03 	bl	8004f9c <__lshift>
 8004796:	46b0      	mov	r8, r6
 8004798:	4606      	mov	r6, r0
 800479a:	9b03      	ldr	r3, [sp, #12]
 800479c:	9a03      	ldr	r2, [sp, #12]
 800479e:	3301      	adds	r3, #1
 80047a0:	9308      	str	r3, [sp, #32]
 80047a2:	9b06      	ldr	r3, [sp, #24]
 80047a4:	4413      	add	r3, r2
 80047a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80047a8:	9b04      	ldr	r3, [sp, #16]
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	930a      	str	r3, [sp, #40]	; 0x28
 80047b0:	9b08      	ldr	r3, [sp, #32]
 80047b2:	4621      	mov	r1, r4
 80047b4:	3b01      	subs	r3, #1
 80047b6:	4650      	mov	r0, sl
 80047b8:	9304      	str	r3, [sp, #16]
 80047ba:	f7ff fa76 	bl	8003caa <quorem>
 80047be:	4641      	mov	r1, r8
 80047c0:	9006      	str	r0, [sp, #24]
 80047c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80047c6:	4650      	mov	r0, sl
 80047c8:	f000 fc54 	bl	8005074 <__mcmp>
 80047cc:	4632      	mov	r2, r6
 80047ce:	9009      	str	r0, [sp, #36]	; 0x24
 80047d0:	4621      	mov	r1, r4
 80047d2:	4628      	mov	r0, r5
 80047d4:	f000 fc6a 	bl	80050ac <__mdiff>
 80047d8:	68c2      	ldr	r2, [r0, #12]
 80047da:	4607      	mov	r7, r0
 80047dc:	bb02      	cbnz	r2, 8004820 <_dtoa_r+0xa60>
 80047de:	4601      	mov	r1, r0
 80047e0:	4650      	mov	r0, sl
 80047e2:	f000 fc47 	bl	8005074 <__mcmp>
 80047e6:	4602      	mov	r2, r0
 80047e8:	4639      	mov	r1, r7
 80047ea:	4628      	mov	r0, r5
 80047ec:	920c      	str	r2, [sp, #48]	; 0x30
 80047ee:	f000 fa07 	bl	8004c00 <_Bfree>
 80047f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80047f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80047f6:	9f08      	ldr	r7, [sp, #32]
 80047f8:	ea43 0102 	orr.w	r1, r3, r2
 80047fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047fe:	4319      	orrs	r1, r3
 8004800:	d110      	bne.n	8004824 <_dtoa_r+0xa64>
 8004802:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004806:	d029      	beq.n	800485c <_dtoa_r+0xa9c>
 8004808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800480a:	2b00      	cmp	r3, #0
 800480c:	dd02      	ble.n	8004814 <_dtoa_r+0xa54>
 800480e:	9b06      	ldr	r3, [sp, #24]
 8004810:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004814:	9b04      	ldr	r3, [sp, #16]
 8004816:	f883 9000 	strb.w	r9, [r3]
 800481a:	e777      	b.n	800470c <_dtoa_r+0x94c>
 800481c:	4630      	mov	r0, r6
 800481e:	e7ba      	b.n	8004796 <_dtoa_r+0x9d6>
 8004820:	2201      	movs	r2, #1
 8004822:	e7e1      	b.n	80047e8 <_dtoa_r+0xa28>
 8004824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004826:	2b00      	cmp	r3, #0
 8004828:	db04      	blt.n	8004834 <_dtoa_r+0xa74>
 800482a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800482c:	430b      	orrs	r3, r1
 800482e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004830:	430b      	orrs	r3, r1
 8004832:	d120      	bne.n	8004876 <_dtoa_r+0xab6>
 8004834:	2a00      	cmp	r2, #0
 8004836:	dded      	ble.n	8004814 <_dtoa_r+0xa54>
 8004838:	4651      	mov	r1, sl
 800483a:	2201      	movs	r2, #1
 800483c:	4628      	mov	r0, r5
 800483e:	f000 fbad 	bl	8004f9c <__lshift>
 8004842:	4621      	mov	r1, r4
 8004844:	4682      	mov	sl, r0
 8004846:	f000 fc15 	bl	8005074 <__mcmp>
 800484a:	2800      	cmp	r0, #0
 800484c:	dc03      	bgt.n	8004856 <_dtoa_r+0xa96>
 800484e:	d1e1      	bne.n	8004814 <_dtoa_r+0xa54>
 8004850:	f019 0f01 	tst.w	r9, #1
 8004854:	d0de      	beq.n	8004814 <_dtoa_r+0xa54>
 8004856:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800485a:	d1d8      	bne.n	800480e <_dtoa_r+0xa4e>
 800485c:	2339      	movs	r3, #57	; 0x39
 800485e:	9a04      	ldr	r2, [sp, #16]
 8004860:	7013      	strb	r3, [r2, #0]
 8004862:	463b      	mov	r3, r7
 8004864:	461f      	mov	r7, r3
 8004866:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800486a:	3b01      	subs	r3, #1
 800486c:	2a39      	cmp	r2, #57	; 0x39
 800486e:	d06b      	beq.n	8004948 <_dtoa_r+0xb88>
 8004870:	3201      	adds	r2, #1
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	e74a      	b.n	800470c <_dtoa_r+0x94c>
 8004876:	2a00      	cmp	r2, #0
 8004878:	dd07      	ble.n	800488a <_dtoa_r+0xaca>
 800487a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800487e:	d0ed      	beq.n	800485c <_dtoa_r+0xa9c>
 8004880:	9a04      	ldr	r2, [sp, #16]
 8004882:	f109 0301 	add.w	r3, r9, #1
 8004886:	7013      	strb	r3, [r2, #0]
 8004888:	e740      	b.n	800470c <_dtoa_r+0x94c>
 800488a:	9b08      	ldr	r3, [sp, #32]
 800488c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800488e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004892:	4293      	cmp	r3, r2
 8004894:	d042      	beq.n	800491c <_dtoa_r+0xb5c>
 8004896:	4651      	mov	r1, sl
 8004898:	2300      	movs	r3, #0
 800489a:	220a      	movs	r2, #10
 800489c:	4628      	mov	r0, r5
 800489e:	f000 f9d1 	bl	8004c44 <__multadd>
 80048a2:	45b0      	cmp	r8, r6
 80048a4:	4682      	mov	sl, r0
 80048a6:	f04f 0300 	mov.w	r3, #0
 80048aa:	f04f 020a 	mov.w	r2, #10
 80048ae:	4641      	mov	r1, r8
 80048b0:	4628      	mov	r0, r5
 80048b2:	d107      	bne.n	80048c4 <_dtoa_r+0xb04>
 80048b4:	f000 f9c6 	bl	8004c44 <__multadd>
 80048b8:	4680      	mov	r8, r0
 80048ba:	4606      	mov	r6, r0
 80048bc:	9b08      	ldr	r3, [sp, #32]
 80048be:	3301      	adds	r3, #1
 80048c0:	9308      	str	r3, [sp, #32]
 80048c2:	e775      	b.n	80047b0 <_dtoa_r+0x9f0>
 80048c4:	f000 f9be 	bl	8004c44 <__multadd>
 80048c8:	4631      	mov	r1, r6
 80048ca:	4680      	mov	r8, r0
 80048cc:	2300      	movs	r3, #0
 80048ce:	220a      	movs	r2, #10
 80048d0:	4628      	mov	r0, r5
 80048d2:	f000 f9b7 	bl	8004c44 <__multadd>
 80048d6:	4606      	mov	r6, r0
 80048d8:	e7f0      	b.n	80048bc <_dtoa_r+0xafc>
 80048da:	9b08      	ldr	r3, [sp, #32]
 80048dc:	9306      	str	r3, [sp, #24]
 80048de:	9f03      	ldr	r7, [sp, #12]
 80048e0:	4621      	mov	r1, r4
 80048e2:	4650      	mov	r0, sl
 80048e4:	f7ff f9e1 	bl	8003caa <quorem>
 80048e8:	9b03      	ldr	r3, [sp, #12]
 80048ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80048ee:	f807 9b01 	strb.w	r9, [r7], #1
 80048f2:	1afa      	subs	r2, r7, r3
 80048f4:	9b06      	ldr	r3, [sp, #24]
 80048f6:	4293      	cmp	r3, r2
 80048f8:	dd07      	ble.n	800490a <_dtoa_r+0xb4a>
 80048fa:	4651      	mov	r1, sl
 80048fc:	2300      	movs	r3, #0
 80048fe:	220a      	movs	r2, #10
 8004900:	4628      	mov	r0, r5
 8004902:	f000 f99f 	bl	8004c44 <__multadd>
 8004906:	4682      	mov	sl, r0
 8004908:	e7ea      	b.n	80048e0 <_dtoa_r+0xb20>
 800490a:	9b06      	ldr	r3, [sp, #24]
 800490c:	f04f 0800 	mov.w	r8, #0
 8004910:	2b00      	cmp	r3, #0
 8004912:	bfcc      	ite	gt
 8004914:	461f      	movgt	r7, r3
 8004916:	2701      	movle	r7, #1
 8004918:	9b03      	ldr	r3, [sp, #12]
 800491a:	441f      	add	r7, r3
 800491c:	4651      	mov	r1, sl
 800491e:	2201      	movs	r2, #1
 8004920:	4628      	mov	r0, r5
 8004922:	f000 fb3b 	bl	8004f9c <__lshift>
 8004926:	4621      	mov	r1, r4
 8004928:	4682      	mov	sl, r0
 800492a:	f000 fba3 	bl	8005074 <__mcmp>
 800492e:	2800      	cmp	r0, #0
 8004930:	dc97      	bgt.n	8004862 <_dtoa_r+0xaa2>
 8004932:	d102      	bne.n	800493a <_dtoa_r+0xb7a>
 8004934:	f019 0f01 	tst.w	r9, #1
 8004938:	d193      	bne.n	8004862 <_dtoa_r+0xaa2>
 800493a:	463b      	mov	r3, r7
 800493c:	461f      	mov	r7, r3
 800493e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004942:	2a30      	cmp	r2, #48	; 0x30
 8004944:	d0fa      	beq.n	800493c <_dtoa_r+0xb7c>
 8004946:	e6e1      	b.n	800470c <_dtoa_r+0x94c>
 8004948:	9a03      	ldr	r2, [sp, #12]
 800494a:	429a      	cmp	r2, r3
 800494c:	d18a      	bne.n	8004864 <_dtoa_r+0xaa4>
 800494e:	2331      	movs	r3, #49	; 0x31
 8004950:	f10b 0b01 	add.w	fp, fp, #1
 8004954:	e797      	b.n	8004886 <_dtoa_r+0xac6>
 8004956:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <_dtoa_r+0xbc0>)
 8004958:	f7ff ba9f 	b.w	8003e9a <_dtoa_r+0xda>
 800495c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800495e:	2b00      	cmp	r3, #0
 8004960:	f47f aa77 	bne.w	8003e52 <_dtoa_r+0x92>
 8004964:	4b07      	ldr	r3, [pc, #28]	; (8004984 <_dtoa_r+0xbc4>)
 8004966:	f7ff ba98 	b.w	8003e9a <_dtoa_r+0xda>
 800496a:	9b06      	ldr	r3, [sp, #24]
 800496c:	2b00      	cmp	r3, #0
 800496e:	dcb6      	bgt.n	80048de <_dtoa_r+0xb1e>
 8004970:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004972:	2b02      	cmp	r3, #2
 8004974:	f73f aeb5 	bgt.w	80046e2 <_dtoa_r+0x922>
 8004978:	e7b1      	b.n	80048de <_dtoa_r+0xb1e>
 800497a:	bf00      	nop
 800497c:	08006406 	.word	0x08006406
 8004980:	08006366 	.word	0x08006366
 8004984:	0800638a 	.word	0x0800638a

08004988 <_free_r>:
 8004988:	b538      	push	{r3, r4, r5, lr}
 800498a:	4605      	mov	r5, r0
 800498c:	2900      	cmp	r1, #0
 800498e:	d040      	beq.n	8004a12 <_free_r+0x8a>
 8004990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004994:	1f0c      	subs	r4, r1, #4
 8004996:	2b00      	cmp	r3, #0
 8004998:	bfb8      	it	lt
 800499a:	18e4      	addlt	r4, r4, r3
 800499c:	f000 f8e4 	bl	8004b68 <__malloc_lock>
 80049a0:	4a1c      	ldr	r2, [pc, #112]	; (8004a14 <_free_r+0x8c>)
 80049a2:	6813      	ldr	r3, [r2, #0]
 80049a4:	b933      	cbnz	r3, 80049b4 <_free_r+0x2c>
 80049a6:	6063      	str	r3, [r4, #4]
 80049a8:	6014      	str	r4, [r2, #0]
 80049aa:	4628      	mov	r0, r5
 80049ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049b0:	f000 b8e0 	b.w	8004b74 <__malloc_unlock>
 80049b4:	42a3      	cmp	r3, r4
 80049b6:	d908      	bls.n	80049ca <_free_r+0x42>
 80049b8:	6820      	ldr	r0, [r4, #0]
 80049ba:	1821      	adds	r1, r4, r0
 80049bc:	428b      	cmp	r3, r1
 80049be:	bf01      	itttt	eq
 80049c0:	6819      	ldreq	r1, [r3, #0]
 80049c2:	685b      	ldreq	r3, [r3, #4]
 80049c4:	1809      	addeq	r1, r1, r0
 80049c6:	6021      	streq	r1, [r4, #0]
 80049c8:	e7ed      	b.n	80049a6 <_free_r+0x1e>
 80049ca:	461a      	mov	r2, r3
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	b10b      	cbz	r3, 80049d4 <_free_r+0x4c>
 80049d0:	42a3      	cmp	r3, r4
 80049d2:	d9fa      	bls.n	80049ca <_free_r+0x42>
 80049d4:	6811      	ldr	r1, [r2, #0]
 80049d6:	1850      	adds	r0, r2, r1
 80049d8:	42a0      	cmp	r0, r4
 80049da:	d10b      	bne.n	80049f4 <_free_r+0x6c>
 80049dc:	6820      	ldr	r0, [r4, #0]
 80049de:	4401      	add	r1, r0
 80049e0:	1850      	adds	r0, r2, r1
 80049e2:	4283      	cmp	r3, r0
 80049e4:	6011      	str	r1, [r2, #0]
 80049e6:	d1e0      	bne.n	80049aa <_free_r+0x22>
 80049e8:	6818      	ldr	r0, [r3, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	4408      	add	r0, r1
 80049ee:	6010      	str	r0, [r2, #0]
 80049f0:	6053      	str	r3, [r2, #4]
 80049f2:	e7da      	b.n	80049aa <_free_r+0x22>
 80049f4:	d902      	bls.n	80049fc <_free_r+0x74>
 80049f6:	230c      	movs	r3, #12
 80049f8:	602b      	str	r3, [r5, #0]
 80049fa:	e7d6      	b.n	80049aa <_free_r+0x22>
 80049fc:	6820      	ldr	r0, [r4, #0]
 80049fe:	1821      	adds	r1, r4, r0
 8004a00:	428b      	cmp	r3, r1
 8004a02:	bf01      	itttt	eq
 8004a04:	6819      	ldreq	r1, [r3, #0]
 8004a06:	685b      	ldreq	r3, [r3, #4]
 8004a08:	1809      	addeq	r1, r1, r0
 8004a0a:	6021      	streq	r1, [r4, #0]
 8004a0c:	6063      	str	r3, [r4, #4]
 8004a0e:	6054      	str	r4, [r2, #4]
 8004a10:	e7cb      	b.n	80049aa <_free_r+0x22>
 8004a12:	bd38      	pop	{r3, r4, r5, pc}
 8004a14:	20000820 	.word	0x20000820

08004a18 <malloc>:
 8004a18:	4b02      	ldr	r3, [pc, #8]	; (8004a24 <malloc+0xc>)
 8004a1a:	4601      	mov	r1, r0
 8004a1c:	6818      	ldr	r0, [r3, #0]
 8004a1e:	f000 b823 	b.w	8004a68 <_malloc_r>
 8004a22:	bf00      	nop
 8004a24:	20000068 	.word	0x20000068

08004a28 <sbrk_aligned>:
 8004a28:	b570      	push	{r4, r5, r6, lr}
 8004a2a:	4e0e      	ldr	r6, [pc, #56]	; (8004a64 <sbrk_aligned+0x3c>)
 8004a2c:	460c      	mov	r4, r1
 8004a2e:	6831      	ldr	r1, [r6, #0]
 8004a30:	4605      	mov	r5, r0
 8004a32:	b911      	cbnz	r1, 8004a3a <sbrk_aligned+0x12>
 8004a34:	f000 fcc6 	bl	80053c4 <_sbrk_r>
 8004a38:	6030      	str	r0, [r6, #0]
 8004a3a:	4621      	mov	r1, r4
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	f000 fcc1 	bl	80053c4 <_sbrk_r>
 8004a42:	1c43      	adds	r3, r0, #1
 8004a44:	d00a      	beq.n	8004a5c <sbrk_aligned+0x34>
 8004a46:	1cc4      	adds	r4, r0, #3
 8004a48:	f024 0403 	bic.w	r4, r4, #3
 8004a4c:	42a0      	cmp	r0, r4
 8004a4e:	d007      	beq.n	8004a60 <sbrk_aligned+0x38>
 8004a50:	1a21      	subs	r1, r4, r0
 8004a52:	4628      	mov	r0, r5
 8004a54:	f000 fcb6 	bl	80053c4 <_sbrk_r>
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d101      	bne.n	8004a60 <sbrk_aligned+0x38>
 8004a5c:	f04f 34ff 	mov.w	r4, #4294967295
 8004a60:	4620      	mov	r0, r4
 8004a62:	bd70      	pop	{r4, r5, r6, pc}
 8004a64:	20000824 	.word	0x20000824

08004a68 <_malloc_r>:
 8004a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a6c:	1ccd      	adds	r5, r1, #3
 8004a6e:	f025 0503 	bic.w	r5, r5, #3
 8004a72:	3508      	adds	r5, #8
 8004a74:	2d0c      	cmp	r5, #12
 8004a76:	bf38      	it	cc
 8004a78:	250c      	movcc	r5, #12
 8004a7a:	2d00      	cmp	r5, #0
 8004a7c:	4607      	mov	r7, r0
 8004a7e:	db01      	blt.n	8004a84 <_malloc_r+0x1c>
 8004a80:	42a9      	cmp	r1, r5
 8004a82:	d905      	bls.n	8004a90 <_malloc_r+0x28>
 8004a84:	230c      	movs	r3, #12
 8004a86:	2600      	movs	r6, #0
 8004a88:	603b      	str	r3, [r7, #0]
 8004a8a:	4630      	mov	r0, r6
 8004a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004b64 <_malloc_r+0xfc>
 8004a94:	f000 f868 	bl	8004b68 <__malloc_lock>
 8004a98:	f8d8 3000 	ldr.w	r3, [r8]
 8004a9c:	461c      	mov	r4, r3
 8004a9e:	bb5c      	cbnz	r4, 8004af8 <_malloc_r+0x90>
 8004aa0:	4629      	mov	r1, r5
 8004aa2:	4638      	mov	r0, r7
 8004aa4:	f7ff ffc0 	bl	8004a28 <sbrk_aligned>
 8004aa8:	1c43      	adds	r3, r0, #1
 8004aaa:	4604      	mov	r4, r0
 8004aac:	d155      	bne.n	8004b5a <_malloc_r+0xf2>
 8004aae:	f8d8 4000 	ldr.w	r4, [r8]
 8004ab2:	4626      	mov	r6, r4
 8004ab4:	2e00      	cmp	r6, #0
 8004ab6:	d145      	bne.n	8004b44 <_malloc_r+0xdc>
 8004ab8:	2c00      	cmp	r4, #0
 8004aba:	d048      	beq.n	8004b4e <_malloc_r+0xe6>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	4631      	mov	r1, r6
 8004ac0:	4638      	mov	r0, r7
 8004ac2:	eb04 0903 	add.w	r9, r4, r3
 8004ac6:	f000 fc7d 	bl	80053c4 <_sbrk_r>
 8004aca:	4581      	cmp	r9, r0
 8004acc:	d13f      	bne.n	8004b4e <_malloc_r+0xe6>
 8004ace:	6821      	ldr	r1, [r4, #0]
 8004ad0:	4638      	mov	r0, r7
 8004ad2:	1a6d      	subs	r5, r5, r1
 8004ad4:	4629      	mov	r1, r5
 8004ad6:	f7ff ffa7 	bl	8004a28 <sbrk_aligned>
 8004ada:	3001      	adds	r0, #1
 8004adc:	d037      	beq.n	8004b4e <_malloc_r+0xe6>
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	442b      	add	r3, r5
 8004ae2:	6023      	str	r3, [r4, #0]
 8004ae4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d038      	beq.n	8004b5e <_malloc_r+0xf6>
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	42a2      	cmp	r2, r4
 8004af0:	d12b      	bne.n	8004b4a <_malloc_r+0xe2>
 8004af2:	2200      	movs	r2, #0
 8004af4:	605a      	str	r2, [r3, #4]
 8004af6:	e00f      	b.n	8004b18 <_malloc_r+0xb0>
 8004af8:	6822      	ldr	r2, [r4, #0]
 8004afa:	1b52      	subs	r2, r2, r5
 8004afc:	d41f      	bmi.n	8004b3e <_malloc_r+0xd6>
 8004afe:	2a0b      	cmp	r2, #11
 8004b00:	d917      	bls.n	8004b32 <_malloc_r+0xca>
 8004b02:	1961      	adds	r1, r4, r5
 8004b04:	42a3      	cmp	r3, r4
 8004b06:	6025      	str	r5, [r4, #0]
 8004b08:	bf18      	it	ne
 8004b0a:	6059      	strne	r1, [r3, #4]
 8004b0c:	6863      	ldr	r3, [r4, #4]
 8004b0e:	bf08      	it	eq
 8004b10:	f8c8 1000 	streq.w	r1, [r8]
 8004b14:	5162      	str	r2, [r4, r5]
 8004b16:	604b      	str	r3, [r1, #4]
 8004b18:	4638      	mov	r0, r7
 8004b1a:	f104 060b 	add.w	r6, r4, #11
 8004b1e:	f000 f829 	bl	8004b74 <__malloc_unlock>
 8004b22:	f026 0607 	bic.w	r6, r6, #7
 8004b26:	1d23      	adds	r3, r4, #4
 8004b28:	1af2      	subs	r2, r6, r3
 8004b2a:	d0ae      	beq.n	8004a8a <_malloc_r+0x22>
 8004b2c:	1b9b      	subs	r3, r3, r6
 8004b2e:	50a3      	str	r3, [r4, r2]
 8004b30:	e7ab      	b.n	8004a8a <_malloc_r+0x22>
 8004b32:	42a3      	cmp	r3, r4
 8004b34:	6862      	ldr	r2, [r4, #4]
 8004b36:	d1dd      	bne.n	8004af4 <_malloc_r+0x8c>
 8004b38:	f8c8 2000 	str.w	r2, [r8]
 8004b3c:	e7ec      	b.n	8004b18 <_malloc_r+0xb0>
 8004b3e:	4623      	mov	r3, r4
 8004b40:	6864      	ldr	r4, [r4, #4]
 8004b42:	e7ac      	b.n	8004a9e <_malloc_r+0x36>
 8004b44:	4634      	mov	r4, r6
 8004b46:	6876      	ldr	r6, [r6, #4]
 8004b48:	e7b4      	b.n	8004ab4 <_malloc_r+0x4c>
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	e7cc      	b.n	8004ae8 <_malloc_r+0x80>
 8004b4e:	230c      	movs	r3, #12
 8004b50:	4638      	mov	r0, r7
 8004b52:	603b      	str	r3, [r7, #0]
 8004b54:	f000 f80e 	bl	8004b74 <__malloc_unlock>
 8004b58:	e797      	b.n	8004a8a <_malloc_r+0x22>
 8004b5a:	6025      	str	r5, [r4, #0]
 8004b5c:	e7dc      	b.n	8004b18 <_malloc_r+0xb0>
 8004b5e:	605b      	str	r3, [r3, #4]
 8004b60:	deff      	udf	#255	; 0xff
 8004b62:	bf00      	nop
 8004b64:	20000820 	.word	0x20000820

08004b68 <__malloc_lock>:
 8004b68:	4801      	ldr	r0, [pc, #4]	; (8004b70 <__malloc_lock+0x8>)
 8004b6a:	f7ff b880 	b.w	8003c6e <__retarget_lock_acquire_recursive>
 8004b6e:	bf00      	nop
 8004b70:	2000081c 	.word	0x2000081c

08004b74 <__malloc_unlock>:
 8004b74:	4801      	ldr	r0, [pc, #4]	; (8004b7c <__malloc_unlock+0x8>)
 8004b76:	f7ff b87b 	b.w	8003c70 <__retarget_lock_release_recursive>
 8004b7a:	bf00      	nop
 8004b7c:	2000081c 	.word	0x2000081c

08004b80 <_Balloc>:
 8004b80:	b570      	push	{r4, r5, r6, lr}
 8004b82:	69c6      	ldr	r6, [r0, #28]
 8004b84:	4604      	mov	r4, r0
 8004b86:	460d      	mov	r5, r1
 8004b88:	b976      	cbnz	r6, 8004ba8 <_Balloc+0x28>
 8004b8a:	2010      	movs	r0, #16
 8004b8c:	f7ff ff44 	bl	8004a18 <malloc>
 8004b90:	4602      	mov	r2, r0
 8004b92:	61e0      	str	r0, [r4, #28]
 8004b94:	b920      	cbnz	r0, 8004ba0 <_Balloc+0x20>
 8004b96:	216b      	movs	r1, #107	; 0x6b
 8004b98:	4b17      	ldr	r3, [pc, #92]	; (8004bf8 <_Balloc+0x78>)
 8004b9a:	4818      	ldr	r0, [pc, #96]	; (8004bfc <_Balloc+0x7c>)
 8004b9c:	f000 fc22 	bl	80053e4 <__assert_func>
 8004ba0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ba4:	6006      	str	r6, [r0, #0]
 8004ba6:	60c6      	str	r6, [r0, #12]
 8004ba8:	69e6      	ldr	r6, [r4, #28]
 8004baa:	68f3      	ldr	r3, [r6, #12]
 8004bac:	b183      	cbz	r3, 8004bd0 <_Balloc+0x50>
 8004bae:	69e3      	ldr	r3, [r4, #28]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004bb6:	b9b8      	cbnz	r0, 8004be8 <_Balloc+0x68>
 8004bb8:	2101      	movs	r1, #1
 8004bba:	fa01 f605 	lsl.w	r6, r1, r5
 8004bbe:	1d72      	adds	r2, r6, #5
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	0092      	lsls	r2, r2, #2
 8004bc4:	f000 fc2c 	bl	8005420 <_calloc_r>
 8004bc8:	b160      	cbz	r0, 8004be4 <_Balloc+0x64>
 8004bca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004bce:	e00e      	b.n	8004bee <_Balloc+0x6e>
 8004bd0:	2221      	movs	r2, #33	; 0x21
 8004bd2:	2104      	movs	r1, #4
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	f000 fc23 	bl	8005420 <_calloc_r>
 8004bda:	69e3      	ldr	r3, [r4, #28]
 8004bdc:	60f0      	str	r0, [r6, #12]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1e4      	bne.n	8004bae <_Balloc+0x2e>
 8004be4:	2000      	movs	r0, #0
 8004be6:	bd70      	pop	{r4, r5, r6, pc}
 8004be8:	6802      	ldr	r2, [r0, #0]
 8004bea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004bee:	2300      	movs	r3, #0
 8004bf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004bf4:	e7f7      	b.n	8004be6 <_Balloc+0x66>
 8004bf6:	bf00      	nop
 8004bf8:	08006397 	.word	0x08006397
 8004bfc:	08006417 	.word	0x08006417

08004c00 <_Bfree>:
 8004c00:	b570      	push	{r4, r5, r6, lr}
 8004c02:	69c6      	ldr	r6, [r0, #28]
 8004c04:	4605      	mov	r5, r0
 8004c06:	460c      	mov	r4, r1
 8004c08:	b976      	cbnz	r6, 8004c28 <_Bfree+0x28>
 8004c0a:	2010      	movs	r0, #16
 8004c0c:	f7ff ff04 	bl	8004a18 <malloc>
 8004c10:	4602      	mov	r2, r0
 8004c12:	61e8      	str	r0, [r5, #28]
 8004c14:	b920      	cbnz	r0, 8004c20 <_Bfree+0x20>
 8004c16:	218f      	movs	r1, #143	; 0x8f
 8004c18:	4b08      	ldr	r3, [pc, #32]	; (8004c3c <_Bfree+0x3c>)
 8004c1a:	4809      	ldr	r0, [pc, #36]	; (8004c40 <_Bfree+0x40>)
 8004c1c:	f000 fbe2 	bl	80053e4 <__assert_func>
 8004c20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004c24:	6006      	str	r6, [r0, #0]
 8004c26:	60c6      	str	r6, [r0, #12]
 8004c28:	b13c      	cbz	r4, 8004c3a <_Bfree+0x3a>
 8004c2a:	69eb      	ldr	r3, [r5, #28]
 8004c2c:	6862      	ldr	r2, [r4, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c34:	6021      	str	r1, [r4, #0]
 8004c36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004c3a:	bd70      	pop	{r4, r5, r6, pc}
 8004c3c:	08006397 	.word	0x08006397
 8004c40:	08006417 	.word	0x08006417

08004c44 <__multadd>:
 8004c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c48:	4607      	mov	r7, r0
 8004c4a:	460c      	mov	r4, r1
 8004c4c:	461e      	mov	r6, r3
 8004c4e:	2000      	movs	r0, #0
 8004c50:	690d      	ldr	r5, [r1, #16]
 8004c52:	f101 0c14 	add.w	ip, r1, #20
 8004c56:	f8dc 3000 	ldr.w	r3, [ip]
 8004c5a:	3001      	adds	r0, #1
 8004c5c:	b299      	uxth	r1, r3
 8004c5e:	fb02 6101 	mla	r1, r2, r1, r6
 8004c62:	0c1e      	lsrs	r6, r3, #16
 8004c64:	0c0b      	lsrs	r3, r1, #16
 8004c66:	fb02 3306 	mla	r3, r2, r6, r3
 8004c6a:	b289      	uxth	r1, r1
 8004c6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004c70:	4285      	cmp	r5, r0
 8004c72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004c76:	f84c 1b04 	str.w	r1, [ip], #4
 8004c7a:	dcec      	bgt.n	8004c56 <__multadd+0x12>
 8004c7c:	b30e      	cbz	r6, 8004cc2 <__multadd+0x7e>
 8004c7e:	68a3      	ldr	r3, [r4, #8]
 8004c80:	42ab      	cmp	r3, r5
 8004c82:	dc19      	bgt.n	8004cb8 <__multadd+0x74>
 8004c84:	6861      	ldr	r1, [r4, #4]
 8004c86:	4638      	mov	r0, r7
 8004c88:	3101      	adds	r1, #1
 8004c8a:	f7ff ff79 	bl	8004b80 <_Balloc>
 8004c8e:	4680      	mov	r8, r0
 8004c90:	b928      	cbnz	r0, 8004c9e <__multadd+0x5a>
 8004c92:	4602      	mov	r2, r0
 8004c94:	21ba      	movs	r1, #186	; 0xba
 8004c96:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <__multadd+0x84>)
 8004c98:	480c      	ldr	r0, [pc, #48]	; (8004ccc <__multadd+0x88>)
 8004c9a:	f000 fba3 	bl	80053e4 <__assert_func>
 8004c9e:	6922      	ldr	r2, [r4, #16]
 8004ca0:	f104 010c 	add.w	r1, r4, #12
 8004ca4:	3202      	adds	r2, #2
 8004ca6:	0092      	lsls	r2, r2, #2
 8004ca8:	300c      	adds	r0, #12
 8004caa:	f7fe fff0 	bl	8003c8e <memcpy>
 8004cae:	4621      	mov	r1, r4
 8004cb0:	4638      	mov	r0, r7
 8004cb2:	f7ff ffa5 	bl	8004c00 <_Bfree>
 8004cb6:	4644      	mov	r4, r8
 8004cb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004cbc:	3501      	adds	r5, #1
 8004cbe:	615e      	str	r6, [r3, #20]
 8004cc0:	6125      	str	r5, [r4, #16]
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cc8:	08006406 	.word	0x08006406
 8004ccc:	08006417 	.word	0x08006417

08004cd0 <__hi0bits>:
 8004cd0:	0c02      	lsrs	r2, r0, #16
 8004cd2:	0412      	lsls	r2, r2, #16
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	b9ca      	cbnz	r2, 8004d0c <__hi0bits+0x3c>
 8004cd8:	0403      	lsls	r3, r0, #16
 8004cda:	2010      	movs	r0, #16
 8004cdc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004ce0:	bf04      	itt	eq
 8004ce2:	021b      	lsleq	r3, r3, #8
 8004ce4:	3008      	addeq	r0, #8
 8004ce6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004cea:	bf04      	itt	eq
 8004cec:	011b      	lsleq	r3, r3, #4
 8004cee:	3004      	addeq	r0, #4
 8004cf0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004cf4:	bf04      	itt	eq
 8004cf6:	009b      	lsleq	r3, r3, #2
 8004cf8:	3002      	addeq	r0, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	db05      	blt.n	8004d0a <__hi0bits+0x3a>
 8004cfe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004d02:	f100 0001 	add.w	r0, r0, #1
 8004d06:	bf08      	it	eq
 8004d08:	2020      	moveq	r0, #32
 8004d0a:	4770      	bx	lr
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	e7e5      	b.n	8004cdc <__hi0bits+0xc>

08004d10 <__lo0bits>:
 8004d10:	6803      	ldr	r3, [r0, #0]
 8004d12:	4602      	mov	r2, r0
 8004d14:	f013 0007 	ands.w	r0, r3, #7
 8004d18:	d00b      	beq.n	8004d32 <__lo0bits+0x22>
 8004d1a:	07d9      	lsls	r1, r3, #31
 8004d1c:	d421      	bmi.n	8004d62 <__lo0bits+0x52>
 8004d1e:	0798      	lsls	r0, r3, #30
 8004d20:	bf49      	itett	mi
 8004d22:	085b      	lsrmi	r3, r3, #1
 8004d24:	089b      	lsrpl	r3, r3, #2
 8004d26:	2001      	movmi	r0, #1
 8004d28:	6013      	strmi	r3, [r2, #0]
 8004d2a:	bf5c      	itt	pl
 8004d2c:	2002      	movpl	r0, #2
 8004d2e:	6013      	strpl	r3, [r2, #0]
 8004d30:	4770      	bx	lr
 8004d32:	b299      	uxth	r1, r3
 8004d34:	b909      	cbnz	r1, 8004d3a <__lo0bits+0x2a>
 8004d36:	2010      	movs	r0, #16
 8004d38:	0c1b      	lsrs	r3, r3, #16
 8004d3a:	b2d9      	uxtb	r1, r3
 8004d3c:	b909      	cbnz	r1, 8004d42 <__lo0bits+0x32>
 8004d3e:	3008      	adds	r0, #8
 8004d40:	0a1b      	lsrs	r3, r3, #8
 8004d42:	0719      	lsls	r1, r3, #28
 8004d44:	bf04      	itt	eq
 8004d46:	091b      	lsreq	r3, r3, #4
 8004d48:	3004      	addeq	r0, #4
 8004d4a:	0799      	lsls	r1, r3, #30
 8004d4c:	bf04      	itt	eq
 8004d4e:	089b      	lsreq	r3, r3, #2
 8004d50:	3002      	addeq	r0, #2
 8004d52:	07d9      	lsls	r1, r3, #31
 8004d54:	d403      	bmi.n	8004d5e <__lo0bits+0x4e>
 8004d56:	085b      	lsrs	r3, r3, #1
 8004d58:	f100 0001 	add.w	r0, r0, #1
 8004d5c:	d003      	beq.n	8004d66 <__lo0bits+0x56>
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	4770      	bx	lr
 8004d62:	2000      	movs	r0, #0
 8004d64:	4770      	bx	lr
 8004d66:	2020      	movs	r0, #32
 8004d68:	4770      	bx	lr
	...

08004d6c <__i2b>:
 8004d6c:	b510      	push	{r4, lr}
 8004d6e:	460c      	mov	r4, r1
 8004d70:	2101      	movs	r1, #1
 8004d72:	f7ff ff05 	bl	8004b80 <_Balloc>
 8004d76:	4602      	mov	r2, r0
 8004d78:	b928      	cbnz	r0, 8004d86 <__i2b+0x1a>
 8004d7a:	f240 1145 	movw	r1, #325	; 0x145
 8004d7e:	4b04      	ldr	r3, [pc, #16]	; (8004d90 <__i2b+0x24>)
 8004d80:	4804      	ldr	r0, [pc, #16]	; (8004d94 <__i2b+0x28>)
 8004d82:	f000 fb2f 	bl	80053e4 <__assert_func>
 8004d86:	2301      	movs	r3, #1
 8004d88:	6144      	str	r4, [r0, #20]
 8004d8a:	6103      	str	r3, [r0, #16]
 8004d8c:	bd10      	pop	{r4, pc}
 8004d8e:	bf00      	nop
 8004d90:	08006406 	.word	0x08006406
 8004d94:	08006417 	.word	0x08006417

08004d98 <__multiply>:
 8004d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9c:	4691      	mov	r9, r2
 8004d9e:	690a      	ldr	r2, [r1, #16]
 8004da0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004da4:	460c      	mov	r4, r1
 8004da6:	429a      	cmp	r2, r3
 8004da8:	bfbe      	ittt	lt
 8004daa:	460b      	movlt	r3, r1
 8004dac:	464c      	movlt	r4, r9
 8004dae:	4699      	movlt	r9, r3
 8004db0:	6927      	ldr	r7, [r4, #16]
 8004db2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004db6:	68a3      	ldr	r3, [r4, #8]
 8004db8:	6861      	ldr	r1, [r4, #4]
 8004dba:	eb07 060a 	add.w	r6, r7, sl
 8004dbe:	42b3      	cmp	r3, r6
 8004dc0:	b085      	sub	sp, #20
 8004dc2:	bfb8      	it	lt
 8004dc4:	3101      	addlt	r1, #1
 8004dc6:	f7ff fedb 	bl	8004b80 <_Balloc>
 8004dca:	b930      	cbnz	r0, 8004dda <__multiply+0x42>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004dd2:	4b43      	ldr	r3, [pc, #268]	; (8004ee0 <__multiply+0x148>)
 8004dd4:	4843      	ldr	r0, [pc, #268]	; (8004ee4 <__multiply+0x14c>)
 8004dd6:	f000 fb05 	bl	80053e4 <__assert_func>
 8004dda:	f100 0514 	add.w	r5, r0, #20
 8004dde:	462b      	mov	r3, r5
 8004de0:	2200      	movs	r2, #0
 8004de2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004de6:	4543      	cmp	r3, r8
 8004de8:	d321      	bcc.n	8004e2e <__multiply+0x96>
 8004dea:	f104 0314 	add.w	r3, r4, #20
 8004dee:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004df2:	f109 0314 	add.w	r3, r9, #20
 8004df6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004dfa:	9202      	str	r2, [sp, #8]
 8004dfc:	1b3a      	subs	r2, r7, r4
 8004dfe:	3a15      	subs	r2, #21
 8004e00:	f022 0203 	bic.w	r2, r2, #3
 8004e04:	3204      	adds	r2, #4
 8004e06:	f104 0115 	add.w	r1, r4, #21
 8004e0a:	428f      	cmp	r7, r1
 8004e0c:	bf38      	it	cc
 8004e0e:	2204      	movcc	r2, #4
 8004e10:	9201      	str	r2, [sp, #4]
 8004e12:	9a02      	ldr	r2, [sp, #8]
 8004e14:	9303      	str	r3, [sp, #12]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d80c      	bhi.n	8004e34 <__multiply+0x9c>
 8004e1a:	2e00      	cmp	r6, #0
 8004e1c:	dd03      	ble.n	8004e26 <__multiply+0x8e>
 8004e1e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d05a      	beq.n	8004edc <__multiply+0x144>
 8004e26:	6106      	str	r6, [r0, #16]
 8004e28:	b005      	add	sp, #20
 8004e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e2e:	f843 2b04 	str.w	r2, [r3], #4
 8004e32:	e7d8      	b.n	8004de6 <__multiply+0x4e>
 8004e34:	f8b3 a000 	ldrh.w	sl, [r3]
 8004e38:	f1ba 0f00 	cmp.w	sl, #0
 8004e3c:	d023      	beq.n	8004e86 <__multiply+0xee>
 8004e3e:	46a9      	mov	r9, r5
 8004e40:	f04f 0c00 	mov.w	ip, #0
 8004e44:	f104 0e14 	add.w	lr, r4, #20
 8004e48:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004e4c:	f8d9 1000 	ldr.w	r1, [r9]
 8004e50:	fa1f fb82 	uxth.w	fp, r2
 8004e54:	b289      	uxth	r1, r1
 8004e56:	fb0a 110b 	mla	r1, sl, fp, r1
 8004e5a:	4461      	add	r1, ip
 8004e5c:	f8d9 c000 	ldr.w	ip, [r9]
 8004e60:	0c12      	lsrs	r2, r2, #16
 8004e62:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004e66:	fb0a c202 	mla	r2, sl, r2, ip
 8004e6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004e6e:	b289      	uxth	r1, r1
 8004e70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004e74:	4577      	cmp	r7, lr
 8004e76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004e7a:	f849 1b04 	str.w	r1, [r9], #4
 8004e7e:	d8e3      	bhi.n	8004e48 <__multiply+0xb0>
 8004e80:	9a01      	ldr	r2, [sp, #4]
 8004e82:	f845 c002 	str.w	ip, [r5, r2]
 8004e86:	9a03      	ldr	r2, [sp, #12]
 8004e88:	3304      	adds	r3, #4
 8004e8a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004e8e:	f1b9 0f00 	cmp.w	r9, #0
 8004e92:	d021      	beq.n	8004ed8 <__multiply+0x140>
 8004e94:	46ae      	mov	lr, r5
 8004e96:	f04f 0a00 	mov.w	sl, #0
 8004e9a:	6829      	ldr	r1, [r5, #0]
 8004e9c:	f104 0c14 	add.w	ip, r4, #20
 8004ea0:	f8bc b000 	ldrh.w	fp, [ip]
 8004ea4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004ea8:	b289      	uxth	r1, r1
 8004eaa:	fb09 220b 	mla	r2, r9, fp, r2
 8004eae:	4452      	add	r2, sl
 8004eb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004eb4:	f84e 1b04 	str.w	r1, [lr], #4
 8004eb8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004ebc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004ec0:	f8be 1000 	ldrh.w	r1, [lr]
 8004ec4:	4567      	cmp	r7, ip
 8004ec6:	fb09 110a 	mla	r1, r9, sl, r1
 8004eca:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004ece:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004ed2:	d8e5      	bhi.n	8004ea0 <__multiply+0x108>
 8004ed4:	9a01      	ldr	r2, [sp, #4]
 8004ed6:	50a9      	str	r1, [r5, r2]
 8004ed8:	3504      	adds	r5, #4
 8004eda:	e79a      	b.n	8004e12 <__multiply+0x7a>
 8004edc:	3e01      	subs	r6, #1
 8004ede:	e79c      	b.n	8004e1a <__multiply+0x82>
 8004ee0:	08006406 	.word	0x08006406
 8004ee4:	08006417 	.word	0x08006417

08004ee8 <__pow5mult>:
 8004ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004eec:	4615      	mov	r5, r2
 8004eee:	f012 0203 	ands.w	r2, r2, #3
 8004ef2:	4606      	mov	r6, r0
 8004ef4:	460f      	mov	r7, r1
 8004ef6:	d007      	beq.n	8004f08 <__pow5mult+0x20>
 8004ef8:	4c25      	ldr	r4, [pc, #148]	; (8004f90 <__pow5mult+0xa8>)
 8004efa:	3a01      	subs	r2, #1
 8004efc:	2300      	movs	r3, #0
 8004efe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004f02:	f7ff fe9f 	bl	8004c44 <__multadd>
 8004f06:	4607      	mov	r7, r0
 8004f08:	10ad      	asrs	r5, r5, #2
 8004f0a:	d03d      	beq.n	8004f88 <__pow5mult+0xa0>
 8004f0c:	69f4      	ldr	r4, [r6, #28]
 8004f0e:	b97c      	cbnz	r4, 8004f30 <__pow5mult+0x48>
 8004f10:	2010      	movs	r0, #16
 8004f12:	f7ff fd81 	bl	8004a18 <malloc>
 8004f16:	4602      	mov	r2, r0
 8004f18:	61f0      	str	r0, [r6, #28]
 8004f1a:	b928      	cbnz	r0, 8004f28 <__pow5mult+0x40>
 8004f1c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004f20:	4b1c      	ldr	r3, [pc, #112]	; (8004f94 <__pow5mult+0xac>)
 8004f22:	481d      	ldr	r0, [pc, #116]	; (8004f98 <__pow5mult+0xb0>)
 8004f24:	f000 fa5e 	bl	80053e4 <__assert_func>
 8004f28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004f2c:	6004      	str	r4, [r0, #0]
 8004f2e:	60c4      	str	r4, [r0, #12]
 8004f30:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004f34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004f38:	b94c      	cbnz	r4, 8004f4e <__pow5mult+0x66>
 8004f3a:	f240 2171 	movw	r1, #625	; 0x271
 8004f3e:	4630      	mov	r0, r6
 8004f40:	f7ff ff14 	bl	8004d6c <__i2b>
 8004f44:	2300      	movs	r3, #0
 8004f46:	4604      	mov	r4, r0
 8004f48:	f8c8 0008 	str.w	r0, [r8, #8]
 8004f4c:	6003      	str	r3, [r0, #0]
 8004f4e:	f04f 0900 	mov.w	r9, #0
 8004f52:	07eb      	lsls	r3, r5, #31
 8004f54:	d50a      	bpl.n	8004f6c <__pow5mult+0x84>
 8004f56:	4639      	mov	r1, r7
 8004f58:	4622      	mov	r2, r4
 8004f5a:	4630      	mov	r0, r6
 8004f5c:	f7ff ff1c 	bl	8004d98 <__multiply>
 8004f60:	4680      	mov	r8, r0
 8004f62:	4639      	mov	r1, r7
 8004f64:	4630      	mov	r0, r6
 8004f66:	f7ff fe4b 	bl	8004c00 <_Bfree>
 8004f6a:	4647      	mov	r7, r8
 8004f6c:	106d      	asrs	r5, r5, #1
 8004f6e:	d00b      	beq.n	8004f88 <__pow5mult+0xa0>
 8004f70:	6820      	ldr	r0, [r4, #0]
 8004f72:	b938      	cbnz	r0, 8004f84 <__pow5mult+0x9c>
 8004f74:	4622      	mov	r2, r4
 8004f76:	4621      	mov	r1, r4
 8004f78:	4630      	mov	r0, r6
 8004f7a:	f7ff ff0d 	bl	8004d98 <__multiply>
 8004f7e:	6020      	str	r0, [r4, #0]
 8004f80:	f8c0 9000 	str.w	r9, [r0]
 8004f84:	4604      	mov	r4, r0
 8004f86:	e7e4      	b.n	8004f52 <__pow5mult+0x6a>
 8004f88:	4638      	mov	r0, r7
 8004f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f8e:	bf00      	nop
 8004f90:	08006560 	.word	0x08006560
 8004f94:	08006397 	.word	0x08006397
 8004f98:	08006417 	.word	0x08006417

08004f9c <__lshift>:
 8004f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa0:	460c      	mov	r4, r1
 8004fa2:	4607      	mov	r7, r0
 8004fa4:	4691      	mov	r9, r2
 8004fa6:	6923      	ldr	r3, [r4, #16]
 8004fa8:	6849      	ldr	r1, [r1, #4]
 8004faa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004fae:	68a3      	ldr	r3, [r4, #8]
 8004fb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004fb4:	f108 0601 	add.w	r6, r8, #1
 8004fb8:	42b3      	cmp	r3, r6
 8004fba:	db0b      	blt.n	8004fd4 <__lshift+0x38>
 8004fbc:	4638      	mov	r0, r7
 8004fbe:	f7ff fddf 	bl	8004b80 <_Balloc>
 8004fc2:	4605      	mov	r5, r0
 8004fc4:	b948      	cbnz	r0, 8004fda <__lshift+0x3e>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004fcc:	4b27      	ldr	r3, [pc, #156]	; (800506c <__lshift+0xd0>)
 8004fce:	4828      	ldr	r0, [pc, #160]	; (8005070 <__lshift+0xd4>)
 8004fd0:	f000 fa08 	bl	80053e4 <__assert_func>
 8004fd4:	3101      	adds	r1, #1
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	e7ee      	b.n	8004fb8 <__lshift+0x1c>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f100 0114 	add.w	r1, r0, #20
 8004fe0:	f100 0210 	add.w	r2, r0, #16
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	4553      	cmp	r3, sl
 8004fe8:	db33      	blt.n	8005052 <__lshift+0xb6>
 8004fea:	6920      	ldr	r0, [r4, #16]
 8004fec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ff0:	f104 0314 	add.w	r3, r4, #20
 8004ff4:	f019 091f 	ands.w	r9, r9, #31
 8004ff8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004ffc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005000:	d02b      	beq.n	800505a <__lshift+0xbe>
 8005002:	468a      	mov	sl, r1
 8005004:	2200      	movs	r2, #0
 8005006:	f1c9 0e20 	rsb	lr, r9, #32
 800500a:	6818      	ldr	r0, [r3, #0]
 800500c:	fa00 f009 	lsl.w	r0, r0, r9
 8005010:	4310      	orrs	r0, r2
 8005012:	f84a 0b04 	str.w	r0, [sl], #4
 8005016:	f853 2b04 	ldr.w	r2, [r3], #4
 800501a:	459c      	cmp	ip, r3
 800501c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005020:	d8f3      	bhi.n	800500a <__lshift+0x6e>
 8005022:	ebac 0304 	sub.w	r3, ip, r4
 8005026:	3b15      	subs	r3, #21
 8005028:	f023 0303 	bic.w	r3, r3, #3
 800502c:	3304      	adds	r3, #4
 800502e:	f104 0015 	add.w	r0, r4, #21
 8005032:	4584      	cmp	ip, r0
 8005034:	bf38      	it	cc
 8005036:	2304      	movcc	r3, #4
 8005038:	50ca      	str	r2, [r1, r3]
 800503a:	b10a      	cbz	r2, 8005040 <__lshift+0xa4>
 800503c:	f108 0602 	add.w	r6, r8, #2
 8005040:	3e01      	subs	r6, #1
 8005042:	4638      	mov	r0, r7
 8005044:	4621      	mov	r1, r4
 8005046:	612e      	str	r6, [r5, #16]
 8005048:	f7ff fdda 	bl	8004c00 <_Bfree>
 800504c:	4628      	mov	r0, r5
 800504e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005052:	f842 0f04 	str.w	r0, [r2, #4]!
 8005056:	3301      	adds	r3, #1
 8005058:	e7c5      	b.n	8004fe6 <__lshift+0x4a>
 800505a:	3904      	subs	r1, #4
 800505c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005060:	459c      	cmp	ip, r3
 8005062:	f841 2f04 	str.w	r2, [r1, #4]!
 8005066:	d8f9      	bhi.n	800505c <__lshift+0xc0>
 8005068:	e7ea      	b.n	8005040 <__lshift+0xa4>
 800506a:	bf00      	nop
 800506c:	08006406 	.word	0x08006406
 8005070:	08006417 	.word	0x08006417

08005074 <__mcmp>:
 8005074:	4603      	mov	r3, r0
 8005076:	690a      	ldr	r2, [r1, #16]
 8005078:	6900      	ldr	r0, [r0, #16]
 800507a:	b530      	push	{r4, r5, lr}
 800507c:	1a80      	subs	r0, r0, r2
 800507e:	d10d      	bne.n	800509c <__mcmp+0x28>
 8005080:	3314      	adds	r3, #20
 8005082:	3114      	adds	r1, #20
 8005084:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005088:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800508c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005090:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005094:	4295      	cmp	r5, r2
 8005096:	d002      	beq.n	800509e <__mcmp+0x2a>
 8005098:	d304      	bcc.n	80050a4 <__mcmp+0x30>
 800509a:	2001      	movs	r0, #1
 800509c:	bd30      	pop	{r4, r5, pc}
 800509e:	42a3      	cmp	r3, r4
 80050a0:	d3f4      	bcc.n	800508c <__mcmp+0x18>
 80050a2:	e7fb      	b.n	800509c <__mcmp+0x28>
 80050a4:	f04f 30ff 	mov.w	r0, #4294967295
 80050a8:	e7f8      	b.n	800509c <__mcmp+0x28>
	...

080050ac <__mdiff>:
 80050ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b0:	460d      	mov	r5, r1
 80050b2:	4607      	mov	r7, r0
 80050b4:	4611      	mov	r1, r2
 80050b6:	4628      	mov	r0, r5
 80050b8:	4614      	mov	r4, r2
 80050ba:	f7ff ffdb 	bl	8005074 <__mcmp>
 80050be:	1e06      	subs	r6, r0, #0
 80050c0:	d111      	bne.n	80050e6 <__mdiff+0x3a>
 80050c2:	4631      	mov	r1, r6
 80050c4:	4638      	mov	r0, r7
 80050c6:	f7ff fd5b 	bl	8004b80 <_Balloc>
 80050ca:	4602      	mov	r2, r0
 80050cc:	b928      	cbnz	r0, 80050da <__mdiff+0x2e>
 80050ce:	f240 2137 	movw	r1, #567	; 0x237
 80050d2:	4b3a      	ldr	r3, [pc, #232]	; (80051bc <__mdiff+0x110>)
 80050d4:	483a      	ldr	r0, [pc, #232]	; (80051c0 <__mdiff+0x114>)
 80050d6:	f000 f985 	bl	80053e4 <__assert_func>
 80050da:	2301      	movs	r3, #1
 80050dc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80050e0:	4610      	mov	r0, r2
 80050e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050e6:	bfa4      	itt	ge
 80050e8:	4623      	movge	r3, r4
 80050ea:	462c      	movge	r4, r5
 80050ec:	4638      	mov	r0, r7
 80050ee:	6861      	ldr	r1, [r4, #4]
 80050f0:	bfa6      	itte	ge
 80050f2:	461d      	movge	r5, r3
 80050f4:	2600      	movge	r6, #0
 80050f6:	2601      	movlt	r6, #1
 80050f8:	f7ff fd42 	bl	8004b80 <_Balloc>
 80050fc:	4602      	mov	r2, r0
 80050fe:	b918      	cbnz	r0, 8005108 <__mdiff+0x5c>
 8005100:	f240 2145 	movw	r1, #581	; 0x245
 8005104:	4b2d      	ldr	r3, [pc, #180]	; (80051bc <__mdiff+0x110>)
 8005106:	e7e5      	b.n	80050d4 <__mdiff+0x28>
 8005108:	f102 0814 	add.w	r8, r2, #20
 800510c:	46c2      	mov	sl, r8
 800510e:	f04f 0c00 	mov.w	ip, #0
 8005112:	6927      	ldr	r7, [r4, #16]
 8005114:	60c6      	str	r6, [r0, #12]
 8005116:	692e      	ldr	r6, [r5, #16]
 8005118:	f104 0014 	add.w	r0, r4, #20
 800511c:	f105 0914 	add.w	r9, r5, #20
 8005120:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005124:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005128:	3410      	adds	r4, #16
 800512a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800512e:	f859 3b04 	ldr.w	r3, [r9], #4
 8005132:	fa1f f18b 	uxth.w	r1, fp
 8005136:	4461      	add	r1, ip
 8005138:	fa1f fc83 	uxth.w	ip, r3
 800513c:	0c1b      	lsrs	r3, r3, #16
 800513e:	eba1 010c 	sub.w	r1, r1, ip
 8005142:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005146:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800514a:	b289      	uxth	r1, r1
 800514c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005150:	454e      	cmp	r6, r9
 8005152:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005156:	f84a 1b04 	str.w	r1, [sl], #4
 800515a:	d8e6      	bhi.n	800512a <__mdiff+0x7e>
 800515c:	1b73      	subs	r3, r6, r5
 800515e:	3b15      	subs	r3, #21
 8005160:	f023 0303 	bic.w	r3, r3, #3
 8005164:	3515      	adds	r5, #21
 8005166:	3304      	adds	r3, #4
 8005168:	42ae      	cmp	r6, r5
 800516a:	bf38      	it	cc
 800516c:	2304      	movcc	r3, #4
 800516e:	4418      	add	r0, r3
 8005170:	4443      	add	r3, r8
 8005172:	461e      	mov	r6, r3
 8005174:	4605      	mov	r5, r0
 8005176:	4575      	cmp	r5, lr
 8005178:	d30e      	bcc.n	8005198 <__mdiff+0xec>
 800517a:	f10e 0103 	add.w	r1, lr, #3
 800517e:	1a09      	subs	r1, r1, r0
 8005180:	f021 0103 	bic.w	r1, r1, #3
 8005184:	3803      	subs	r0, #3
 8005186:	4586      	cmp	lr, r0
 8005188:	bf38      	it	cc
 800518a:	2100      	movcc	r1, #0
 800518c:	440b      	add	r3, r1
 800518e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005192:	b189      	cbz	r1, 80051b8 <__mdiff+0x10c>
 8005194:	6117      	str	r7, [r2, #16]
 8005196:	e7a3      	b.n	80050e0 <__mdiff+0x34>
 8005198:	f855 8b04 	ldr.w	r8, [r5], #4
 800519c:	fa1f f188 	uxth.w	r1, r8
 80051a0:	4461      	add	r1, ip
 80051a2:	140c      	asrs	r4, r1, #16
 80051a4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80051a8:	b289      	uxth	r1, r1
 80051aa:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80051ae:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80051b2:	f846 1b04 	str.w	r1, [r6], #4
 80051b6:	e7de      	b.n	8005176 <__mdiff+0xca>
 80051b8:	3f01      	subs	r7, #1
 80051ba:	e7e8      	b.n	800518e <__mdiff+0xe2>
 80051bc:	08006406 	.word	0x08006406
 80051c0:	08006417 	.word	0x08006417

080051c4 <__d2b>:
 80051c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051c6:	2101      	movs	r1, #1
 80051c8:	4617      	mov	r7, r2
 80051ca:	461c      	mov	r4, r3
 80051cc:	9e08      	ldr	r6, [sp, #32]
 80051ce:	f7ff fcd7 	bl	8004b80 <_Balloc>
 80051d2:	4605      	mov	r5, r0
 80051d4:	b930      	cbnz	r0, 80051e4 <__d2b+0x20>
 80051d6:	4602      	mov	r2, r0
 80051d8:	f240 310f 	movw	r1, #783	; 0x30f
 80051dc:	4b22      	ldr	r3, [pc, #136]	; (8005268 <__d2b+0xa4>)
 80051de:	4823      	ldr	r0, [pc, #140]	; (800526c <__d2b+0xa8>)
 80051e0:	f000 f900 	bl	80053e4 <__assert_func>
 80051e4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80051e8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80051ec:	bb24      	cbnz	r4, 8005238 <__d2b+0x74>
 80051ee:	2f00      	cmp	r7, #0
 80051f0:	9301      	str	r3, [sp, #4]
 80051f2:	d026      	beq.n	8005242 <__d2b+0x7e>
 80051f4:	4668      	mov	r0, sp
 80051f6:	9700      	str	r7, [sp, #0]
 80051f8:	f7ff fd8a 	bl	8004d10 <__lo0bits>
 80051fc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005200:	b1e8      	cbz	r0, 800523e <__d2b+0x7a>
 8005202:	f1c0 0320 	rsb	r3, r0, #32
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	430b      	orrs	r3, r1
 800520c:	40c2      	lsrs	r2, r0
 800520e:	616b      	str	r3, [r5, #20]
 8005210:	9201      	str	r2, [sp, #4]
 8005212:	9b01      	ldr	r3, [sp, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	bf14      	ite	ne
 8005218:	2102      	movne	r1, #2
 800521a:	2101      	moveq	r1, #1
 800521c:	61ab      	str	r3, [r5, #24]
 800521e:	6129      	str	r1, [r5, #16]
 8005220:	b1bc      	cbz	r4, 8005252 <__d2b+0x8e>
 8005222:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005226:	4404      	add	r4, r0
 8005228:	6034      	str	r4, [r6, #0]
 800522a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800522e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005230:	6018      	str	r0, [r3, #0]
 8005232:	4628      	mov	r0, r5
 8005234:	b003      	add	sp, #12
 8005236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005238:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800523c:	e7d7      	b.n	80051ee <__d2b+0x2a>
 800523e:	6169      	str	r1, [r5, #20]
 8005240:	e7e7      	b.n	8005212 <__d2b+0x4e>
 8005242:	a801      	add	r0, sp, #4
 8005244:	f7ff fd64 	bl	8004d10 <__lo0bits>
 8005248:	9b01      	ldr	r3, [sp, #4]
 800524a:	2101      	movs	r1, #1
 800524c:	616b      	str	r3, [r5, #20]
 800524e:	3020      	adds	r0, #32
 8005250:	e7e5      	b.n	800521e <__d2b+0x5a>
 8005252:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005256:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800525a:	6030      	str	r0, [r6, #0]
 800525c:	6918      	ldr	r0, [r3, #16]
 800525e:	f7ff fd37 	bl	8004cd0 <__hi0bits>
 8005262:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005266:	e7e2      	b.n	800522e <__d2b+0x6a>
 8005268:	08006406 	.word	0x08006406
 800526c:	08006417 	.word	0x08006417

08005270 <__sflush_r>:
 8005270:	898a      	ldrh	r2, [r1, #12]
 8005272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005274:	4605      	mov	r5, r0
 8005276:	0710      	lsls	r0, r2, #28
 8005278:	460c      	mov	r4, r1
 800527a:	d457      	bmi.n	800532c <__sflush_r+0xbc>
 800527c:	684b      	ldr	r3, [r1, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	dc04      	bgt.n	800528c <__sflush_r+0x1c>
 8005282:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005284:	2b00      	cmp	r3, #0
 8005286:	dc01      	bgt.n	800528c <__sflush_r+0x1c>
 8005288:	2000      	movs	r0, #0
 800528a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800528c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800528e:	2e00      	cmp	r6, #0
 8005290:	d0fa      	beq.n	8005288 <__sflush_r+0x18>
 8005292:	2300      	movs	r3, #0
 8005294:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005298:	682f      	ldr	r7, [r5, #0]
 800529a:	6a21      	ldr	r1, [r4, #32]
 800529c:	602b      	str	r3, [r5, #0]
 800529e:	d032      	beq.n	8005306 <__sflush_r+0x96>
 80052a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80052a2:	89a3      	ldrh	r3, [r4, #12]
 80052a4:	075a      	lsls	r2, r3, #29
 80052a6:	d505      	bpl.n	80052b4 <__sflush_r+0x44>
 80052a8:	6863      	ldr	r3, [r4, #4]
 80052aa:	1ac0      	subs	r0, r0, r3
 80052ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052ae:	b10b      	cbz	r3, 80052b4 <__sflush_r+0x44>
 80052b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052b2:	1ac0      	subs	r0, r0, r3
 80052b4:	2300      	movs	r3, #0
 80052b6:	4602      	mov	r2, r0
 80052b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052ba:	4628      	mov	r0, r5
 80052bc:	6a21      	ldr	r1, [r4, #32]
 80052be:	47b0      	blx	r6
 80052c0:	1c43      	adds	r3, r0, #1
 80052c2:	89a3      	ldrh	r3, [r4, #12]
 80052c4:	d106      	bne.n	80052d4 <__sflush_r+0x64>
 80052c6:	6829      	ldr	r1, [r5, #0]
 80052c8:	291d      	cmp	r1, #29
 80052ca:	d82b      	bhi.n	8005324 <__sflush_r+0xb4>
 80052cc:	4a28      	ldr	r2, [pc, #160]	; (8005370 <__sflush_r+0x100>)
 80052ce:	410a      	asrs	r2, r1
 80052d0:	07d6      	lsls	r6, r2, #31
 80052d2:	d427      	bmi.n	8005324 <__sflush_r+0xb4>
 80052d4:	2200      	movs	r2, #0
 80052d6:	6062      	str	r2, [r4, #4]
 80052d8:	6922      	ldr	r2, [r4, #16]
 80052da:	04d9      	lsls	r1, r3, #19
 80052dc:	6022      	str	r2, [r4, #0]
 80052de:	d504      	bpl.n	80052ea <__sflush_r+0x7a>
 80052e0:	1c42      	adds	r2, r0, #1
 80052e2:	d101      	bne.n	80052e8 <__sflush_r+0x78>
 80052e4:	682b      	ldr	r3, [r5, #0]
 80052e6:	b903      	cbnz	r3, 80052ea <__sflush_r+0x7a>
 80052e8:	6560      	str	r0, [r4, #84]	; 0x54
 80052ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052ec:	602f      	str	r7, [r5, #0]
 80052ee:	2900      	cmp	r1, #0
 80052f0:	d0ca      	beq.n	8005288 <__sflush_r+0x18>
 80052f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052f6:	4299      	cmp	r1, r3
 80052f8:	d002      	beq.n	8005300 <__sflush_r+0x90>
 80052fa:	4628      	mov	r0, r5
 80052fc:	f7ff fb44 	bl	8004988 <_free_r>
 8005300:	2000      	movs	r0, #0
 8005302:	6360      	str	r0, [r4, #52]	; 0x34
 8005304:	e7c1      	b.n	800528a <__sflush_r+0x1a>
 8005306:	2301      	movs	r3, #1
 8005308:	4628      	mov	r0, r5
 800530a:	47b0      	blx	r6
 800530c:	1c41      	adds	r1, r0, #1
 800530e:	d1c8      	bne.n	80052a2 <__sflush_r+0x32>
 8005310:	682b      	ldr	r3, [r5, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d0c5      	beq.n	80052a2 <__sflush_r+0x32>
 8005316:	2b1d      	cmp	r3, #29
 8005318:	d001      	beq.n	800531e <__sflush_r+0xae>
 800531a:	2b16      	cmp	r3, #22
 800531c:	d101      	bne.n	8005322 <__sflush_r+0xb2>
 800531e:	602f      	str	r7, [r5, #0]
 8005320:	e7b2      	b.n	8005288 <__sflush_r+0x18>
 8005322:	89a3      	ldrh	r3, [r4, #12]
 8005324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005328:	81a3      	strh	r3, [r4, #12]
 800532a:	e7ae      	b.n	800528a <__sflush_r+0x1a>
 800532c:	690f      	ldr	r7, [r1, #16]
 800532e:	2f00      	cmp	r7, #0
 8005330:	d0aa      	beq.n	8005288 <__sflush_r+0x18>
 8005332:	0793      	lsls	r3, r2, #30
 8005334:	bf18      	it	ne
 8005336:	2300      	movne	r3, #0
 8005338:	680e      	ldr	r6, [r1, #0]
 800533a:	bf08      	it	eq
 800533c:	694b      	ldreq	r3, [r1, #20]
 800533e:	1bf6      	subs	r6, r6, r7
 8005340:	600f      	str	r7, [r1, #0]
 8005342:	608b      	str	r3, [r1, #8]
 8005344:	2e00      	cmp	r6, #0
 8005346:	dd9f      	ble.n	8005288 <__sflush_r+0x18>
 8005348:	4633      	mov	r3, r6
 800534a:	463a      	mov	r2, r7
 800534c:	4628      	mov	r0, r5
 800534e:	6a21      	ldr	r1, [r4, #32]
 8005350:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005354:	47e0      	blx	ip
 8005356:	2800      	cmp	r0, #0
 8005358:	dc06      	bgt.n	8005368 <__sflush_r+0xf8>
 800535a:	89a3      	ldrh	r3, [r4, #12]
 800535c:	f04f 30ff 	mov.w	r0, #4294967295
 8005360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005364:	81a3      	strh	r3, [r4, #12]
 8005366:	e790      	b.n	800528a <__sflush_r+0x1a>
 8005368:	4407      	add	r7, r0
 800536a:	1a36      	subs	r6, r6, r0
 800536c:	e7ea      	b.n	8005344 <__sflush_r+0xd4>
 800536e:	bf00      	nop
 8005370:	dfbffffe 	.word	0xdfbffffe

08005374 <_fflush_r>:
 8005374:	b538      	push	{r3, r4, r5, lr}
 8005376:	690b      	ldr	r3, [r1, #16]
 8005378:	4605      	mov	r5, r0
 800537a:	460c      	mov	r4, r1
 800537c:	b913      	cbnz	r3, 8005384 <_fflush_r+0x10>
 800537e:	2500      	movs	r5, #0
 8005380:	4628      	mov	r0, r5
 8005382:	bd38      	pop	{r3, r4, r5, pc}
 8005384:	b118      	cbz	r0, 800538e <_fflush_r+0x1a>
 8005386:	6a03      	ldr	r3, [r0, #32]
 8005388:	b90b      	cbnz	r3, 800538e <_fflush_r+0x1a>
 800538a:	f7fe fb69 	bl	8003a60 <__sinit>
 800538e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d0f3      	beq.n	800537e <_fflush_r+0xa>
 8005396:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005398:	07d0      	lsls	r0, r2, #31
 800539a:	d404      	bmi.n	80053a6 <_fflush_r+0x32>
 800539c:	0599      	lsls	r1, r3, #22
 800539e:	d402      	bmi.n	80053a6 <_fflush_r+0x32>
 80053a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053a2:	f7fe fc64 	bl	8003c6e <__retarget_lock_acquire_recursive>
 80053a6:	4628      	mov	r0, r5
 80053a8:	4621      	mov	r1, r4
 80053aa:	f7ff ff61 	bl	8005270 <__sflush_r>
 80053ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053b0:	4605      	mov	r5, r0
 80053b2:	07da      	lsls	r2, r3, #31
 80053b4:	d4e4      	bmi.n	8005380 <_fflush_r+0xc>
 80053b6:	89a3      	ldrh	r3, [r4, #12]
 80053b8:	059b      	lsls	r3, r3, #22
 80053ba:	d4e1      	bmi.n	8005380 <_fflush_r+0xc>
 80053bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053be:	f7fe fc57 	bl	8003c70 <__retarget_lock_release_recursive>
 80053c2:	e7dd      	b.n	8005380 <_fflush_r+0xc>

080053c4 <_sbrk_r>:
 80053c4:	b538      	push	{r3, r4, r5, lr}
 80053c6:	2300      	movs	r3, #0
 80053c8:	4d05      	ldr	r5, [pc, #20]	; (80053e0 <_sbrk_r+0x1c>)
 80053ca:	4604      	mov	r4, r0
 80053cc:	4608      	mov	r0, r1
 80053ce:	602b      	str	r3, [r5, #0]
 80053d0:	f7fc f9f8 	bl	80017c4 <_sbrk>
 80053d4:	1c43      	adds	r3, r0, #1
 80053d6:	d102      	bne.n	80053de <_sbrk_r+0x1a>
 80053d8:	682b      	ldr	r3, [r5, #0]
 80053da:	b103      	cbz	r3, 80053de <_sbrk_r+0x1a>
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	bd38      	pop	{r3, r4, r5, pc}
 80053e0:	20000818 	.word	0x20000818

080053e4 <__assert_func>:
 80053e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80053e6:	4614      	mov	r4, r2
 80053e8:	461a      	mov	r2, r3
 80053ea:	4b09      	ldr	r3, [pc, #36]	; (8005410 <__assert_func+0x2c>)
 80053ec:	4605      	mov	r5, r0
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68d8      	ldr	r0, [r3, #12]
 80053f2:	b14c      	cbz	r4, 8005408 <__assert_func+0x24>
 80053f4:	4b07      	ldr	r3, [pc, #28]	; (8005414 <__assert_func+0x30>)
 80053f6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80053fa:	9100      	str	r1, [sp, #0]
 80053fc:	462b      	mov	r3, r5
 80053fe:	4906      	ldr	r1, [pc, #24]	; (8005418 <__assert_func+0x34>)
 8005400:	f000 f842 	bl	8005488 <fiprintf>
 8005404:	f000 f852 	bl	80054ac <abort>
 8005408:	4b04      	ldr	r3, [pc, #16]	; (800541c <__assert_func+0x38>)
 800540a:	461c      	mov	r4, r3
 800540c:	e7f3      	b.n	80053f6 <__assert_func+0x12>
 800540e:	bf00      	nop
 8005410:	20000068 	.word	0x20000068
 8005414:	08006576 	.word	0x08006576
 8005418:	08006583 	.word	0x08006583
 800541c:	080065b1 	.word	0x080065b1

08005420 <_calloc_r>:
 8005420:	b570      	push	{r4, r5, r6, lr}
 8005422:	fba1 5402 	umull	r5, r4, r1, r2
 8005426:	b934      	cbnz	r4, 8005436 <_calloc_r+0x16>
 8005428:	4629      	mov	r1, r5
 800542a:	f7ff fb1d 	bl	8004a68 <_malloc_r>
 800542e:	4606      	mov	r6, r0
 8005430:	b928      	cbnz	r0, 800543e <_calloc_r+0x1e>
 8005432:	4630      	mov	r0, r6
 8005434:	bd70      	pop	{r4, r5, r6, pc}
 8005436:	220c      	movs	r2, #12
 8005438:	2600      	movs	r6, #0
 800543a:	6002      	str	r2, [r0, #0]
 800543c:	e7f9      	b.n	8005432 <_calloc_r+0x12>
 800543e:	462a      	mov	r2, r5
 8005440:	4621      	mov	r1, r4
 8005442:	f7fe fb96 	bl	8003b72 <memset>
 8005446:	e7f4      	b.n	8005432 <_calloc_r+0x12>

08005448 <__ascii_mbtowc>:
 8005448:	b082      	sub	sp, #8
 800544a:	b901      	cbnz	r1, 800544e <__ascii_mbtowc+0x6>
 800544c:	a901      	add	r1, sp, #4
 800544e:	b142      	cbz	r2, 8005462 <__ascii_mbtowc+0x1a>
 8005450:	b14b      	cbz	r3, 8005466 <__ascii_mbtowc+0x1e>
 8005452:	7813      	ldrb	r3, [r2, #0]
 8005454:	600b      	str	r3, [r1, #0]
 8005456:	7812      	ldrb	r2, [r2, #0]
 8005458:	1e10      	subs	r0, r2, #0
 800545a:	bf18      	it	ne
 800545c:	2001      	movne	r0, #1
 800545e:	b002      	add	sp, #8
 8005460:	4770      	bx	lr
 8005462:	4610      	mov	r0, r2
 8005464:	e7fb      	b.n	800545e <__ascii_mbtowc+0x16>
 8005466:	f06f 0001 	mvn.w	r0, #1
 800546a:	e7f8      	b.n	800545e <__ascii_mbtowc+0x16>

0800546c <__ascii_wctomb>:
 800546c:	4603      	mov	r3, r0
 800546e:	4608      	mov	r0, r1
 8005470:	b141      	cbz	r1, 8005484 <__ascii_wctomb+0x18>
 8005472:	2aff      	cmp	r2, #255	; 0xff
 8005474:	d904      	bls.n	8005480 <__ascii_wctomb+0x14>
 8005476:	228a      	movs	r2, #138	; 0x8a
 8005478:	f04f 30ff 	mov.w	r0, #4294967295
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	4770      	bx	lr
 8005480:	2001      	movs	r0, #1
 8005482:	700a      	strb	r2, [r1, #0]
 8005484:	4770      	bx	lr
	...

08005488 <fiprintf>:
 8005488:	b40e      	push	{r1, r2, r3}
 800548a:	b503      	push	{r0, r1, lr}
 800548c:	4601      	mov	r1, r0
 800548e:	ab03      	add	r3, sp, #12
 8005490:	4805      	ldr	r0, [pc, #20]	; (80054a8 <fiprintf+0x20>)
 8005492:	f853 2b04 	ldr.w	r2, [r3], #4
 8005496:	6800      	ldr	r0, [r0, #0]
 8005498:	9301      	str	r3, [sp, #4]
 800549a:	f000 f835 	bl	8005508 <_vfiprintf_r>
 800549e:	b002      	add	sp, #8
 80054a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80054a4:	b003      	add	sp, #12
 80054a6:	4770      	bx	lr
 80054a8:	20000068 	.word	0x20000068

080054ac <abort>:
 80054ac:	2006      	movs	r0, #6
 80054ae:	b508      	push	{r3, lr}
 80054b0:	f000 fa02 	bl	80058b8 <raise>
 80054b4:	2001      	movs	r0, #1
 80054b6:	f7fc f911 	bl	80016dc <_exit>

080054ba <__sfputc_r>:
 80054ba:	6893      	ldr	r3, [r2, #8]
 80054bc:	b410      	push	{r4}
 80054be:	3b01      	subs	r3, #1
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	6093      	str	r3, [r2, #8]
 80054c4:	da07      	bge.n	80054d6 <__sfputc_r+0x1c>
 80054c6:	6994      	ldr	r4, [r2, #24]
 80054c8:	42a3      	cmp	r3, r4
 80054ca:	db01      	blt.n	80054d0 <__sfputc_r+0x16>
 80054cc:	290a      	cmp	r1, #10
 80054ce:	d102      	bne.n	80054d6 <__sfputc_r+0x1c>
 80054d0:	bc10      	pop	{r4}
 80054d2:	f000 b933 	b.w	800573c <__swbuf_r>
 80054d6:	6813      	ldr	r3, [r2, #0]
 80054d8:	1c58      	adds	r0, r3, #1
 80054da:	6010      	str	r0, [r2, #0]
 80054dc:	7019      	strb	r1, [r3, #0]
 80054de:	4608      	mov	r0, r1
 80054e0:	bc10      	pop	{r4}
 80054e2:	4770      	bx	lr

080054e4 <__sfputs_r>:
 80054e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e6:	4606      	mov	r6, r0
 80054e8:	460f      	mov	r7, r1
 80054ea:	4614      	mov	r4, r2
 80054ec:	18d5      	adds	r5, r2, r3
 80054ee:	42ac      	cmp	r4, r5
 80054f0:	d101      	bne.n	80054f6 <__sfputs_r+0x12>
 80054f2:	2000      	movs	r0, #0
 80054f4:	e007      	b.n	8005506 <__sfputs_r+0x22>
 80054f6:	463a      	mov	r2, r7
 80054f8:	4630      	mov	r0, r6
 80054fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054fe:	f7ff ffdc 	bl	80054ba <__sfputc_r>
 8005502:	1c43      	adds	r3, r0, #1
 8005504:	d1f3      	bne.n	80054ee <__sfputs_r+0xa>
 8005506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005508 <_vfiprintf_r>:
 8005508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800550c:	460d      	mov	r5, r1
 800550e:	4614      	mov	r4, r2
 8005510:	4698      	mov	r8, r3
 8005512:	4606      	mov	r6, r0
 8005514:	b09d      	sub	sp, #116	; 0x74
 8005516:	b118      	cbz	r0, 8005520 <_vfiprintf_r+0x18>
 8005518:	6a03      	ldr	r3, [r0, #32]
 800551a:	b90b      	cbnz	r3, 8005520 <_vfiprintf_r+0x18>
 800551c:	f7fe faa0 	bl	8003a60 <__sinit>
 8005520:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005522:	07d9      	lsls	r1, r3, #31
 8005524:	d405      	bmi.n	8005532 <_vfiprintf_r+0x2a>
 8005526:	89ab      	ldrh	r3, [r5, #12]
 8005528:	059a      	lsls	r2, r3, #22
 800552a:	d402      	bmi.n	8005532 <_vfiprintf_r+0x2a>
 800552c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800552e:	f7fe fb9e 	bl	8003c6e <__retarget_lock_acquire_recursive>
 8005532:	89ab      	ldrh	r3, [r5, #12]
 8005534:	071b      	lsls	r3, r3, #28
 8005536:	d501      	bpl.n	800553c <_vfiprintf_r+0x34>
 8005538:	692b      	ldr	r3, [r5, #16]
 800553a:	b99b      	cbnz	r3, 8005564 <_vfiprintf_r+0x5c>
 800553c:	4629      	mov	r1, r5
 800553e:	4630      	mov	r0, r6
 8005540:	f000 f93a 	bl	80057b8 <__swsetup_r>
 8005544:	b170      	cbz	r0, 8005564 <_vfiprintf_r+0x5c>
 8005546:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005548:	07dc      	lsls	r4, r3, #31
 800554a:	d504      	bpl.n	8005556 <_vfiprintf_r+0x4e>
 800554c:	f04f 30ff 	mov.w	r0, #4294967295
 8005550:	b01d      	add	sp, #116	; 0x74
 8005552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005556:	89ab      	ldrh	r3, [r5, #12]
 8005558:	0598      	lsls	r0, r3, #22
 800555a:	d4f7      	bmi.n	800554c <_vfiprintf_r+0x44>
 800555c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800555e:	f7fe fb87 	bl	8003c70 <__retarget_lock_release_recursive>
 8005562:	e7f3      	b.n	800554c <_vfiprintf_r+0x44>
 8005564:	2300      	movs	r3, #0
 8005566:	9309      	str	r3, [sp, #36]	; 0x24
 8005568:	2320      	movs	r3, #32
 800556a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800556e:	2330      	movs	r3, #48	; 0x30
 8005570:	f04f 0901 	mov.w	r9, #1
 8005574:	f8cd 800c 	str.w	r8, [sp, #12]
 8005578:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005728 <_vfiprintf_r+0x220>
 800557c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005580:	4623      	mov	r3, r4
 8005582:	469a      	mov	sl, r3
 8005584:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005588:	b10a      	cbz	r2, 800558e <_vfiprintf_r+0x86>
 800558a:	2a25      	cmp	r2, #37	; 0x25
 800558c:	d1f9      	bne.n	8005582 <_vfiprintf_r+0x7a>
 800558e:	ebba 0b04 	subs.w	fp, sl, r4
 8005592:	d00b      	beq.n	80055ac <_vfiprintf_r+0xa4>
 8005594:	465b      	mov	r3, fp
 8005596:	4622      	mov	r2, r4
 8005598:	4629      	mov	r1, r5
 800559a:	4630      	mov	r0, r6
 800559c:	f7ff ffa2 	bl	80054e4 <__sfputs_r>
 80055a0:	3001      	adds	r0, #1
 80055a2:	f000 80a9 	beq.w	80056f8 <_vfiprintf_r+0x1f0>
 80055a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055a8:	445a      	add	r2, fp
 80055aa:	9209      	str	r2, [sp, #36]	; 0x24
 80055ac:	f89a 3000 	ldrb.w	r3, [sl]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 80a1 	beq.w	80056f8 <_vfiprintf_r+0x1f0>
 80055b6:	2300      	movs	r3, #0
 80055b8:	f04f 32ff 	mov.w	r2, #4294967295
 80055bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055c0:	f10a 0a01 	add.w	sl, sl, #1
 80055c4:	9304      	str	r3, [sp, #16]
 80055c6:	9307      	str	r3, [sp, #28]
 80055c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055cc:	931a      	str	r3, [sp, #104]	; 0x68
 80055ce:	4654      	mov	r4, sl
 80055d0:	2205      	movs	r2, #5
 80055d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055d6:	4854      	ldr	r0, [pc, #336]	; (8005728 <_vfiprintf_r+0x220>)
 80055d8:	f7fe fb4b 	bl	8003c72 <memchr>
 80055dc:	9a04      	ldr	r2, [sp, #16]
 80055de:	b9d8      	cbnz	r0, 8005618 <_vfiprintf_r+0x110>
 80055e0:	06d1      	lsls	r1, r2, #27
 80055e2:	bf44      	itt	mi
 80055e4:	2320      	movmi	r3, #32
 80055e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055ea:	0713      	lsls	r3, r2, #28
 80055ec:	bf44      	itt	mi
 80055ee:	232b      	movmi	r3, #43	; 0x2b
 80055f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055f4:	f89a 3000 	ldrb.w	r3, [sl]
 80055f8:	2b2a      	cmp	r3, #42	; 0x2a
 80055fa:	d015      	beq.n	8005628 <_vfiprintf_r+0x120>
 80055fc:	4654      	mov	r4, sl
 80055fe:	2000      	movs	r0, #0
 8005600:	f04f 0c0a 	mov.w	ip, #10
 8005604:	9a07      	ldr	r2, [sp, #28]
 8005606:	4621      	mov	r1, r4
 8005608:	f811 3b01 	ldrb.w	r3, [r1], #1
 800560c:	3b30      	subs	r3, #48	; 0x30
 800560e:	2b09      	cmp	r3, #9
 8005610:	d94d      	bls.n	80056ae <_vfiprintf_r+0x1a6>
 8005612:	b1b0      	cbz	r0, 8005642 <_vfiprintf_r+0x13a>
 8005614:	9207      	str	r2, [sp, #28]
 8005616:	e014      	b.n	8005642 <_vfiprintf_r+0x13a>
 8005618:	eba0 0308 	sub.w	r3, r0, r8
 800561c:	fa09 f303 	lsl.w	r3, r9, r3
 8005620:	4313      	orrs	r3, r2
 8005622:	46a2      	mov	sl, r4
 8005624:	9304      	str	r3, [sp, #16]
 8005626:	e7d2      	b.n	80055ce <_vfiprintf_r+0xc6>
 8005628:	9b03      	ldr	r3, [sp, #12]
 800562a:	1d19      	adds	r1, r3, #4
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	9103      	str	r1, [sp, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	bfbb      	ittet	lt
 8005634:	425b      	neglt	r3, r3
 8005636:	f042 0202 	orrlt.w	r2, r2, #2
 800563a:	9307      	strge	r3, [sp, #28]
 800563c:	9307      	strlt	r3, [sp, #28]
 800563e:	bfb8      	it	lt
 8005640:	9204      	strlt	r2, [sp, #16]
 8005642:	7823      	ldrb	r3, [r4, #0]
 8005644:	2b2e      	cmp	r3, #46	; 0x2e
 8005646:	d10c      	bne.n	8005662 <_vfiprintf_r+0x15a>
 8005648:	7863      	ldrb	r3, [r4, #1]
 800564a:	2b2a      	cmp	r3, #42	; 0x2a
 800564c:	d134      	bne.n	80056b8 <_vfiprintf_r+0x1b0>
 800564e:	9b03      	ldr	r3, [sp, #12]
 8005650:	3402      	adds	r4, #2
 8005652:	1d1a      	adds	r2, r3, #4
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	9203      	str	r2, [sp, #12]
 8005658:	2b00      	cmp	r3, #0
 800565a:	bfb8      	it	lt
 800565c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005660:	9305      	str	r3, [sp, #20]
 8005662:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800572c <_vfiprintf_r+0x224>
 8005666:	2203      	movs	r2, #3
 8005668:	4650      	mov	r0, sl
 800566a:	7821      	ldrb	r1, [r4, #0]
 800566c:	f7fe fb01 	bl	8003c72 <memchr>
 8005670:	b138      	cbz	r0, 8005682 <_vfiprintf_r+0x17a>
 8005672:	2240      	movs	r2, #64	; 0x40
 8005674:	9b04      	ldr	r3, [sp, #16]
 8005676:	eba0 000a 	sub.w	r0, r0, sl
 800567a:	4082      	lsls	r2, r0
 800567c:	4313      	orrs	r3, r2
 800567e:	3401      	adds	r4, #1
 8005680:	9304      	str	r3, [sp, #16]
 8005682:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005686:	2206      	movs	r2, #6
 8005688:	4829      	ldr	r0, [pc, #164]	; (8005730 <_vfiprintf_r+0x228>)
 800568a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800568e:	f7fe faf0 	bl	8003c72 <memchr>
 8005692:	2800      	cmp	r0, #0
 8005694:	d03f      	beq.n	8005716 <_vfiprintf_r+0x20e>
 8005696:	4b27      	ldr	r3, [pc, #156]	; (8005734 <_vfiprintf_r+0x22c>)
 8005698:	bb1b      	cbnz	r3, 80056e2 <_vfiprintf_r+0x1da>
 800569a:	9b03      	ldr	r3, [sp, #12]
 800569c:	3307      	adds	r3, #7
 800569e:	f023 0307 	bic.w	r3, r3, #7
 80056a2:	3308      	adds	r3, #8
 80056a4:	9303      	str	r3, [sp, #12]
 80056a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056a8:	443b      	add	r3, r7
 80056aa:	9309      	str	r3, [sp, #36]	; 0x24
 80056ac:	e768      	b.n	8005580 <_vfiprintf_r+0x78>
 80056ae:	460c      	mov	r4, r1
 80056b0:	2001      	movs	r0, #1
 80056b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80056b6:	e7a6      	b.n	8005606 <_vfiprintf_r+0xfe>
 80056b8:	2300      	movs	r3, #0
 80056ba:	f04f 0c0a 	mov.w	ip, #10
 80056be:	4619      	mov	r1, r3
 80056c0:	3401      	adds	r4, #1
 80056c2:	9305      	str	r3, [sp, #20]
 80056c4:	4620      	mov	r0, r4
 80056c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056ca:	3a30      	subs	r2, #48	; 0x30
 80056cc:	2a09      	cmp	r2, #9
 80056ce:	d903      	bls.n	80056d8 <_vfiprintf_r+0x1d0>
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d0c6      	beq.n	8005662 <_vfiprintf_r+0x15a>
 80056d4:	9105      	str	r1, [sp, #20]
 80056d6:	e7c4      	b.n	8005662 <_vfiprintf_r+0x15a>
 80056d8:	4604      	mov	r4, r0
 80056da:	2301      	movs	r3, #1
 80056dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80056e0:	e7f0      	b.n	80056c4 <_vfiprintf_r+0x1bc>
 80056e2:	ab03      	add	r3, sp, #12
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	462a      	mov	r2, r5
 80056e8:	4630      	mov	r0, r6
 80056ea:	4b13      	ldr	r3, [pc, #76]	; (8005738 <_vfiprintf_r+0x230>)
 80056ec:	a904      	add	r1, sp, #16
 80056ee:	f7fd fd69 	bl	80031c4 <_printf_float>
 80056f2:	4607      	mov	r7, r0
 80056f4:	1c78      	adds	r0, r7, #1
 80056f6:	d1d6      	bne.n	80056a6 <_vfiprintf_r+0x19e>
 80056f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056fa:	07d9      	lsls	r1, r3, #31
 80056fc:	d405      	bmi.n	800570a <_vfiprintf_r+0x202>
 80056fe:	89ab      	ldrh	r3, [r5, #12]
 8005700:	059a      	lsls	r2, r3, #22
 8005702:	d402      	bmi.n	800570a <_vfiprintf_r+0x202>
 8005704:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005706:	f7fe fab3 	bl	8003c70 <__retarget_lock_release_recursive>
 800570a:	89ab      	ldrh	r3, [r5, #12]
 800570c:	065b      	lsls	r3, r3, #25
 800570e:	f53f af1d 	bmi.w	800554c <_vfiprintf_r+0x44>
 8005712:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005714:	e71c      	b.n	8005550 <_vfiprintf_r+0x48>
 8005716:	ab03      	add	r3, sp, #12
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	462a      	mov	r2, r5
 800571c:	4630      	mov	r0, r6
 800571e:	4b06      	ldr	r3, [pc, #24]	; (8005738 <_vfiprintf_r+0x230>)
 8005720:	a904      	add	r1, sp, #16
 8005722:	f7fd ffef 	bl	8003704 <_printf_i>
 8005726:	e7e4      	b.n	80056f2 <_vfiprintf_r+0x1ea>
 8005728:	080066b3 	.word	0x080066b3
 800572c:	080066b9 	.word	0x080066b9
 8005730:	080066bd 	.word	0x080066bd
 8005734:	080031c5 	.word	0x080031c5
 8005738:	080054e5 	.word	0x080054e5

0800573c <__swbuf_r>:
 800573c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573e:	460e      	mov	r6, r1
 8005740:	4614      	mov	r4, r2
 8005742:	4605      	mov	r5, r0
 8005744:	b118      	cbz	r0, 800574e <__swbuf_r+0x12>
 8005746:	6a03      	ldr	r3, [r0, #32]
 8005748:	b90b      	cbnz	r3, 800574e <__swbuf_r+0x12>
 800574a:	f7fe f989 	bl	8003a60 <__sinit>
 800574e:	69a3      	ldr	r3, [r4, #24]
 8005750:	60a3      	str	r3, [r4, #8]
 8005752:	89a3      	ldrh	r3, [r4, #12]
 8005754:	071a      	lsls	r2, r3, #28
 8005756:	d525      	bpl.n	80057a4 <__swbuf_r+0x68>
 8005758:	6923      	ldr	r3, [r4, #16]
 800575a:	b31b      	cbz	r3, 80057a4 <__swbuf_r+0x68>
 800575c:	6823      	ldr	r3, [r4, #0]
 800575e:	6922      	ldr	r2, [r4, #16]
 8005760:	b2f6      	uxtb	r6, r6
 8005762:	1a98      	subs	r0, r3, r2
 8005764:	6963      	ldr	r3, [r4, #20]
 8005766:	4637      	mov	r7, r6
 8005768:	4283      	cmp	r3, r0
 800576a:	dc04      	bgt.n	8005776 <__swbuf_r+0x3a>
 800576c:	4621      	mov	r1, r4
 800576e:	4628      	mov	r0, r5
 8005770:	f7ff fe00 	bl	8005374 <_fflush_r>
 8005774:	b9e0      	cbnz	r0, 80057b0 <__swbuf_r+0x74>
 8005776:	68a3      	ldr	r3, [r4, #8]
 8005778:	3b01      	subs	r3, #1
 800577a:	60a3      	str	r3, [r4, #8]
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	6022      	str	r2, [r4, #0]
 8005782:	701e      	strb	r6, [r3, #0]
 8005784:	6962      	ldr	r2, [r4, #20]
 8005786:	1c43      	adds	r3, r0, #1
 8005788:	429a      	cmp	r2, r3
 800578a:	d004      	beq.n	8005796 <__swbuf_r+0x5a>
 800578c:	89a3      	ldrh	r3, [r4, #12]
 800578e:	07db      	lsls	r3, r3, #31
 8005790:	d506      	bpl.n	80057a0 <__swbuf_r+0x64>
 8005792:	2e0a      	cmp	r6, #10
 8005794:	d104      	bne.n	80057a0 <__swbuf_r+0x64>
 8005796:	4621      	mov	r1, r4
 8005798:	4628      	mov	r0, r5
 800579a:	f7ff fdeb 	bl	8005374 <_fflush_r>
 800579e:	b938      	cbnz	r0, 80057b0 <__swbuf_r+0x74>
 80057a0:	4638      	mov	r0, r7
 80057a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057a4:	4621      	mov	r1, r4
 80057a6:	4628      	mov	r0, r5
 80057a8:	f000 f806 	bl	80057b8 <__swsetup_r>
 80057ac:	2800      	cmp	r0, #0
 80057ae:	d0d5      	beq.n	800575c <__swbuf_r+0x20>
 80057b0:	f04f 37ff 	mov.w	r7, #4294967295
 80057b4:	e7f4      	b.n	80057a0 <__swbuf_r+0x64>
	...

080057b8 <__swsetup_r>:
 80057b8:	b538      	push	{r3, r4, r5, lr}
 80057ba:	4b2a      	ldr	r3, [pc, #168]	; (8005864 <__swsetup_r+0xac>)
 80057bc:	4605      	mov	r5, r0
 80057be:	6818      	ldr	r0, [r3, #0]
 80057c0:	460c      	mov	r4, r1
 80057c2:	b118      	cbz	r0, 80057cc <__swsetup_r+0x14>
 80057c4:	6a03      	ldr	r3, [r0, #32]
 80057c6:	b90b      	cbnz	r3, 80057cc <__swsetup_r+0x14>
 80057c8:	f7fe f94a 	bl	8003a60 <__sinit>
 80057cc:	89a3      	ldrh	r3, [r4, #12]
 80057ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057d2:	0718      	lsls	r0, r3, #28
 80057d4:	d422      	bmi.n	800581c <__swsetup_r+0x64>
 80057d6:	06d9      	lsls	r1, r3, #27
 80057d8:	d407      	bmi.n	80057ea <__swsetup_r+0x32>
 80057da:	2309      	movs	r3, #9
 80057dc:	602b      	str	r3, [r5, #0]
 80057de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80057e2:	f04f 30ff 	mov.w	r0, #4294967295
 80057e6:	81a3      	strh	r3, [r4, #12]
 80057e8:	e034      	b.n	8005854 <__swsetup_r+0x9c>
 80057ea:	0758      	lsls	r0, r3, #29
 80057ec:	d512      	bpl.n	8005814 <__swsetup_r+0x5c>
 80057ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057f0:	b141      	cbz	r1, 8005804 <__swsetup_r+0x4c>
 80057f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057f6:	4299      	cmp	r1, r3
 80057f8:	d002      	beq.n	8005800 <__swsetup_r+0x48>
 80057fa:	4628      	mov	r0, r5
 80057fc:	f7ff f8c4 	bl	8004988 <_free_r>
 8005800:	2300      	movs	r3, #0
 8005802:	6363      	str	r3, [r4, #52]	; 0x34
 8005804:	89a3      	ldrh	r3, [r4, #12]
 8005806:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800580a:	81a3      	strh	r3, [r4, #12]
 800580c:	2300      	movs	r3, #0
 800580e:	6063      	str	r3, [r4, #4]
 8005810:	6923      	ldr	r3, [r4, #16]
 8005812:	6023      	str	r3, [r4, #0]
 8005814:	89a3      	ldrh	r3, [r4, #12]
 8005816:	f043 0308 	orr.w	r3, r3, #8
 800581a:	81a3      	strh	r3, [r4, #12]
 800581c:	6923      	ldr	r3, [r4, #16]
 800581e:	b94b      	cbnz	r3, 8005834 <__swsetup_r+0x7c>
 8005820:	89a3      	ldrh	r3, [r4, #12]
 8005822:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800582a:	d003      	beq.n	8005834 <__swsetup_r+0x7c>
 800582c:	4621      	mov	r1, r4
 800582e:	4628      	mov	r0, r5
 8005830:	f000 f883 	bl	800593a <__smakebuf_r>
 8005834:	89a0      	ldrh	r0, [r4, #12]
 8005836:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800583a:	f010 0301 	ands.w	r3, r0, #1
 800583e:	d00a      	beq.n	8005856 <__swsetup_r+0x9e>
 8005840:	2300      	movs	r3, #0
 8005842:	60a3      	str	r3, [r4, #8]
 8005844:	6963      	ldr	r3, [r4, #20]
 8005846:	425b      	negs	r3, r3
 8005848:	61a3      	str	r3, [r4, #24]
 800584a:	6923      	ldr	r3, [r4, #16]
 800584c:	b943      	cbnz	r3, 8005860 <__swsetup_r+0xa8>
 800584e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005852:	d1c4      	bne.n	80057de <__swsetup_r+0x26>
 8005854:	bd38      	pop	{r3, r4, r5, pc}
 8005856:	0781      	lsls	r1, r0, #30
 8005858:	bf58      	it	pl
 800585a:	6963      	ldrpl	r3, [r4, #20]
 800585c:	60a3      	str	r3, [r4, #8]
 800585e:	e7f4      	b.n	800584a <__swsetup_r+0x92>
 8005860:	2000      	movs	r0, #0
 8005862:	e7f7      	b.n	8005854 <__swsetup_r+0x9c>
 8005864:	20000068 	.word	0x20000068

08005868 <_raise_r>:
 8005868:	291f      	cmp	r1, #31
 800586a:	b538      	push	{r3, r4, r5, lr}
 800586c:	4604      	mov	r4, r0
 800586e:	460d      	mov	r5, r1
 8005870:	d904      	bls.n	800587c <_raise_r+0x14>
 8005872:	2316      	movs	r3, #22
 8005874:	6003      	str	r3, [r0, #0]
 8005876:	f04f 30ff 	mov.w	r0, #4294967295
 800587a:	bd38      	pop	{r3, r4, r5, pc}
 800587c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800587e:	b112      	cbz	r2, 8005886 <_raise_r+0x1e>
 8005880:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005884:	b94b      	cbnz	r3, 800589a <_raise_r+0x32>
 8005886:	4620      	mov	r0, r4
 8005888:	f000 f830 	bl	80058ec <_getpid_r>
 800588c:	462a      	mov	r2, r5
 800588e:	4601      	mov	r1, r0
 8005890:	4620      	mov	r0, r4
 8005892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005896:	f000 b817 	b.w	80058c8 <_kill_r>
 800589a:	2b01      	cmp	r3, #1
 800589c:	d00a      	beq.n	80058b4 <_raise_r+0x4c>
 800589e:	1c59      	adds	r1, r3, #1
 80058a0:	d103      	bne.n	80058aa <_raise_r+0x42>
 80058a2:	2316      	movs	r3, #22
 80058a4:	6003      	str	r3, [r0, #0]
 80058a6:	2001      	movs	r0, #1
 80058a8:	e7e7      	b.n	800587a <_raise_r+0x12>
 80058aa:	2400      	movs	r4, #0
 80058ac:	4628      	mov	r0, r5
 80058ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80058b2:	4798      	blx	r3
 80058b4:	2000      	movs	r0, #0
 80058b6:	e7e0      	b.n	800587a <_raise_r+0x12>

080058b8 <raise>:
 80058b8:	4b02      	ldr	r3, [pc, #8]	; (80058c4 <raise+0xc>)
 80058ba:	4601      	mov	r1, r0
 80058bc:	6818      	ldr	r0, [r3, #0]
 80058be:	f7ff bfd3 	b.w	8005868 <_raise_r>
 80058c2:	bf00      	nop
 80058c4:	20000068 	.word	0x20000068

080058c8 <_kill_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	2300      	movs	r3, #0
 80058cc:	4d06      	ldr	r5, [pc, #24]	; (80058e8 <_kill_r+0x20>)
 80058ce:	4604      	mov	r4, r0
 80058d0:	4608      	mov	r0, r1
 80058d2:	4611      	mov	r1, r2
 80058d4:	602b      	str	r3, [r5, #0]
 80058d6:	f7fb fef1 	bl	80016bc <_kill>
 80058da:	1c43      	adds	r3, r0, #1
 80058dc:	d102      	bne.n	80058e4 <_kill_r+0x1c>
 80058de:	682b      	ldr	r3, [r5, #0]
 80058e0:	b103      	cbz	r3, 80058e4 <_kill_r+0x1c>
 80058e2:	6023      	str	r3, [r4, #0]
 80058e4:	bd38      	pop	{r3, r4, r5, pc}
 80058e6:	bf00      	nop
 80058e8:	20000818 	.word	0x20000818

080058ec <_getpid_r>:
 80058ec:	f7fb bedf 	b.w	80016ae <_getpid>

080058f0 <__swhatbuf_r>:
 80058f0:	b570      	push	{r4, r5, r6, lr}
 80058f2:	460c      	mov	r4, r1
 80058f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058f8:	4615      	mov	r5, r2
 80058fa:	2900      	cmp	r1, #0
 80058fc:	461e      	mov	r6, r3
 80058fe:	b096      	sub	sp, #88	; 0x58
 8005900:	da0c      	bge.n	800591c <__swhatbuf_r+0x2c>
 8005902:	89a3      	ldrh	r3, [r4, #12]
 8005904:	2100      	movs	r1, #0
 8005906:	f013 0f80 	tst.w	r3, #128	; 0x80
 800590a:	bf0c      	ite	eq
 800590c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005910:	2340      	movne	r3, #64	; 0x40
 8005912:	2000      	movs	r0, #0
 8005914:	6031      	str	r1, [r6, #0]
 8005916:	602b      	str	r3, [r5, #0]
 8005918:	b016      	add	sp, #88	; 0x58
 800591a:	bd70      	pop	{r4, r5, r6, pc}
 800591c:	466a      	mov	r2, sp
 800591e:	f000 f849 	bl	80059b4 <_fstat_r>
 8005922:	2800      	cmp	r0, #0
 8005924:	dbed      	blt.n	8005902 <__swhatbuf_r+0x12>
 8005926:	9901      	ldr	r1, [sp, #4]
 8005928:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800592c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005930:	4259      	negs	r1, r3
 8005932:	4159      	adcs	r1, r3
 8005934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005938:	e7eb      	b.n	8005912 <__swhatbuf_r+0x22>

0800593a <__smakebuf_r>:
 800593a:	898b      	ldrh	r3, [r1, #12]
 800593c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800593e:	079d      	lsls	r5, r3, #30
 8005940:	4606      	mov	r6, r0
 8005942:	460c      	mov	r4, r1
 8005944:	d507      	bpl.n	8005956 <__smakebuf_r+0x1c>
 8005946:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800594a:	6023      	str	r3, [r4, #0]
 800594c:	6123      	str	r3, [r4, #16]
 800594e:	2301      	movs	r3, #1
 8005950:	6163      	str	r3, [r4, #20]
 8005952:	b002      	add	sp, #8
 8005954:	bd70      	pop	{r4, r5, r6, pc}
 8005956:	466a      	mov	r2, sp
 8005958:	ab01      	add	r3, sp, #4
 800595a:	f7ff ffc9 	bl	80058f0 <__swhatbuf_r>
 800595e:	9900      	ldr	r1, [sp, #0]
 8005960:	4605      	mov	r5, r0
 8005962:	4630      	mov	r0, r6
 8005964:	f7ff f880 	bl	8004a68 <_malloc_r>
 8005968:	b948      	cbnz	r0, 800597e <__smakebuf_r+0x44>
 800596a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800596e:	059a      	lsls	r2, r3, #22
 8005970:	d4ef      	bmi.n	8005952 <__smakebuf_r+0x18>
 8005972:	f023 0303 	bic.w	r3, r3, #3
 8005976:	f043 0302 	orr.w	r3, r3, #2
 800597a:	81a3      	strh	r3, [r4, #12]
 800597c:	e7e3      	b.n	8005946 <__smakebuf_r+0xc>
 800597e:	89a3      	ldrh	r3, [r4, #12]
 8005980:	6020      	str	r0, [r4, #0]
 8005982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005986:	81a3      	strh	r3, [r4, #12]
 8005988:	9b00      	ldr	r3, [sp, #0]
 800598a:	6120      	str	r0, [r4, #16]
 800598c:	6163      	str	r3, [r4, #20]
 800598e:	9b01      	ldr	r3, [sp, #4]
 8005990:	b15b      	cbz	r3, 80059aa <__smakebuf_r+0x70>
 8005992:	4630      	mov	r0, r6
 8005994:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005998:	f000 f81e 	bl	80059d8 <_isatty_r>
 800599c:	b128      	cbz	r0, 80059aa <__smakebuf_r+0x70>
 800599e:	89a3      	ldrh	r3, [r4, #12]
 80059a0:	f023 0303 	bic.w	r3, r3, #3
 80059a4:	f043 0301 	orr.w	r3, r3, #1
 80059a8:	81a3      	strh	r3, [r4, #12]
 80059aa:	89a3      	ldrh	r3, [r4, #12]
 80059ac:	431d      	orrs	r5, r3
 80059ae:	81a5      	strh	r5, [r4, #12]
 80059b0:	e7cf      	b.n	8005952 <__smakebuf_r+0x18>
	...

080059b4 <_fstat_r>:
 80059b4:	b538      	push	{r3, r4, r5, lr}
 80059b6:	2300      	movs	r3, #0
 80059b8:	4d06      	ldr	r5, [pc, #24]	; (80059d4 <_fstat_r+0x20>)
 80059ba:	4604      	mov	r4, r0
 80059bc:	4608      	mov	r0, r1
 80059be:	4611      	mov	r1, r2
 80059c0:	602b      	str	r3, [r5, #0]
 80059c2:	f7fb fed9 	bl	8001778 <_fstat>
 80059c6:	1c43      	adds	r3, r0, #1
 80059c8:	d102      	bne.n	80059d0 <_fstat_r+0x1c>
 80059ca:	682b      	ldr	r3, [r5, #0]
 80059cc:	b103      	cbz	r3, 80059d0 <_fstat_r+0x1c>
 80059ce:	6023      	str	r3, [r4, #0]
 80059d0:	bd38      	pop	{r3, r4, r5, pc}
 80059d2:	bf00      	nop
 80059d4:	20000818 	.word	0x20000818

080059d8 <_isatty_r>:
 80059d8:	b538      	push	{r3, r4, r5, lr}
 80059da:	2300      	movs	r3, #0
 80059dc:	4d05      	ldr	r5, [pc, #20]	; (80059f4 <_isatty_r+0x1c>)
 80059de:	4604      	mov	r4, r0
 80059e0:	4608      	mov	r0, r1
 80059e2:	602b      	str	r3, [r5, #0]
 80059e4:	f7fb fed7 	bl	8001796 <_isatty>
 80059e8:	1c43      	adds	r3, r0, #1
 80059ea:	d102      	bne.n	80059f2 <_isatty_r+0x1a>
 80059ec:	682b      	ldr	r3, [r5, #0]
 80059ee:	b103      	cbz	r3, 80059f2 <_isatty_r+0x1a>
 80059f0:	6023      	str	r3, [r4, #0]
 80059f2:	bd38      	pop	{r3, r4, r5, pc}
 80059f4:	20000818 	.word	0x20000818

080059f8 <_init>:
 80059f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fa:	bf00      	nop
 80059fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059fe:	bc08      	pop	{r3}
 8005a00:	469e      	mov	lr, r3
 8005a02:	4770      	bx	lr

08005a04 <_fini>:
 8005a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a06:	bf00      	nop
 8005a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a0a:	bc08      	pop	{r3}
 8005a0c:	469e      	mov	lr, r3
 8005a0e:	4770      	bx	lr
